/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [21]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(21)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyq167 [20]bool
			_, _, _ = yysep167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[0] = x.HostPath != nil
			yyq167[1] = x.EmptyDir != nil
			yyq167[2] = x.GCEPersistentDisk != nil
			yyq167[3] = x.AWSElasticBlockStore != nil
			yyq167[4] = x.GitRepo != nil
			yyq167[5] = x.Secret != nil
			yyq167[6] = x.NFS != nil
			yyq167[7] = x.ISCSI != nil
			yyq167[8] = x.Glusterfs != nil
			yyq167[9] = x.PersistentVolumeClaim != nil
			yyq167[10] = x.RBD != nil
			yyq167[11] = x.FlexVolume != nil
			yyq167[12] = x.Cinder != nil
			yyq167[13] = x.CephFS != nil
			yyq167[14] = x.Flocker != nil
			yyq167[15] = x.DownwardAPI != nil
			yyq167[16] = x.FC != nil
			yyq167[17] = x.AzureFile != nil
			yyq167[18] = x.ConfigMap != nil
			yyq167[19] = x.VsphereVolume != nil
			var yynn167 int
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(20)
			} else {
				yynn167 = 0
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
				yynn167 = 0
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym188 := z.DecBinary()
	_ = yym188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct189 := r.ContainerType()
		if yyct189 == codecSelferValueTypeMap1234 {
			yyl189 := r.ReadMapStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl189, d)
			}
		} else if yyct189 == codecSelferValueTypeArray1234 {
			yyl189 := r.ReadArrayStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys190Slc
	var yyhl190 bool = l >= 0
	for yyj190 := 0; ; yyj190++ {
		if yyhl190 {
			if yyj190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys190Slc = r.DecodeBytes(yys190Slc, true, true)
		yys190 := string(yys190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys190 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys190)
		} // end switch yys190
	} // end for yyj190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym232 := z.EncBinary()
		_ = yym232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep233 := !z.EncBinary()
			yy2arr233 := z.EncBasicHandle().StructToArray
			var yyq233 [2]bool
			_, _, _ = yysep233, yyq233, yy2arr233
			const yyr233 bool = false
			yyq233[1] = x.ReadOnly != false
			var yynn233 int
			if yyr233 || yy2arr233 {
				r.EncodeArrayStart(2)
			} else {
				yynn233 = 1
				for _, b := range yyq233 {
					if b {
						yynn233++
					}
				}
				r.EncodeMapStart(yynn233)
				yynn233 = 0
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym235 := z.EncBinary()
				_ = yym235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[1] {
					yym238 := z.EncBinary()
					_ = yym238
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym240 := z.DecBinary()
	_ = yym240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct241 := r.ContainerType()
		if yyct241 == codecSelferValueTypeMap1234 {
			yyl241 := r.ReadMapStart()
			if yyl241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl241, d)
			}
		} else if yyct241 == codecSelferValueTypeArray1234 {
			yyl241 := r.ReadArrayStart()
			if yyl241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys242Slc
	var yyhl242 bool = l >= 0
	for yyj242 := 0; ; yyj242++ {
		if yyhl242 {
			if yyj242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys242Slc = r.DecodeBytes(yys242Slc, true, true)
		yys242 := string(yys242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys242 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys242)
		} // end switch yys242
	} // end for yyj242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj245 int
	var yyb245 bool
	var yyhl245 bool = l >= 0
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj245++
		if yyhl245 {
			yyb245 = yyj245 > l
		} else {
			yyb245 = r.CheckBreak()
		}
		if yyb245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym248 := z.EncBinary()
		_ = yym248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep249 := !z.EncBinary()
			yy2arr249 := z.EncBasicHandle().StructToArray
			var yyq249 [14]bool
			_, _, _ = yysep249, yyq249, yy2arr249
			const yyr249 bool = false
			yyq249[0] = x.GCEPersistentDisk != nil
			yyq249[1] = x.AWSElasticBlockStore != nil
			yyq249[2] = x.HostPath != nil
			yyq249[3] = x.Glusterfs != nil
			yyq249[4] = x.NFS != nil
			yyq249[5] = x.RBD != nil
			yyq249[6] = x.ISCSI != nil
			yyq249[7] = x.Cinder != nil
			yyq249[8] = x.CephFS != nil
			yyq249[9] = x.FC != nil
			yyq249[10] = x.Flocker != nil
			yyq249[11] = x.FlexVolume != nil
			yyq249[12] = x.AzureFile != nil
			yyq249[13] = x.VsphereVolume != nil
			var yynn249 int
			if yyr249 || yy2arr249 {
				r.EncodeArrayStart(14)
			} else {
				yynn249 = 0
				for _, b := range yyq249 {
					if b {
						yynn249++
					}
				}
				r.EncodeMapStart(yynn249)
				yynn249 = 0
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym264 := z.DecBinary()
	_ = yym264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct265 := r.ContainerType()
		if yyct265 == codecSelferValueTypeMap1234 {
			yyl265 := r.ReadMapStart()
			if yyl265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl265, d)
			}
		} else if yyct265 == codecSelferValueTypeArray1234 {
			yyl265 := r.ReadArrayStart()
			if yyl265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys266Slc
	var yyhl266 bool = l >= 0
	for yyj266 := 0; ; yyj266++ {
		if yyhl266 {
			if yyj266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys266Slc = r.DecodeBytes(yys266Slc, true, true)
		yys266 := string(yys266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys266 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys266)
		} // end switch yys266
	} // end for yyj266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj281 int
	var yyb281 bool
	var yyhl281 bool = l >= 0
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj281++
		if yyhl281 {
			yyb281 = yyj281 > l
		} else {
			yyb281 = r.CheckBreak()
		}
		if yyb281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [5]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			yyq297[3] = true
			yyq297[4] = true
			var yynn297 int
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(5)
			} else {
				yynn297 = 0
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
				yynn297 = 0
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[2] {
					yy305 := &x.ObjectMeta
					yy305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy306 := &x.ObjectMeta
					yy306.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[3] {
					yy308 := &x.Spec
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Spec
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[4] {
					yy311 := &x.Status
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.Status
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv318 := &x.ObjectMeta
				yyv318.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv319 := &x.Spec
				yyv319.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv320 := &x.Status
				yyv320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv324 := &x.ObjectMeta
		yyv324.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv325 := &x.Spec
		yyv325.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv326 := &x.Status
		yyv326.CodecDecodeSelf(d)
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [18]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[0] = len(x.Capacity) != 0
			yyq328[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq328[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq328[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq328[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq328[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq328[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq328[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq328[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq328[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq328[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq328[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq328[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq328[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq328[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq328[15] = len(x.AccessModes) != 0
			yyq328[16] = x.ClaimRef != nil
			yyq328[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(18)
			} else {
				yynn328 = 0
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn330 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn330 = true
				goto LABEL330
			}
		LABEL330:
			if yyr328 || yy2arr328 {
				if yyn330 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn330 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn331 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn331 = true
				goto LABEL331
			}
		LABEL331:
			if yyr328 || yy2arr328 {
				if yyn331 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn331 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn332 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn332 = true
				goto LABEL332
			}
		LABEL332:
			if yyr328 || yy2arr328 {
				if yyn332 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn332 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn333 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn333 = true
				goto LABEL333
			}
		LABEL333:
			if yyr328 || yy2arr328 {
				if yyn333 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn333 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn334 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn334 = true
				goto LABEL334
			}
		LABEL334:
			if yyr328 || yy2arr328 {
				if yyn334 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn334 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn335 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn335 = true
				goto LABEL335
			}
		LABEL335:
			if yyr328 || yy2arr328 {
				if yyn335 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn335 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn336 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn336 = true
				goto LABEL336
			}
		LABEL336:
			if yyr328 || yy2arr328 {
				if yyn336 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn336 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn337 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn337 = true
				goto LABEL337
			}
		LABEL337:
			if yyr328 || yy2arr328 {
				if yyn337 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn337 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn338 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn338 = true
				goto LABEL338
			}
		LABEL338:
			if yyr328 || yy2arr328 {
				if yyn338 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn338 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr328 || yy2arr328 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr328 || yy2arr328 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr328 || yy2arr328 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr328 || yy2arr328 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr328 || yy2arr328 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym345 := z.EncBinary()
						_ = yym345
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym346 := z.EncBinary()
						_ = yym346
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym349 := z.DecBinary()
	_ = yym349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct350 := r.ContainerType()
		if yyct350 == codecSelferValueTypeMap1234 {
			yyl350 := r.ReadMapStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl350, d)
			}
		} else if yyct350 == codecSelferValueTypeArray1234 {
			yyl350 := r.ReadArrayStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys351Slc
	var yyhl351 bool = l >= 0
	for yyj351 := 0; ; yyj351++ {
		if yyhl351 {
			if yyj351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys351Slc = r.DecodeBytes(yys351Slc, true, true)
		yys351 := string(yys351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys351 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv352 := &x.Capacity
				yyv352.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv367 := &x.AccessModes
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv367), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys351)
		} // end switch yys351
	} // end for yyj351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj371 int
	var yyb371 bool
	var yyhl371 bool = l >= 0
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv372 := &x.Capacity
		yyv372.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv387 := &x.AccessModes
		yym388 := z.DecBinary()
		_ = yym388
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv387), d)
		}
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj371++
		if yyhl371 {
			yyb371 = yyj371 > l
		} else {
			yyb371 = r.CheckBreak()
		}
		if yyb371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym391 := z.EncBinary()
	_ = yym391
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym392 := z.DecBinary()
	_ = yym392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [3]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Phase != ""
			yyq394[1] = x.Message != ""
			yyq394[2] = x.Reason != ""
			var yynn394 int
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(3)
			} else {
				yynn394 = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
				yynn394 = 0
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[1] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[2] {
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym401 := z.EncBinary()
					_ = yym401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym402 := z.DecBinary()
	_ = yym402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct403 := r.ContainerType()
		if yyct403 == codecSelferValueTypeMap1234 {
			yyl403 := r.ReadMapStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl403, d)
			}
		} else if yyct403 == codecSelferValueTypeArray1234 {
			yyl403 := r.ReadArrayStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys404Slc
	var yyhl404 bool = l >= 0
	for yyj404 := 0; ; yyj404++ {
		if yyhl404 {
			if yyj404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys404Slc = r.DecodeBytes(yys404Slc, true, true)
		yys404 := string(yys404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys404 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys404)
		} // end switch yys404
	} // end for yyj404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj408 int
	var yyb408 bool
	var yyhl408 bool = l >= 0
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj408++
		if yyhl408 {
			yyb408 = yyj408 > l
		} else {
			yyb408 = r.CheckBreak()
		}
		if yyb408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym412 := z.EncBinary()
		_ = yym412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep413 := !z.EncBinary()
			yy2arr413 := z.EncBasicHandle().StructToArray
			var yyq413 [4]bool
			_, _, _ = yysep413, yyq413, yy2arr413
			const yyr413 bool = false
			yyq413[0] = x.Kind != ""
			yyq413[1] = x.APIVersion != ""
			yyq413[2] = true
			var yynn413 int
			if yyr413 || yy2arr413 {
				r.EncodeArrayStart(4)
			} else {
				yynn413 = 1
				for _, b := range yyq413 {
					if b {
						yynn413++
					}
				}
				r.EncodeMapStart(yynn413)
				yynn413 = 0
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[0] {
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym416 := z.EncBinary()
					_ = yym416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[1] {
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym419 := z.EncBinary()
					_ = yym419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[2] {
					yy421 := &x.ListMeta
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else if z.HasExtensions() && z.EncExt(yy421) {
					} else {
						z.EncFallback(yy421)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.ListMeta
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy423) {
					} else {
						z.EncFallback(yy423)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym428 := z.DecBinary()
	_ = yym428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct429 := r.ContainerType()
		if yyct429 == codecSelferValueTypeMap1234 {
			yyl429 := r.ReadMapStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl429, d)
			}
		} else if yyct429 == codecSelferValueTypeArray1234 {
			yyl429 := r.ReadArrayStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys430Slc
	var yyhl430 bool = l >= 0
	for yyj430 := 0; ; yyj430++ {
		if yyhl430 {
			if yyj430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys430Slc = r.DecodeBytes(yys430Slc, true, true)
		yys430 := string(yys430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv433 := &x.ListMeta
				yym434 := z.DecBinary()
				_ = yym434
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv433) {
				} else {
					z.DecFallback(yyv433, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv435 := &x.Items
				yym436 := z.DecBinary()
				_ = yym436
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys430)
		} // end switch yys430
	} // end for yyj430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv440 := &x.ListMeta
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv440) {
		} else {
			z.DecFallback(yyv440, false)
		}
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv442 := &x.Items
		yym443 := z.DecBinary()
		_ = yym443
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv442), d)
		}
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym444 := z.EncBinary()
		_ = yym444
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep445 := !z.EncBinary()
			yy2arr445 := z.EncBasicHandle().StructToArray
			var yyq445 [5]bool
			_, _, _ = yysep445, yyq445, yy2arr445
			const yyr445 bool = false
			yyq445[0] = x.Kind != ""
			yyq445[1] = x.APIVersion != ""
			yyq445[2] = true
			yyq445[3] = true
			yyq445[4] = true
			var yynn445 int
			if yyr445 || yy2arr445 {
				r.EncodeArrayStart(5)
			} else {
				yynn445 = 0
				for _, b := range yyq445 {
					if b {
						yynn445++
					}
				}
				r.EncodeMapStart(yynn445)
				yynn445 = 0
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[0] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[2] {
					yy453 := &x.ObjectMeta
					yy453.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy454 := &x.ObjectMeta
					yy454.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[3] {
					yy456 := &x.Spec
					yy456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy457 := &x.Spec
					yy457.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[4] {
					yy459 := &x.Status
					yy459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy460 := &x.Status
					yy460.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym461 := z.DecBinary()
	_ = yym461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct462 := r.ContainerType()
		if yyct462 == codecSelferValueTypeMap1234 {
			yyl462 := r.ReadMapStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl462, d)
			}
		} else if yyct462 == codecSelferValueTypeArray1234 {
			yyl462 := r.ReadArrayStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys463Slc
	var yyhl463 bool = l >= 0
	for yyj463 := 0; ; yyj463++ {
		if yyhl463 {
			if yyj463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys463Slc = r.DecodeBytes(yys463Slc, true, true)
		yys463 := string(yys463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys463 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv466 := &x.ObjectMeta
				yyv466.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv467 := &x.Spec
				yyv467.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv468 := &x.Status
				yyv468.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys463)
		} // end switch yys463
	} // end for yyj463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv472 := &x.ObjectMeta
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv473 := &x.Spec
		yyv473.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv474 := &x.Status
		yyv474.CodecDecodeSelf(d)
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [4]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = x.Kind != ""
			yyq476[1] = x.APIVersion != ""
			yyq476[2] = true
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(4)
			} else {
				yynn476 = 1
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym482 := z.EncBinary()
					_ = yym482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[2] {
					yy484 := &x.ListMeta
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else if z.HasExtensions() && z.EncExt(yy484) {
					} else {
						z.EncFallback(yy484)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym491 := z.DecBinary()
	_ = yym491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct492 := r.ContainerType()
		if yyct492 == codecSelferValueTypeMap1234 {
			yyl492 := r.ReadMapStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl492, d)
			}
		} else if yyct492 == codecSelferValueTypeArray1234 {
			yyl492 := r.ReadArrayStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys493Slc
	var yyhl493 bool = l >= 0
	for yyj493 := 0; ; yyj493++ {
		if yyhl493 {
			if yyj493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys493Slc = r.DecodeBytes(yys493Slc, true, true)
		yys493 := string(yys493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv496 := &x.ListMeta
				yym497 := z.DecBinary()
				_ = yym497
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv496) {
				} else {
					z.DecFallback(yyv496, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv498 := &x.Items
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv498), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys493)
		} // end switch yys493
	} // end for yyj493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv503 := &x.ListMeta
		yym504 := z.DecBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv503) {
		} else {
			z.DecFallback(yyv503, false)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv505 := &x.Items
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv505), d)
		}
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym507 := z.EncBinary()
		_ = yym507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep508 := !z.EncBinary()
			yy2arr508 := z.EncBasicHandle().StructToArray
			var yyq508 [4]bool
			_, _, _ = yysep508, yyq508, yy2arr508
			const yyr508 bool = false
			yyq508[0] = len(x.AccessModes) != 0
			yyq508[1] = x.Selector != nil
			yyq508[2] = true
			yyq508[3] = x.VolumeName != ""
			var yynn508 int
			if yyr508 || yy2arr508 {
				r.EncodeArrayStart(4)
			} else {
				yynn508 = 0
				for _, b := range yyq508 {
					if b {
						yynn508++
					}
				}
				r.EncodeMapStart(yynn508)
				yynn508 = 0
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym510 := z.EncBinary()
						_ = yym510
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym511 := z.EncBinary()
						_ = yym511
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym514 := z.EncBinary()
						_ = yym514
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[2] {
					yy516 := &x.Resources
					yy516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy517 := &x.Resources
					yy517.CodecEncodeSelf(e)
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[3] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym521 := z.DecBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct522 := r.ContainerType()
		if yyct522 == codecSelferValueTypeMap1234 {
			yyl522 := r.ReadMapStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl522, d)
			}
		} else if yyct522 == codecSelferValueTypeArray1234 {
			yyl522 := r.ReadArrayStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys523Slc
	var yyhl523 bool = l >= 0
	for yyj523 := 0; ; yyj523++ {
		if yyhl523 {
			if yyj523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys523Slc = r.DecodeBytes(yys523Slc, true, true)
		yys523 := string(yys523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys523 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv524 := &x.AccessModes
				yym525 := z.DecBinary()
				_ = yym525
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv524), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym527 := z.DecBinary()
				_ = yym527
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv528 := &x.Resources
				yyv528.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys523)
		} // end switch yys523
	} // end for yyj523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj530 int
	var yyb530 bool
	var yyhl530 bool = l >= 0
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv531 := &x.AccessModes
		yym532 := z.DecBinary()
		_ = yym532
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv531), d)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv535 := &x.Resources
		yyv535.CodecDecodeSelf(d)
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj530++
		if yyhl530 {
			yyb530 = yyj530 > l
		} else {
			yyb530 = r.CheckBreak()
		}
		if yyb530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [3]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = x.Phase != ""
			yyq538[1] = len(x.AccessModes) != 0
			yyq538[2] = len(x.Capacity) != 0
			var yynn538 int
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(3)
			} else {
				yynn538 = 0
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
				yynn538 = 0
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym541 := z.EncBinary()
						_ = yym541
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv548 := &x.AccessModes
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv550 := &x.Capacity
				yyv550.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj551 int
	var yyb551 bool
	var yyhl551 bool = l >= 0
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv553 := &x.AccessModes
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
		}
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv555 := &x.Capacity
		yyv555.CodecDecodeSelf(d)
	}
	for {
		yyj551++
		if yyhl551 {
			yyb551 = yyj551 > l
		} else {
			yyb551 = r.CheckBreak()
		}
		if yyb551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym556 := z.EncBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym557 := z.DecBinary()
	_ = yym557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym558 := z.EncBinary()
	_ = yym558
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym559 := z.DecBinary()
	_ = yym559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym560 := z.EncBinary()
	_ = yym560
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym562 := z.EncBinary()
		_ = yym562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep563 := !z.EncBinary()
			yy2arr563 := z.EncBasicHandle().StructToArray
			var yyq563 [1]bool
			_, _, _ = yysep563, yyq563, yy2arr563
			const yyr563 bool = false
			var yynn563 int
			if yyr563 || yy2arr563 {
				r.EncodeArrayStart(1)
			} else {
				yynn563 = 1
				for _, b := range yyq563 {
					if b {
						yynn563++
					}
				}
				r.EncodeMapStart(yynn563)
				yynn563 = 0
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym567 := z.DecBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct568 := r.ContainerType()
		if yyct568 == codecSelferValueTypeMap1234 {
			yyl568 := r.ReadMapStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl568, d)
			}
		} else if yyct568 == codecSelferValueTypeArray1234 {
			yyl568 := r.ReadArrayStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys569Slc
	var yyhl569 bool = l >= 0
	for yyj569 := 0; ; yyj569++ {
		if yyhl569 {
			if yyj569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys569Slc = r.DecodeBytes(yys569Slc, true, true)
		yys569 := string(yys569Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys569 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys569)
		} // end switch yys569
	} // end for yyj569
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym573 := z.EncBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep574 := !z.EncBinary()
			yy2arr574 := z.EncBasicHandle().StructToArray
			var yyq574 [1]bool
			_, _, _ = yysep574, yyq574, yy2arr574
			const yyr574 bool = false
			yyq574[0] = x.Medium != ""
			var yynn574 int
			if yyr574 || yy2arr574 {
				r.EncodeArrayStart(1)
			} else {
				yynn574 = 0
				for _, b := range yyq574 {
					if b {
						yynn574++
					}
				}
				r.EncodeMapStart(yynn574)
				yynn574 = 0
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct577 := r.ContainerType()
		if yyct577 == codecSelferValueTypeMap1234 {
			yyl577 := r.ReadMapStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl577, d)
			}
		} else if yyct577 == codecSelferValueTypeArray1234 {
			yyl577 := r.ReadArrayStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys578Slc
	var yyhl578 bool = l >= 0
	for yyj578 := 0; ; yyj578++ {
		if yyhl578 {
			if yyj578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys578Slc = r.DecodeBytes(yys578Slc, true, true)
		yys578 := string(yys578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys578 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys578)
		} // end switch yys578
	} // end for yyj578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym582 := z.EncBinary()
		_ = yym582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep583 := !z.EncBinary()
			yy2arr583 := z.EncBasicHandle().StructToArray
			var yyq583 [3]bool
			_, _, _ = yysep583, yyq583, yy2arr583
			const yyr583 bool = false
			yyq583[2] = x.ReadOnly != false
			var yynn583 int
			if yyr583 || yy2arr583 {
				r.EncodeArrayStart(3)
			} else {
				yynn583 = 2
				for _, b := range yyq583 {
					if b {
						yynn583++
					}
				}
				r.EncodeMapStart(yynn583)
				yynn583 = 0
			}
			if yyr583 || yy2arr583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym585 := z.EncBinary()
				_ = yym585
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym586 := z.EncBinary()
				_ = yym586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr583 || yy2arr583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym588 := z.EncBinary()
				_ = yym588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym589 := z.EncBinary()
				_ = yym589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr583 || yy2arr583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq583[2] {
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq583[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr583 || yy2arr583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym593 := z.DecBinary()
	_ = yym593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct594 := r.ContainerType()
		if yyct594 == codecSelferValueTypeMap1234 {
			yyl594 := r.ReadMapStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl594, d)
			}
		} else if yyct594 == codecSelferValueTypeArray1234 {
			yyl594 := r.ReadArrayStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys595Slc
	var yyhl595 bool = l >= 0
	for yyj595 := 0; ; yyj595++ {
		if yyhl595 {
			if yyj595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys595Slc = r.DecodeBytes(yys595Slc, true, true)
		yys595 := string(yys595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys595 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys595)
		} // end switch yys595
	} // end for yyj595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj599 int
	var yyb599 bool
	var yyhl599 bool = l >= 0
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj599++
		if yyhl599 {
			yyb599 = yyj599 > l
		} else {
			yyb599 = r.CheckBreak()
		}
		if yyb599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [8]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			yyq604[2] = x.FSType != ""
			yyq604[3] = x.RBDPool != ""
			yyq604[4] = x.RadosUser != ""
			yyq604[5] = x.Keyring != ""
			yyq604[6] = x.SecretRef != nil
			yyq604[7] = x.ReadOnly != false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(8)
			} else {
				yynn604 = 2
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym607 := z.EncBinary()
					_ = yym607
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym610 := z.EncBinary()
				_ = yym610
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[2] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq604[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[3] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq604[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[4] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq604[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[5] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq604[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq604[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[7] {
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq604[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym627 := z.DecBinary()
	_ = yym627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct628 := r.ContainerType()
		if yyct628 == codecSelferValueTypeMap1234 {
			yyl628 := r.ReadMapStart()
			if yyl628 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl628, d)
			}
		} else if yyct628 == codecSelferValueTypeArray1234 {
			yyl628 := r.ReadArrayStart()
			if yyl628 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys629Slc
	var yyhl629 bool = l >= 0
	for yyj629 := 0; ; yyj629++ {
		if yyhl629 {
			if yyj629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys629Slc = r.DecodeBytes(yys629Slc, true, true)
		yys629 := string(yys629Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys629 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv630 := &x.CephMonitors
				yym631 := z.DecBinary()
				_ = yym631
				if false {
				} else {
					z.F.DecSliceStringX(yyv630, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys629)
		} // end switch yys629
	} // end for yyj629
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj639 int
	var yyb639 bool
	var yyhl639 bool = l >= 0
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv640 := &x.CephMonitors
		yym641 := z.DecBinary()
		_ = yym641
		if false {
		} else {
			z.F.DecSliceStringX(yyv640, false, d)
		}
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj639++
		if yyhl639 {
			yyb639 = yyj639 > l
		} else {
			yyb639 = r.CheckBreak()
		}
		if yyb639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym649 := z.EncBinary()
		_ = yym649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep650 := !z.EncBinary()
			yy2arr650 := z.EncBasicHandle().StructToArray
			var yyq650 [3]bool
			_, _, _ = yysep650, yyq650, yy2arr650
			const yyr650 bool = false
			yyq650[1] = x.FSType != ""
			yyq650[2] = x.ReadOnly != false
			var yynn650 int
			if yyr650 || yy2arr650 {
				r.EncodeArrayStart(3)
			} else {
				yynn650 = 1
				for _, b := range yyq650 {
					if b {
						yynn650++
					}
				}
				r.EncodeMapStart(yynn650)
				yynn650 = 0
			}
			if yyr650 || yy2arr650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym652 := z.EncBinary()
				_ = yym652
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym653 := z.EncBinary()
				_ = yym653
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr650 || yy2arr650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq650[1] {
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq650[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr650 || yy2arr650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq650[2] {
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq650[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr650 || yy2arr650 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym660 := z.DecBinary()
	_ = yym660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct661 := r.ContainerType()
		if yyct661 == codecSelferValueTypeMap1234 {
			yyl661 := r.ReadMapStart()
			if yyl661 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl661, d)
			}
		} else if yyct661 == codecSelferValueTypeArray1234 {
			yyl661 := r.ReadArrayStart()
			if yyl661 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys662Slc
	var yyhl662 bool = l >= 0
	for yyj662 := 0; ; yyj662++ {
		if yyhl662 {
			if yyj662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys662Slc = r.DecodeBytes(yys662Slc, true, true)
		yys662 := string(yys662Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys662 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys662)
		} // end switch yys662
	} // end for yyj662
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj666 int
	var yyb666 bool
	var yyhl666 bool = l >= 0
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj666++
		if yyhl666 {
			yyb666 = yyj666 > l
		} else {
			yyb666 = r.CheckBreak()
		}
		if yyb666 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj666-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [6]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[1] = x.Path != ""
			yyq671[2] = x.User != ""
			yyq671[3] = x.SecretFile != ""
			yyq671[4] = x.SecretRef != nil
			yyq671[5] = x.ReadOnly != false
			var yynn671 int
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(6)
			} else {
				yynn671 = 1
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
				yynn671 = 0
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[1] {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[2] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[3] {
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[5] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq671[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym688 := z.DecBinary()
	_ = yym688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct689 := r.ContainerType()
		if yyct689 == codecSelferValueTypeMap1234 {
			yyl689 := r.ReadMapStart()
			if yyl689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl689, d)
			}
		} else if yyct689 == codecSelferValueTypeArray1234 {
			yyl689 := r.ReadArrayStart()
			if yyl689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys690Slc
	var yyhl690 bool = l >= 0
	for yyj690 := 0; ; yyj690++ {
		if yyhl690 {
			if yyj690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys690Slc = r.DecodeBytes(yys690Slc, true, true)
		yys690 := string(yys690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys690 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv691 := &x.Monitors
				yym692 := z.DecBinary()
				_ = yym692
				if false {
				} else {
					z.F.DecSliceStringX(yyv691, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys690)
		} // end switch yys690
	} // end for yyj690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj698 int
	var yyb698 bool
	var yyhl698 bool = l >= 0
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv699 := &x.Monitors
		yym700 := z.DecBinary()
		_ = yym700
		if false {
		} else {
			z.F.DecSliceStringX(yyv699, false, d)
		}
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj698++
		if yyhl698 {
			yyb698 = yyj698 > l
		} else {
			yyb698 = r.CheckBreak()
		}
		if yyb698 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj698-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym706 := z.EncBinary()
		_ = yym706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep707 := !z.EncBinary()
			yy2arr707 := z.EncBasicHandle().StructToArray
			var yyq707 [1]bool
			_, _, _ = yysep707, yyq707, yy2arr707
			const yyr707 bool = false
			var yynn707 int
			if yyr707 || yy2arr707 {
				r.EncodeArrayStart(1)
			} else {
				yynn707 = 1
				for _, b := range yyq707 {
					if b {
						yynn707++
					}
				}
				r.EncodeMapStart(yynn707)
				yynn707 = 0
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym710 := z.EncBinary()
				_ = yym710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr707 || yy2arr707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym711 := z.DecBinary()
	_ = yym711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct712 := r.ContainerType()
		if yyct712 == codecSelferValueTypeMap1234 {
			yyl712 := r.ReadMapStart()
			if yyl712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl712, d)
			}
		} else if yyct712 == codecSelferValueTypeArray1234 {
			yyl712 := r.ReadArrayStart()
			if yyl712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys713Slc
	var yyhl713 bool = l >= 0
	for yyj713 := 0; ; yyj713++ {
		if yyhl713 {
			if yyj713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys713Slc = r.DecodeBytes(yys713Slc, true, true)
		yys713 := string(yys713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys713 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys713)
		} // end switch yys713
	} // end for yyj713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj715 int
	var yyb715 bool
	var yyhl715 bool = l >= 0
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj715++
		if yyhl715 {
			yyb715 = yyj715 > l
		} else {
			yyb715 = r.CheckBreak()
		}
		if yyb715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym717 := z.EncBinary()
	_ = yym717
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym718 := z.DecBinary()
	_ = yym718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym719 := z.EncBinary()
	_ = yym719
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym720 := z.DecBinary()
	_ = yym720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [4]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			yyq722[1] = x.FSType != ""
			yyq722[2] = x.Partition != 0
			yyq722[3] = x.ReadOnly != false
			var yynn722 int
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(4)
			} else {
				yynn722 = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
				yynn722 = 0
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[1] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[2] {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq722[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[3] {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq722[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym735 := z.DecBinary()
	_ = yym735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct736 := r.ContainerType()
		if yyct736 == codecSelferValueTypeMap1234 {
			yyl736 := r.ReadMapStart()
			if yyl736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl736, d)
			}
		} else if yyct736 == codecSelferValueTypeArray1234 {
			yyl736 := r.ReadArrayStart()
			if yyl736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys737Slc
	var yyhl737 bool = l >= 0
	for yyj737 := 0; ; yyj737++ {
		if yyhl737 {
			if yyj737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys737Slc = r.DecodeBytes(yys737Slc, true, true)
		yys737 := string(yys737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys737 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys737)
		} // end switch yys737
	} // end for yyj737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj742 int
	var yyb742 bool
	var yyhl742 bool = l >= 0
	yyj742++
	if yyhl742 {
		yyb742 = yyj742 > l
	} else {
		yyb742 = r.CheckBreak()
	}
	if yyb742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj742++
	if yyhl742 {
		yyb742 = yyj742 > l
	} else {
		yyb742 = r.CheckBreak()
	}
	if yyb742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj742++
	if yyhl742 {
		yyb742 = yyj742 > l
	} else {
		yyb742 = r.CheckBreak()
	}
	if yyb742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj742++
	if yyhl742 {
		yyb742 = yyj742 > l
	} else {
		yyb742 = r.CheckBreak()
	}
	if yyb742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj742++
		if yyhl742 {
			yyb742 = yyj742 > l
		} else {
			yyb742 = r.CheckBreak()
		}
		if yyb742 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj742-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym747 := z.EncBinary()
		_ = yym747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep748 := !z.EncBinary()
			yy2arr748 := z.EncBasicHandle().StructToArray
			var yyq748 [5]bool
			_, _, _ = yysep748, yyq748, yy2arr748
			const yyr748 bool = false
			yyq748[1] = x.FSType != ""
			yyq748[2] = x.SecretRef != nil
			yyq748[3] = x.ReadOnly != false
			yyq748[4] = len(x.Options) != 0
			var yynn748 int
			if yyr748 || yy2arr748 {
				r.EncodeArrayStart(5)
			} else {
				yynn748 = 1
				for _, b := range yyq748 {
					if b {
						yynn748++
					}
				}
				r.EncodeMapStart(yynn748)
				yynn748 = 0
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym750 := z.EncBinary()
				_ = yym750
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym751 := z.EncBinary()
				_ = yym751
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[1] {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq748[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[3] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq748[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym760 := z.EncBinary()
						_ = yym760
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq748[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym761 := z.EncBinary()
						_ = yym761
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym762 := z.DecBinary()
	_ = yym762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct763 := r.ContainerType()
		if yyct763 == codecSelferValueTypeMap1234 {
			yyl763 := r.ReadMapStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl763, d)
			}
		} else if yyct763 == codecSelferValueTypeArray1234 {
			yyl763 := r.ReadArrayStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys764Slc
	var yyhl764 bool = l >= 0
	for yyj764 := 0; ; yyj764++ {
		if yyhl764 {
			if yyj764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys764Slc = r.DecodeBytes(yys764Slc, true, true)
		yys764 := string(yys764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys764 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv769 := &x.Options
				yym770 := z.DecBinary()
				_ = yym770
				if false {
				} else {
					z.F.DecMapStringStringX(yyv769, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys764)
		} // end switch yys764
	} // end for yyj764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj771 int
	var yyb771 bool
	var yyhl771 bool = l >= 0
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv776 := &x.Options
		yym777 := z.DecBinary()
		_ = yym777
		if false {
		} else {
			z.F.DecMapStringStringX(yyv776, false, d)
		}
	}
	for {
		yyj771++
		if yyhl771 {
			yyb771 = yyj771 > l
		} else {
			yyb771 = r.CheckBreak()
		}
		if yyb771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym778 := z.EncBinary()
		_ = yym778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep779 := !z.EncBinary()
			yy2arr779 := z.EncBasicHandle().StructToArray
			var yyq779 [4]bool
			_, _, _ = yysep779, yyq779, yy2arr779
			const yyr779 bool = false
			yyq779[1] = x.FSType != ""
			yyq779[2] = x.Partition != 0
			yyq779[3] = x.ReadOnly != false
			var yynn779 int
			if yyr779 || yy2arr779 {
				r.EncodeArrayStart(4)
			} else {
				yynn779 = 1
				for _, b := range yyq779 {
					if b {
						yynn779++
					}
				}
				r.EncodeMapStart(yynn779)
				yynn779 = 0
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym781 := z.EncBinary()
				_ = yym781
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[1] {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[2] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[3] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq779[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym792 := z.DecBinary()
	_ = yym792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct793 := r.ContainerType()
		if yyct793 == codecSelferValueTypeMap1234 {
			yyl793 := r.ReadMapStart()
			if yyl793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl793, d)
			}
		} else if yyct793 == codecSelferValueTypeArray1234 {
			yyl793 := r.ReadArrayStart()
			if yyl793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys794Slc
	var yyhl794 bool = l >= 0
	for yyj794 := 0; ; yyj794++ {
		if yyhl794 {
			if yyj794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys794Slc = r.DecodeBytes(yys794Slc, true, true)
		yys794 := string(yys794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys794 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys794)
		} // end switch yys794
	} // end for yyj794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj799 int
	var yyb799 bool
	var yyhl799 bool = l >= 0
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj799++
		if yyhl799 {
			yyb799 = yyj799 > l
		} else {
			yyb799 = r.CheckBreak()
		}
		if yyb799 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj799-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym804 := z.EncBinary()
		_ = yym804
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep805 := !z.EncBinary()
			yy2arr805 := z.EncBasicHandle().StructToArray
			var yyq805 [3]bool
			_, _, _ = yysep805, yyq805, yy2arr805
			const yyr805 bool = false
			yyq805[1] = x.Revision != ""
			yyq805[2] = x.Directory != ""
			var yynn805 int
			if yyr805 || yy2arr805 {
				r.EncodeArrayStart(3)
			} else {
				yynn805 = 1
				for _, b := range yyq805 {
					if b {
						yynn805++
					}
				}
				r.EncodeMapStart(yynn805)
				yynn805 = 0
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym807 := z.EncBinary()
				_ = yym807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq805[1] {
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq805[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym811 := z.EncBinary()
					_ = yym811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq805[2] {
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq805[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym815 := z.DecBinary()
	_ = yym815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct816 := r.ContainerType()
		if yyct816 == codecSelferValueTypeMap1234 {
			yyl816 := r.ReadMapStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl816, d)
			}
		} else if yyct816 == codecSelferValueTypeArray1234 {
			yyl816 := r.ReadArrayStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl816, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys817Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys817Slc
	var yyhl817 bool = l >= 0
	for yyj817 := 0; ; yyj817++ {
		if yyhl817 {
			if yyj817 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys817Slc = r.DecodeBytes(yys817Slc, true, true)
		yys817 := string(yys817Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys817 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys817)
		} // end switch yys817
	} // end for yyj817
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj821 int
	var yyb821 bool
	var yyhl821 bool = l >= 0
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj821++
		if yyhl821 {
			yyb821 = yyj821 > l
		} else {
			yyb821 = r.CheckBreak()
		}
		if yyb821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym825 := z.EncBinary()
		_ = yym825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep826 := !z.EncBinary()
			yy2arr826 := z.EncBasicHandle().StructToArray
			var yyq826 [2]bool
			_, _, _ = yysep826, yyq826, yy2arr826
			const yyr826 bool = false
			yyq826[0] = x.SecretName != ""
			yyq826[1] = len(x.Items) != 0
			var yynn826 int
			if yyr826 || yy2arr826 {
				r.EncodeArrayStart(2)
			} else {
				yynn826 = 0
				for _, b := range yyq826 {
					if b {
						yynn826++
					}
				}
				r.EncodeMapStart(yynn826)
				yynn826 = 0
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[0] {
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq826[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym831 := z.EncBinary()
						_ = yym831
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym832 := z.EncBinary()
						_ = yym832
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym833 := z.DecBinary()
	_ = yym833
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct834 := r.ContainerType()
		if yyct834 == codecSelferValueTypeMap1234 {
			yyl834 := r.ReadMapStart()
			if yyl834 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl834, d)
			}
		} else if yyct834 == codecSelferValueTypeArray1234 {
			yyl834 := r.ReadArrayStart()
			if yyl834 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl834, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys835Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys835Slc
	var yyhl835 bool = l >= 0
	for yyj835 := 0; ; yyj835++ {
		if yyhl835 {
			if yyj835 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys835Slc = r.DecodeBytes(yys835Slc, true, true)
		yys835 := string(yys835Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys835 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv837 := &x.Items
				yym838 := z.DecBinary()
				_ = yym838
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv837), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys835)
		} // end switch yys835
	} // end for yyj835
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv841 := &x.Items
		yym842 := z.DecBinary()
		_ = yym842
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv841), d)
		}
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym843 := z.EncBinary()
		_ = yym843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep844 := !z.EncBinary()
			yy2arr844 := z.EncBasicHandle().StructToArray
			var yyq844 [3]bool
			_, _, _ = yysep844, yyq844, yy2arr844
			const yyr844 bool = false
			yyq844[2] = x.ReadOnly != false
			var yynn844 int
			if yyr844 || yy2arr844 {
				r.EncodeArrayStart(3)
			} else {
				yynn844 = 2
				for _, b := range yyq844 {
					if b {
						yynn844++
					}
				}
				r.EncodeMapStart(yynn844)
				yynn844 = 0
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym847 := z.EncBinary()
				_ = yym847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym850 := z.EncBinary()
				_ = yym850
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[2] {
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym854 := z.DecBinary()
	_ = yym854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct855 := r.ContainerType()
		if yyct855 == codecSelferValueTypeMap1234 {
			yyl855 := r.ReadMapStart()
			if yyl855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl855, d)
			}
		} else if yyct855 == codecSelferValueTypeArray1234 {
			yyl855 := r.ReadArrayStart()
			if yyl855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys856Slc
	var yyhl856 bool = l >= 0
	for yyj856 := 0; ; yyj856++ {
		if yyhl856 {
			if yyj856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys856Slc = r.DecodeBytes(yys856Slc, true, true)
		yys856 := string(yys856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys856 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys856)
		} // end switch yys856
	} // end for yyj856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj860 int
	var yyb860 bool
	var yyhl860 bool = l >= 0
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj860++
		if yyhl860 {
			yyb860 = yyj860 > l
		} else {
			yyb860 = r.CheckBreak()
		}
		if yyb860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym864 := z.EncBinary()
		_ = yym864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep865 := !z.EncBinary()
			yy2arr865 := z.EncBasicHandle().StructToArray
			var yyq865 [6]bool
			_, _, _ = yysep865, yyq865, yy2arr865
			const yyr865 bool = false
			yyq865[3] = x.ISCSIInterface != ""
			yyq865[4] = x.FSType != ""
			yyq865[5] = x.ReadOnly != false
			var yynn865 int
			if yyr865 || yy2arr865 {
				r.EncodeArrayStart(6)
			} else {
				yynn865 = 3
				for _, b := range yyq865 {
					if b {
						yynn865++
					}
				}
				r.EncodeMapStart(yynn865)
				yynn865 = 0
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym867 := z.EncBinary()
				_ = yym867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym868 := z.EncBinary()
				_ = yym868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym871 := z.EncBinary()
				_ = yym871
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym873 := z.EncBinary()
				_ = yym873
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym874 := z.EncBinary()
				_ = yym874
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[3] {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq865[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[4] {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq865[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[5] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq865[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym884 := z.DecBinary()
	_ = yym884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct885 := r.ContainerType()
		if yyct885 == codecSelferValueTypeMap1234 {
			yyl885 := r.ReadMapStart()
			if yyl885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl885, d)
			}
		} else if yyct885 == codecSelferValueTypeArray1234 {
			yyl885 := r.ReadArrayStart()
			if yyl885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys886Slc
	var yyhl886 bool = l >= 0
	for yyj886 := 0; ; yyj886++ {
		if yyhl886 {
			if yyj886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys886Slc = r.DecodeBytes(yys886Slc, true, true)
		yys886 := string(yys886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys886 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys886)
		} // end switch yys886
	} // end for yyj886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj893 int
	var yyb893 bool
	var yyhl893 bool = l >= 0
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj893++
		if yyhl893 {
			yyb893 = yyj893 > l
		} else {
			yyb893 = r.CheckBreak()
		}
		if yyb893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym900 := z.EncBinary()
		_ = yym900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep901 := !z.EncBinary()
			yy2arr901 := z.EncBasicHandle().StructToArray
			var yyq901 [4]bool
			_, _, _ = yysep901, yyq901, yy2arr901
			const yyr901 bool = false
			yyq901[2] = x.FSType != ""
			yyq901[3] = x.ReadOnly != false
			var yynn901 int
			if yyr901 || yy2arr901 {
				r.EncodeArrayStart(4)
			} else {
				yynn901 = 2
				for _, b := range yyq901 {
					if b {
						yynn901++
					}
				}
				r.EncodeMapStart(yynn901)
				yynn901 = 0
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy906 := *x.Lun
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeInt(int64(yy906))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy908 := *x.Lun
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeInt(int64(yy908))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[2] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq901[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[3] {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq901[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym916 := z.DecBinary()
	_ = yym916
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct917 := r.ContainerType()
		if yyct917 == codecSelferValueTypeMap1234 {
			yyl917 := r.ReadMapStart()
			if yyl917 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl917, d)
			}
		} else if yyct917 == codecSelferValueTypeArray1234 {
			yyl917 := r.ReadArrayStart()
			if yyl917 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl917, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys918Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys918Slc
	var yyhl918 bool = l >= 0
	for yyj918 := 0; ; yyj918++ {
		if yyhl918 {
			if yyj918 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys918Slc = r.DecodeBytes(yys918Slc, true, true)
		yys918 := string(yys918Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys918 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv919 := &x.TargetWWNs
				yym920 := z.DecBinary()
				_ = yym920
				if false {
				} else {
					z.F.DecSliceStringX(yyv919, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym922 := z.DecBinary()
				_ = yym922
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys918)
		} // end switch yys918
	} // end for yyj918
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj925 int
	var yyb925 bool
	var yyhl925 bool = l >= 0
	yyj925++
	if yyhl925 {
		yyb925 = yyj925 > l
	} else {
		yyb925 = r.CheckBreak()
	}
	if yyb925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv926 := &x.TargetWWNs
		yym927 := z.DecBinary()
		_ = yym927
		if false {
		} else {
			z.F.DecSliceStringX(yyv926, false, d)
		}
	}
	yyj925++
	if yyhl925 {
		yyb925 = yyj925 > l
	} else {
		yyb925 = r.CheckBreak()
	}
	if yyb925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym929 := z.DecBinary()
		_ = yym929
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj925++
	if yyhl925 {
		yyb925 = yyj925 > l
	} else {
		yyb925 = r.CheckBreak()
	}
	if yyb925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj925++
	if yyhl925 {
		yyb925 = yyj925 > l
	} else {
		yyb925 = r.CheckBreak()
	}
	if yyb925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj925++
		if yyhl925 {
			yyb925 = yyj925 > l
		} else {
			yyb925 = r.CheckBreak()
		}
		if yyb925 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj925-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym932 := z.EncBinary()
		_ = yym932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep933 := !z.EncBinary()
			yy2arr933 := z.EncBasicHandle().StructToArray
			var yyq933 [3]bool
			_, _, _ = yysep933, yyq933, yy2arr933
			const yyr933 bool = false
			yyq933[2] = x.ReadOnly != false
			var yynn933 int
			if yyr933 || yy2arr933 {
				r.EncodeArrayStart(3)
			} else {
				yynn933 = 2
				for _, b := range yyq933 {
					if b {
						yynn933++
					}
				}
				r.EncodeMapStart(yynn933)
				yynn933 = 0
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym938 := z.EncBinary()
				_ = yym938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq933[2] {
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq933[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym943 := z.DecBinary()
	_ = yym943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct944 := r.ContainerType()
		if yyct944 == codecSelferValueTypeMap1234 {
			yyl944 := r.ReadMapStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl944, d)
			}
		} else if yyct944 == codecSelferValueTypeArray1234 {
			yyl944 := r.ReadArrayStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys945Slc
	var yyhl945 bool = l >= 0
	for yyj945 := 0; ; yyj945++ {
		if yyhl945 {
			if yyj945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys945Slc = r.DecodeBytes(yys945Slc, true, true)
		yys945 := string(yys945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys945 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys945)
		} // end switch yys945
	} // end for yyj945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj949 int
	var yyb949 bool
	var yyhl949 bool = l >= 0
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj949++
		if yyhl949 {
			yyb949 = yyj949 > l
		} else {
			yyb949 = r.CheckBreak()
		}
		if yyb949 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj949-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym953 := z.EncBinary()
		_ = yym953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep954 := !z.EncBinary()
			yy2arr954 := z.EncBasicHandle().StructToArray
			var yyq954 [2]bool
			_, _, _ = yysep954, yyq954, yy2arr954
			const yyr954 bool = false
			yyq954[1] = x.FSType != ""
			var yynn954 int
			if yyr954 || yy2arr954 {
				r.EncodeArrayStart(2)
			} else {
				yynn954 = 1
				for _, b := range yyq954 {
					if b {
						yynn954++
					}
				}
				r.EncodeMapStart(yynn954)
				yynn954 = 0
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym957 := z.EncBinary()
				_ = yym957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq954[1] {
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq954[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym961 := z.DecBinary()
	_ = yym961
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct962 := r.ContainerType()
		if yyct962 == codecSelferValueTypeMap1234 {
			yyl962 := r.ReadMapStart()
			if yyl962 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl962, d)
			}
		} else if yyct962 == codecSelferValueTypeArray1234 {
			yyl962 := r.ReadArrayStart()
			if yyl962 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl962, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys963Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys963Slc
	var yyhl963 bool = l >= 0
	for yyj963 := 0; ; yyj963++ {
		if yyhl963 {
			if yyj963 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys963Slc = r.DecodeBytes(yys963Slc, true, true)
		yys963 := string(yys963Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys963 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys963)
		} // end switch yys963
	} // end for yyj963
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj966 int
	var yyb966 bool
	var yyhl966 bool = l >= 0
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj966++
		if yyhl966 {
			yyb966 = yyj966 > l
		} else {
			yyb966 = r.CheckBreak()
		}
		if yyb966 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj966-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym969 := z.EncBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep970 := !z.EncBinary()
			yy2arr970 := z.EncBasicHandle().StructToArray
			var yyq970 [2]bool
			_, _, _ = yysep970, yyq970, yy2arr970
			const yyr970 bool = false
			yyq970[0] = x.Name != ""
			yyq970[1] = len(x.Items) != 0
			var yynn970 int
			if yyr970 || yy2arr970 {
				r.EncodeArrayStart(2)
			} else {
				yynn970 = 0
				for _, b := range yyq970 {
					if b {
						yynn970++
					}
				}
				r.EncodeMapStart(yynn970)
				yynn970 = 0
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[0] {
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq970[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym975 := z.EncBinary()
						_ = yym975
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym976 := z.EncBinary()
						_ = yym976
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym977 := z.DecBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct978 := r.ContainerType()
		if yyct978 == codecSelferValueTypeMap1234 {
			yyl978 := r.ReadMapStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl978, d)
			}
		} else if yyct978 == codecSelferValueTypeArray1234 {
			yyl978 := r.ReadArrayStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys979Slc
	var yyhl979 bool = l >= 0
	for yyj979 := 0; ; yyj979++ {
		if yyhl979 {
			if yyj979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys979Slc = r.DecodeBytes(yys979Slc, true, true)
		yys979 := string(yys979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys979 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv981 := &x.Items
				yym982 := z.DecBinary()
				_ = yym982
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv981), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys979)
		} // end switch yys979
	} // end for yyj979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj983 int
	var yyb983 bool
	var yyhl983 bool = l >= 0
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj983++
	if yyhl983 {
		yyb983 = yyj983 > l
	} else {
		yyb983 = r.CheckBreak()
	}
	if yyb983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv985 := &x.Items
		yym986 := z.DecBinary()
		_ = yym986
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv985), d)
		}
	}
	for {
		yyj983++
		if yyhl983 {
			yyb983 = yyj983 > l
		} else {
			yyb983 = r.CheckBreak()
		}
		if yyb983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym987 := z.EncBinary()
		_ = yym987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep988 := !z.EncBinary()
			yy2arr988 := z.EncBasicHandle().StructToArray
			var yyq988 [2]bool
			_, _, _ = yysep988, yyq988, yy2arr988
			const yyr988 bool = false
			var yynn988 int
			if yyr988 || yy2arr988 {
				r.EncodeArrayStart(2)
			} else {
				yynn988 = 2
				for _, b := range yyq988 {
					if b {
						yynn988++
					}
				}
				r.EncodeMapStart(yynn988)
				yynn988 = 0
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym991 := z.EncBinary()
				_ = yym991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym993 := z.EncBinary()
				_ = yym993
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym994 := z.EncBinary()
				_ = yym994
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym995 := z.DecBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct996 := r.ContainerType()
		if yyct996 == codecSelferValueTypeMap1234 {
			yyl996 := r.ReadMapStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl996, d)
			}
		} else if yyct996 == codecSelferValueTypeArray1234 {
			yyl996 := r.ReadArrayStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys997Slc
	var yyhl997 bool = l >= 0
	for yyj997 := 0; ; yyj997++ {
		if yyhl997 {
			if yyj997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys997Slc = r.DecodeBytes(yys997Slc, true, true)
		yys997 := string(yys997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys997 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys997)
		} // end switch yys997
	} // end for yyj997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1000 int
	var yyb1000 bool
	var yyhl1000 bool = l >= 0
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1000++
		if yyhl1000 {
			yyb1000 = yyj1000 > l
		} else {
			yyb1000 = r.CheckBreak()
		}
		if yyb1000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1003 := z.EncBinary()
		_ = yym1003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1004 := !z.EncBinary()
			yy2arr1004 := z.EncBasicHandle().StructToArray
			var yyq1004 [5]bool
			_, _, _ = yysep1004, yyq1004, yy2arr1004
			const yyr1004 bool = false
			yyq1004[0] = x.Name != ""
			yyq1004[1] = x.HostPort != 0
			yyq1004[3] = x.Protocol != ""
			yyq1004[4] = x.HostIP != ""
			var yynn1004 int
			if yyr1004 || yy2arr1004 {
				r.EncodeArrayStart(5)
			} else {
				yynn1004 = 1
				for _, b := range yyq1004 {
					if b {
						yynn1004++
					}
				}
				r.EncodeMapStart(yynn1004)
				yynn1004 = 0
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[0] {
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[1] {
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[4] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1004[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1018 := z.DecBinary()
	_ = yym1018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1019 := r.ContainerType()
		if yyct1019 == codecSelferValueTypeMap1234 {
			yyl1019 := r.ReadMapStart()
			if yyl1019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1019, d)
			}
		} else if yyct1019 == codecSelferValueTypeArray1234 {
			yyl1019 := r.ReadArrayStart()
			if yyl1019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1020Slc
	var yyhl1020 bool = l >= 0
	for yyj1020 := 0; ; yyj1020++ {
		if yyhl1020 {
			if yyj1020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1020Slc = r.DecodeBytes(yys1020Slc, true, true)
		yys1020 := string(yys1020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1020 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1020)
		} // end switch yys1020
	} // end for yyj1020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1032 := z.EncBinary()
		_ = yym1032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1033 := !z.EncBinary()
			yy2arr1033 := z.EncBasicHandle().StructToArray
			var yyq1033 [4]bool
			_, _, _ = yysep1033, yyq1033, yy2arr1033
			const yyr1033 bool = false
			yyq1033[1] = x.ReadOnly != false
			yyq1033[3] = x.SubPath != ""
			var yynn1033 int
			if yyr1033 || yy2arr1033 {
				r.EncodeArrayStart(4)
			} else {
				yynn1033 = 2
				for _, b := range yyq1033 {
					if b {
						yynn1033++
					}
				}
				r.EncodeMapStart(yynn1033)
				yynn1033 = 0
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1035 := z.EncBinary()
				_ = yym1035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[1] {
					yym1038 := z.EncBinary()
					_ = yym1038
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1033[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1041 := z.EncBinary()
				_ = yym1041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[3] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1033[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1047 := r.ContainerType()
		if yyct1047 == codecSelferValueTypeMap1234 {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if yyct1047 == codecSelferValueTypeArray1234 {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1048 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1053 int
	var yyb1053 bool
	var yyhl1053 bool = l >= 0
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1053++
		if yyhl1053 {
			yyb1053 = yyj1053 > l
		} else {
			yyb1053 = r.CheckBreak()
		}
		if yyb1053 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1053-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [3]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[1] = x.Value != ""
			yyq1059[2] = x.ValueFrom != nil
			var yynn1059 int
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(3)
			} else {
				yynn1059 = 1
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
				yynn1059 = 0
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[1] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1067 := z.DecBinary()
	_ = yym1067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1068 := r.ContainerType()
		if yyct1068 == codecSelferValueTypeMap1234 {
			yyl1068 := r.ReadMapStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1068, d)
			}
		} else if yyct1068 == codecSelferValueTypeArray1234 {
			yyl1068 := r.ReadArrayStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1069Slc
	var yyhl1069 bool = l >= 0
	for yyj1069 := 0; ; yyj1069++ {
		if yyhl1069 {
			if yyj1069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1069Slc = r.DecodeBytes(yys1069Slc, true, true)
		yys1069 := string(yys1069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1069 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1069)
		} // end switch yys1069
	} // end for yyj1069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1073 int
	var yyb1073 bool
	var yyhl1073 bool = l >= 0
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1073++
		if yyhl1073 {
			yyb1073 = yyj1073 > l
		} else {
			yyb1073 = r.CheckBreak()
		}
		if yyb1073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyq1078 [4]bool
			_, _, _ = yysep1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[0] = x.FieldRef != nil
			yyq1078[1] = x.ResourceFieldRef != nil
			yyq1078[2] = x.ConfigMapKeyRef != nil
			yyq1078[3] = x.SecretKeyRef != nil
			var yynn1078 int
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(4)
			} else {
				yynn1078 = 0
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
				yynn1078 = 0
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1083 := z.DecBinary()
	_ = yym1083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1084 := r.ContainerType()
		if yyct1084 == codecSelferValueTypeMap1234 {
			yyl1084 := r.ReadMapStart()
			if yyl1084 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1084, d)
			}
		} else if yyct1084 == codecSelferValueTypeArray1234 {
			yyl1084 := r.ReadArrayStart()
			if yyl1084 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1085Slc
	var yyhl1085 bool = l >= 0
	for yyj1085 := 0; ; yyj1085++ {
		if yyhl1085 {
			if yyj1085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1085Slc = r.DecodeBytes(yys1085Slc, true, true)
		yys1085 := string(yys1085Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1085 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1085)
		} // end switch yys1085
	} // end for yyj1085
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1090 int
	var yyb1090 bool
	var yyhl1090 bool = l >= 0
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1090++
		if yyhl1090 {
			yyb1090 = yyj1090 > l
		} else {
			yyb1090 = r.CheckBreak()
		}
		if yyb1090 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1090-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1095 := z.EncBinary()
		_ = yym1095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1096 := !z.EncBinary()
			yy2arr1096 := z.EncBasicHandle().StructToArray
			var yyq1096 [2]bool
			_, _, _ = yysep1096, yyq1096, yy2arr1096
			const yyr1096 bool = false
			yyq1096[0] = x.APIVersion != ""
			var yynn1096 int
			if yyr1096 || yy2arr1096 {
				r.EncodeArrayStart(2)
			} else {
				yynn1096 = 1
				for _, b := range yyq1096 {
					if b {
						yynn1096++
					}
				}
				r.EncodeMapStart(yynn1096)
				yynn1096 = 0
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[0] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1103 := z.DecBinary()
	_ = yym1103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1104 := r.ContainerType()
		if yyct1104 == codecSelferValueTypeMap1234 {
			yyl1104 := r.ReadMapStart()
			if yyl1104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1104, d)
			}
		} else if yyct1104 == codecSelferValueTypeArray1234 {
			yyl1104 := r.ReadArrayStart()
			if yyl1104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1105Slc
	var yyhl1105 bool = l >= 0
	for yyj1105 := 0; ; yyj1105++ {
		if yyhl1105 {
			if yyj1105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1105Slc = r.DecodeBytes(yys1105Slc, true, true)
		yys1105 := string(yys1105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1105 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1105)
		} // end switch yys1105
	} // end for yyj1105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1108 int
	var yyb1108 bool
	var yyhl1108 bool = l >= 0
	yyj1108++
	if yyhl1108 {
		yyb1108 = yyj1108 > l
	} else {
		yyb1108 = r.CheckBreak()
	}
	if yyb1108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1108++
	if yyhl1108 {
		yyb1108 = yyj1108 > l
	} else {
		yyb1108 = r.CheckBreak()
	}
	if yyb1108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1108++
		if yyhl1108 {
			yyb1108 = yyj1108 > l
		} else {
			yyb1108 = r.CheckBreak()
		}
		if yyb1108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1111 := z.EncBinary()
		_ = yym1111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1112 := !z.EncBinary()
			yy2arr1112 := z.EncBasicHandle().StructToArray
			var yyq1112 [3]bool
			_, _, _ = yysep1112, yyq1112, yy2arr1112
			const yyr1112 bool = false
			yyq1112[0] = x.ContainerName != ""
			yyq1112[2] = true
			var yynn1112 int
			if yyr1112 || yy2arr1112 {
				r.EncodeArrayStart(3)
			} else {
				yynn1112 = 1
				for _, b := range yyq1112 {
					if b {
						yynn1112++
					}
				}
				r.EncodeMapStart(yynn1112)
				yynn1112 = 0
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1112[0] {
					yym1114 := z.EncBinary()
					_ = yym1114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1112[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1117 := z.EncBinary()
				_ = yym1117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1112[2] {
					yy1120 := &x.Divisor
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1120) {
					} else if !yym1121 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1120)
					} else {
						z.EncFallback(yy1120)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1122 := &x.Divisor
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1122) {
					} else if !yym1123 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1122)
					} else {
						z.EncFallback(yy1122)
					}
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1124 := z.DecBinary()
	_ = yym1124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1125 := r.ContainerType()
		if yyct1125 == codecSelferValueTypeMap1234 {
			yyl1125 := r.ReadMapStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1125, d)
			}
		} else if yyct1125 == codecSelferValueTypeArray1234 {
			yyl1125 := r.ReadArrayStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1126Slc
	var yyhl1126 bool = l >= 0
	for yyj1126 := 0; ; yyj1126++ {
		if yyhl1126 {
			if yyj1126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1126Slc = r.DecodeBytes(yys1126Slc, true, true)
		yys1126 := string(yys1126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1126 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1129 := &x.Divisor
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1129) {
				} else if !yym1130 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1129)
				} else {
					z.DecFallback(yyv1129, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1126)
		} // end switch yys1126
	} // end for yyj1126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1131 int
	var yyb1131 bool
	var yyhl1131 bool = l >= 0
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1134 := &x.Divisor
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1134) {
		} else if !yym1135 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1134)
		} else {
			z.DecFallback(yyv1134, false)
		}
	}
	for {
		yyj1131++
		if yyhl1131 {
			yyb1131 = yyj1131 > l
		} else {
			yyb1131 = r.CheckBreak()
		}
		if yyb1131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1136 := z.EncBinary()
		_ = yym1136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1137 := !z.EncBinary()
			yy2arr1137 := z.EncBasicHandle().StructToArray
			var yyq1137 [2]bool
			_, _, _ = yysep1137, yyq1137, yy2arr1137
			const yyr1137 bool = false
			yyq1137[0] = x.Name != ""
			var yynn1137 int
			if yyr1137 || yy2arr1137 {
				r.EncodeArrayStart(2)
			} else {
				yynn1137 = 1
				for _, b := range yyq1137 {
					if b {
						yynn1137++
					}
				}
				r.EncodeMapStart(yynn1137)
				yynn1137 = 0
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[0] {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1144 := z.DecBinary()
	_ = yym1144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1145 := r.ContainerType()
		if yyct1145 == codecSelferValueTypeMap1234 {
			yyl1145 := r.ReadMapStart()
			if yyl1145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1145, d)
			}
		} else if yyct1145 == codecSelferValueTypeArray1234 {
			yyl1145 := r.ReadArrayStart()
			if yyl1145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1146Slc
	var yyhl1146 bool = l >= 0
	for yyj1146 := 0; ; yyj1146++ {
		if yyhl1146 {
			if yyj1146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1146Slc = r.DecodeBytes(yys1146Slc, true, true)
		yys1146 := string(yys1146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1146 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1146)
		} // end switch yys1146
	} // end for yyj1146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1152 := z.EncBinary()
		_ = yym1152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1153 := !z.EncBinary()
			yy2arr1153 := z.EncBasicHandle().StructToArray
			var yyq1153 [2]bool
			_, _, _ = yysep1153, yyq1153, yy2arr1153
			const yyr1153 bool = false
			yyq1153[0] = x.Name != ""
			var yynn1153 int
			if yyr1153 || yy2arr1153 {
				r.EncodeArrayStart(2)
			} else {
				yynn1153 = 1
				for _, b := range yyq1153 {
					if b {
						yynn1153++
					}
				}
				r.EncodeMapStart(yynn1153)
				yynn1153 = 0
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1153[0] {
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1156 := z.EncBinary()
					_ = yym1156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1158 := z.EncBinary()
				_ = yym1158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1159 := z.EncBinary()
				_ = yym1159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1160 := z.DecBinary()
	_ = yym1160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1161 := r.ContainerType()
		if yyct1161 == codecSelferValueTypeMap1234 {
			yyl1161 := r.ReadMapStart()
			if yyl1161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1161, d)
			}
		} else if yyct1161 == codecSelferValueTypeArray1234 {
			yyl1161 := r.ReadArrayStart()
			if yyl1161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1162Slc
	var yyhl1162 bool = l >= 0
	for yyj1162 := 0; ; yyj1162++ {
		if yyhl1162 {
			if yyj1162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1162Slc = r.DecodeBytes(yys1162Slc, true, true)
		yys1162 := string(yys1162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1162 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1162)
		} // end switch yys1162
	} // end for yyj1162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1165 int
	var yyb1165 bool
	var yyhl1165 bool = l >= 0
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1165++
		if yyhl1165 {
			yyb1165 = yyj1165 > l
		} else {
			yyb1165 = r.CheckBreak()
		}
		if yyb1165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1168 := z.EncBinary()
		_ = yym1168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1169 := !z.EncBinary()
			yy2arr1169 := z.EncBasicHandle().StructToArray
			var yyq1169 [2]bool
			_, _, _ = yysep1169, yyq1169, yy2arr1169
			const yyr1169 bool = false
			var yynn1169 int
			if yyr1169 || yy2arr1169 {
				r.EncodeArrayStart(2)
			} else {
				yynn1169 = 2
				for _, b := range yyq1169 {
					if b {
						yynn1169++
					}
				}
				r.EncodeMapStart(yynn1169)
				yynn1169 = 0
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1171 := z.EncBinary()
				_ = yym1171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1172 := z.EncBinary()
				_ = yym1172
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1175 := z.EncBinary()
				_ = yym1175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1176 := z.DecBinary()
	_ = yym1176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1177 := r.ContainerType()
		if yyct1177 == codecSelferValueTypeMap1234 {
			yyl1177 := r.ReadMapStart()
			if yyl1177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1177, d)
			}
		} else if yyct1177 == codecSelferValueTypeArray1234 {
			yyl1177 := r.ReadArrayStart()
			if yyl1177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1178Slc
	var yyhl1178 bool = l >= 0
	for yyj1178 := 0; ; yyj1178++ {
		if yyhl1178 {
			if yyj1178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1178Slc = r.DecodeBytes(yys1178Slc, true, true)
		yys1178 := string(yys1178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1178 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1178)
		} // end switch yys1178
	} // end for yyj1178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1181 int
	var yyb1181 bool
	var yyhl1181 bool = l >= 0
	yyj1181++
	if yyhl1181 {
		yyb1181 = yyj1181 > l
	} else {
		yyb1181 = r.CheckBreak()
	}
	if yyb1181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1181++
	if yyhl1181 {
		yyb1181 = yyj1181 > l
	} else {
		yyb1181 = r.CheckBreak()
	}
	if yyb1181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1181++
		if yyhl1181 {
			yyb1181 = yyj1181 > l
		} else {
			yyb1181 = r.CheckBreak()
		}
		if yyb1181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1184 := z.EncBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1185 := !z.EncBinary()
			yy2arr1185 := z.EncBasicHandle().StructToArray
			var yyq1185 [5]bool
			_, _, _ = yysep1185, yyq1185, yy2arr1185
			const yyr1185 bool = false
			yyq1185[0] = x.Path != ""
			yyq1185[2] = x.Host != ""
			yyq1185[3] = x.Scheme != ""
			yyq1185[4] = len(x.HTTPHeaders) != 0
			var yynn1185 int
			if yyr1185 || yy2arr1185 {
				r.EncodeArrayStart(5)
			} else {
				yynn1185 = 1
				for _, b := range yyq1185 {
					if b {
						yynn1185++
					}
				}
				r.EncodeMapStart(yynn1185)
				yynn1185 = 0
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[0] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1190 := &x.Port
				yym1191 := z.EncBinary()
				_ = yym1191
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1190) {
				} else if !yym1191 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1190)
				} else {
					z.EncFallback(yy1190)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1192 := &x.Port
				yym1193 := z.EncBinary()
				_ = yym1193
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1192) {
				} else if !yym1193 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1192)
				} else {
					z.EncFallback(yy1192)
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[2] {
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1185[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1196 := z.EncBinary()
					_ = yym1196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1185[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1199 := z.EncBinary()
						_ = yym1199
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1200 := z.EncBinary()
						_ = yym1200
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1201 := z.DecBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1202 := r.ContainerType()
		if yyct1202 == codecSelferValueTypeMap1234 {
			yyl1202 := r.ReadMapStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1202, d)
			}
		} else if yyct1202 == codecSelferValueTypeArray1234 {
			yyl1202 := r.ReadArrayStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1203Slc
	var yyhl1203 bool = l >= 0
	for yyj1203 := 0; ; yyj1203++ {
		if yyhl1203 {
			if yyj1203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1203Slc = r.DecodeBytes(yys1203Slc, true, true)
		yys1203 := string(yys1203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1203 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1205 := &x.Port
				yym1206 := z.DecBinary()
				_ = yym1206
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1205) {
				} else if !yym1206 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1205)
				} else {
					z.DecFallback(yyv1205, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1209 := &x.HTTPHeaders
				yym1210 := z.DecBinary()
				_ = yym1210
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1209), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1203)
		} // end switch yys1203
	} // end for yyj1203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1213 := &x.Port
		yym1214 := z.DecBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1213) {
		} else if !yym1214 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1213)
		} else {
			z.DecFallback(yyv1213, false)
		}
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1217 := &x.HTTPHeaders
		yym1218 := z.DecBinary()
		_ = yym1218
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1217), d)
		}
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1219 := z.EncBinary()
	_ = yym1219
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1220 := z.DecBinary()
	_ = yym1220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1221 := z.EncBinary()
		_ = yym1221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1222 := !z.EncBinary()
			yy2arr1222 := z.EncBasicHandle().StructToArray
			var yyq1222 [1]bool
			_, _, _ = yysep1222, yyq1222, yy2arr1222
			const yyr1222 bool = false
			var yynn1222 int
			if yyr1222 || yy2arr1222 {
				r.EncodeArrayStart(1)
			} else {
				yynn1222 = 1
				for _, b := range yyq1222 {
					if b {
						yynn1222++
					}
				}
				r.EncodeMapStart(yynn1222)
				yynn1222 = 0
			}
			if yyr1222 || yy2arr1222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1224 := &x.Port
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1224) {
				} else if !yym1225 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1224)
				} else {
					z.EncFallback(yy1224)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1226 := &x.Port
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1226) {
				} else if !yym1227 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1226)
				} else {
					z.EncFallback(yy1226)
				}
			}
			if yyr1222 || yy2arr1222 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1231 := &x.Port
				yym1232 := z.DecBinary()
				_ = yym1232
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1231) {
				} else if !yym1232 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1231)
				} else {
					z.DecFallback(yyv1231, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1233 int
	var yyb1233 bool
	var yyhl1233 bool = l >= 0
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1234 := &x.Port
		yym1235 := z.DecBinary()
		_ = yym1235
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1234) {
		} else if !yym1235 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1234)
		} else {
			z.DecFallback(yyv1234, false)
		}
	}
	for {
		yyj1233++
		if yyhl1233 {
			yyb1233 = yyj1233 > l
		} else {
			yyb1233 = r.CheckBreak()
		}
		if yyb1233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1236 := z.EncBinary()
		_ = yym1236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1237 := !z.EncBinary()
			yy2arr1237 := z.EncBasicHandle().StructToArray
			var yyq1237 [1]bool
			_, _, _ = yysep1237, yyq1237, yy2arr1237
			const yyr1237 bool = false
			yyq1237[0] = len(x.Command) != 0
			var yynn1237 int
			if yyr1237 || yy2arr1237 {
				r.EncodeArrayStart(1)
			} else {
				yynn1237 = 0
				for _, b := range yyq1237 {
					if b {
						yynn1237++
					}
				}
				r.EncodeMapStart(yynn1237)
				yynn1237 = 0
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1237[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1239 := z.EncBinary()
						_ = yym1239
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1237[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1240 := z.EncBinary()
						_ = yym1240
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1241 := z.DecBinary()
	_ = yym1241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1242 := r.ContainerType()
		if yyct1242 == codecSelferValueTypeMap1234 {
			yyl1242 := r.ReadMapStart()
			if yyl1242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1242, d)
			}
		} else if yyct1242 == codecSelferValueTypeArray1234 {
			yyl1242 := r.ReadArrayStart()
			if yyl1242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1243Slc
	var yyhl1243 bool = l >= 0
	for yyj1243 := 0; ; yyj1243++ {
		if yyhl1243 {
			if yyj1243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1243Slc = r.DecodeBytes(yys1243Slc, true, true)
		yys1243 := string(yys1243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1243 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1244 := &x.Command
				yym1245 := z.DecBinary()
				_ = yym1245
				if false {
				} else {
					z.F.DecSliceStringX(yyv1244, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1243)
		} // end switch yys1243
	} // end for yyj1243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1246 int
	var yyb1246 bool
	var yyhl1246 bool = l >= 0
	yyj1246++
	if yyhl1246 {
		yyb1246 = yyj1246 > l
	} else {
		yyb1246 = r.CheckBreak()
	}
	if yyb1246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1247 := &x.Command
		yym1248 := z.DecBinary()
		_ = yym1248
		if false {
		} else {
			z.F.DecSliceStringX(yyv1247, false, d)
		}
	}
	for {
		yyj1246++
		if yyhl1246 {
			yyb1246 = yyj1246 > l
		} else {
			yyb1246 = r.CheckBreak()
		}
		if yyb1246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [8]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1250[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1250[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1250[3] = x.InitialDelaySeconds != 0
			yyq1250[4] = x.TimeoutSeconds != 0
			yyq1250[5] = x.PeriodSeconds != 0
			yyq1250[6] = x.SuccessThreshold != 0
			yyq1250[7] = x.FailureThreshold != 0
			var yynn1250 int
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(8)
			} else {
				yynn1250 = 0
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
				yynn1250 = 0
			}
			var yyn1251 bool
			if x.Handler.Exec == nil {
				yyn1251 = true
				goto LABEL1251
			}
		LABEL1251:
			if yyr1250 || yy2arr1250 {
				if yyn1251 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1250[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1251 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1252 bool
			if x.Handler.HTTPGet == nil {
				yyn1252 = true
				goto LABEL1252
			}
		LABEL1252:
			if yyr1250 || yy2arr1250 {
				if yyn1252 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1250[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1252 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1253 bool
			if x.Handler.TCPSocket == nil {
				yyn1253 = true
				goto LABEL1253
			}
		LABEL1253:
			if yyr1250 || yy2arr1250 {
				if yyn1253 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1250[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1253 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[3] {
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[4] {
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[5] {
					yym1261 := z.EncBinary()
					_ = yym1261
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1250[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[6] {
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1250[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[7] {
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1250[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1269 := z.DecBinary()
	_ = yym1269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1270 := r.ContainerType()
		if yyct1270 == codecSelferValueTypeMap1234 {
			yyl1270 := r.ReadMapStart()
			if yyl1270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1270, d)
			}
		} else if yyct1270 == codecSelferValueTypeArray1234 {
			yyl1270 := r.ReadArrayStart()
			if yyl1270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1271Slc
	var yyhl1271 bool = l >= 0
	for yyj1271 := 0; ; yyj1271++ {
		if yyhl1271 {
			if yyj1271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1271Slc = r.DecodeBytes(yys1271Slc, true, true)
		yys1271 := string(yys1271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1271 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1271)
		} // end switch yys1271
	} // end for yyj1271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1280 int
	var yyb1280 bool
	var yyhl1280 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1280++
		if yyhl1280 {
			yyb1280 = yyj1280 > l
		} else {
			yyb1280 = r.CheckBreak()
		}
		if yyb1280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1289 := z.EncBinary()
	_ = yym1289
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1290 := z.DecBinary()
	_ = yym1290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1291 := z.EncBinary()
	_ = yym1291
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1292 := z.DecBinary()
	_ = yym1292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1293 := z.EncBinary()
		_ = yym1293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1294 := !z.EncBinary()
			yy2arr1294 := z.EncBasicHandle().StructToArray
			var yyq1294 [2]bool
			_, _, _ = yysep1294, yyq1294, yy2arr1294
			const yyr1294 bool = false
			yyq1294[0] = len(x.Add) != 0
			yyq1294[1] = len(x.Drop) != 0
			var yynn1294 int
			if yyr1294 || yy2arr1294 {
				r.EncodeArrayStart(2)
			} else {
				yynn1294 = 0
				for _, b := range yyq1294 {
					if b {
						yynn1294++
					}
				}
				r.EncodeMapStart(yynn1294)
				yynn1294 = 0
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1296 := z.EncBinary()
						_ = yym1296
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1297 := z.EncBinary()
						_ = yym1297
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1299 := z.EncBinary()
						_ = yym1299
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1300 := z.EncBinary()
						_ = yym1300
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1301 := z.DecBinary()
	_ = yym1301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1302 := r.ContainerType()
		if yyct1302 == codecSelferValueTypeMap1234 {
			yyl1302 := r.ReadMapStart()
			if yyl1302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1302, d)
			}
		} else if yyct1302 == codecSelferValueTypeArray1234 {
			yyl1302 := r.ReadArrayStart()
			if yyl1302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1303Slc
	var yyhl1303 bool = l >= 0
	for yyj1303 := 0; ; yyj1303++ {
		if yyhl1303 {
			if yyj1303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1303Slc = r.DecodeBytes(yys1303Slc, true, true)
		yys1303 := string(yys1303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1303 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1304 := &x.Add
				yym1305 := z.DecBinary()
				_ = yym1305
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1304), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1306 := &x.Drop
				yym1307 := z.DecBinary()
				_ = yym1307
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1306), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1303)
		} // end switch yys1303
	} // end for yyj1303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1308 int
	var yyb1308 bool
	var yyhl1308 bool = l >= 0
	yyj1308++
	if yyhl1308 {
		yyb1308 = yyj1308 > l
	} else {
		yyb1308 = r.CheckBreak()
	}
	if yyb1308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1309 := &x.Add
		yym1310 := z.DecBinary()
		_ = yym1310
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1309), d)
		}
	}
	yyj1308++
	if yyhl1308 {
		yyb1308 = yyj1308 > l
	} else {
		yyb1308 = r.CheckBreak()
	}
	if yyb1308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1311 := &x.Drop
		yym1312 := z.DecBinary()
		_ = yym1312
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1311), d)
		}
	}
	for {
		yyj1308++
		if yyhl1308 {
			yyb1308 = yyj1308 > l
		} else {
			yyb1308 = r.CheckBreak()
		}
		if yyb1308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1313 := z.EncBinary()
		_ = yym1313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1314 := !z.EncBinary()
			yy2arr1314 := z.EncBasicHandle().StructToArray
			var yyq1314 [2]bool
			_, _, _ = yysep1314, yyq1314, yy2arr1314
			const yyr1314 bool = false
			yyq1314[0] = len(x.Limits) != 0
			yyq1314[1] = len(x.Requests) != 0
			var yynn1314 int
			if yyr1314 || yy2arr1314 {
				r.EncodeArrayStart(2)
			} else {
				yynn1314 = 0
				for _, b := range yyq1314 {
					if b {
						yynn1314++
					}
				}
				r.EncodeMapStart(yynn1314)
				yynn1314 = 0
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1314[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1314[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1314[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1317 := z.DecBinary()
	_ = yym1317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1318 := r.ContainerType()
		if yyct1318 == codecSelferValueTypeMap1234 {
			yyl1318 := r.ReadMapStart()
			if yyl1318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1318, d)
			}
		} else if yyct1318 == codecSelferValueTypeArray1234 {
			yyl1318 := r.ReadArrayStart()
			if yyl1318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1319Slc
	var yyhl1319 bool = l >= 0
	for yyj1319 := 0; ; yyj1319++ {
		if yyhl1319 {
			if yyj1319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1319Slc = r.DecodeBytes(yys1319Slc, true, true)
		yys1319 := string(yys1319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1319 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1320 := &x.Limits
				yyv1320.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1321 := &x.Requests
				yyv1321.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1319)
		} // end switch yys1319
	} // end for yyj1319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1322 int
	var yyb1322 bool
	var yyhl1322 bool = l >= 0
	yyj1322++
	if yyhl1322 {
		yyb1322 = yyj1322 > l
	} else {
		yyb1322 = r.CheckBreak()
	}
	if yyb1322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1323 := &x.Limits
		yyv1323.CodecDecodeSelf(d)
	}
	yyj1322++
	if yyhl1322 {
		yyb1322 = yyj1322 > l
	} else {
		yyb1322 = r.CheckBreak()
	}
	if yyb1322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1324 := &x.Requests
		yyv1324.CodecDecodeSelf(d)
	}
	for {
		yyj1322++
		if yyhl1322 {
			yyb1322 = yyj1322 > l
		} else {
			yyb1322 = r.CheckBreak()
		}
		if yyb1322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1325 := z.EncBinary()
		_ = yym1325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1326 := !z.EncBinary()
			yy2arr1326 := z.EncBasicHandle().StructToArray
			var yyq1326 [18]bool
			_, _, _ = yysep1326, yyq1326, yy2arr1326
			const yyr1326 bool = false
			yyq1326[1] = x.Image != ""
			yyq1326[2] = len(x.Command) != 0
			yyq1326[3] = len(x.Args) != 0
			yyq1326[4] = x.WorkingDir != ""
			yyq1326[5] = len(x.Ports) != 0
			yyq1326[6] = len(x.Env) != 0
			yyq1326[7] = true
			yyq1326[8] = len(x.VolumeMounts) != 0
			yyq1326[9] = x.LivenessProbe != nil
			yyq1326[10] = x.ReadinessProbe != nil
			yyq1326[11] = x.Lifecycle != nil
			yyq1326[12] = x.TerminationMessagePath != ""
			yyq1326[13] = x.ImagePullPolicy != ""
			yyq1326[14] = x.SecurityContext != nil
			yyq1326[15] = x.Stdin != false
			yyq1326[16] = x.StdinOnce != false
			yyq1326[17] = x.TTY != false
			var yynn1326 int
			if yyr1326 || yy2arr1326 {
				r.EncodeArrayStart(18)
			} else {
				yynn1326 = 1
				for _, b := range yyq1326 {
					if b {
						yynn1326++
					}
				}
				r.EncodeMapStart(yynn1326)
				yynn1326 = 0
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1329 := z.EncBinary()
				_ = yym1329
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[1] {
					yym1331 := z.EncBinary()
					_ = yym1331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1334 := z.EncBinary()
						_ = yym1334
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1335 := z.EncBinary()
						_ = yym1335
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1337 := z.EncBinary()
						_ = yym1337
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1338 := z.EncBinary()
						_ = yym1338
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[4] {
					yym1340 := z.EncBinary()
					_ = yym1340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1326[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1343 := z.EncBinary()
						_ = yym1343
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1344 := z.EncBinary()
						_ = yym1344
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[7] {
					yy1349 := &x.Resources
					yy1349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1350 := &x.Resources
					yy1350.CodecEncodeSelf(e)
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1352 := z.EncBinary()
						_ = yym1352
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1353 := z.EncBinary()
						_ = yym1353
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[12] {
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1326[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1326[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[15] {
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1326[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[16] {
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1326[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[17] {
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1326[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1371 := z.DecBinary()
	_ = yym1371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1372 := r.ContainerType()
		if yyct1372 == codecSelferValueTypeMap1234 {
			yyl1372 := r.ReadMapStart()
			if yyl1372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1372, d)
			}
		} else if yyct1372 == codecSelferValueTypeArray1234 {
			yyl1372 := r.ReadArrayStart()
			if yyl1372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1373Slc
	var yyhl1373 bool = l >= 0
	for yyj1373 := 0; ; yyj1373++ {
		if yyhl1373 {
			if yyj1373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1373Slc = r.DecodeBytes(yys1373Slc, true, true)
		yys1373 := string(yys1373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1373 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1376 := &x.Command
				yym1377 := z.DecBinary()
				_ = yym1377
				if false {
				} else {
					z.F.DecSliceStringX(yyv1376, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1378 := &x.Args
				yym1379 := z.DecBinary()
				_ = yym1379
				if false {
				} else {
					z.F.DecSliceStringX(yyv1378, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1381 := &x.Ports
				yym1382 := z.DecBinary()
				_ = yym1382
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1381), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1383 := &x.Env
				yym1384 := z.DecBinary()
				_ = yym1384
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1383), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1385 := &x.Resources
				yyv1385.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1386 := &x.VolumeMounts
				yym1387 := z.DecBinary()
				_ = yym1387
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1386), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1373)
		} // end switch yys1373
	} // end for yyj1373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1397 int
	var yyb1397 bool
	var yyhl1397 bool = l >= 0
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1400 := &x.Command
		yym1401 := z.DecBinary()
		_ = yym1401
		if false {
		} else {
			z.F.DecSliceStringX(yyv1400, false, d)
		}
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1402 := &x.Args
		yym1403 := z.DecBinary()
		_ = yym1403
		if false {
		} else {
			z.F.DecSliceStringX(yyv1402, false, d)
		}
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1405 := &x.Ports
		yym1406 := z.DecBinary()
		_ = yym1406
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1405), d)
		}
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1407 := &x.Env
		yym1408 := z.DecBinary()
		_ = yym1408
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1407), d)
		}
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1409 := &x.Resources
		yyv1409.CodecDecodeSelf(d)
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1410 := &x.VolumeMounts
		yym1411 := z.DecBinary()
		_ = yym1411
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1410), d)
		}
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1397++
	if yyhl1397 {
		yyb1397 = yyj1397 > l
	} else {
		yyb1397 = r.CheckBreak()
	}
	if yyb1397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1397++
		if yyhl1397 {
			yyb1397 = yyj1397 > l
		} else {
			yyb1397 = r.CheckBreak()
		}
		if yyb1397 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1397-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1421 := z.EncBinary()
		_ = yym1421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1422 := !z.EncBinary()
			yy2arr1422 := z.EncBasicHandle().StructToArray
			var yyq1422 [3]bool
			_, _, _ = yysep1422, yyq1422, yy2arr1422
			const yyr1422 bool = false
			yyq1422[0] = x.Exec != nil
			yyq1422[1] = x.HTTPGet != nil
			yyq1422[2] = x.TCPSocket != nil
			var yynn1422 int
			if yyr1422 || yy2arr1422 {
				r.EncodeArrayStart(3)
			} else {
				yynn1422 = 0
				for _, b := range yyq1422 {
					if b {
						yynn1422++
					}
				}
				r.EncodeMapStart(yynn1422)
				yynn1422 = 0
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1422[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1422[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1422 || yy2arr1422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1426 := z.DecBinary()
	_ = yym1426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1427 := r.ContainerType()
		if yyct1427 == codecSelferValueTypeMap1234 {
			yyl1427 := r.ReadMapStart()
			if yyl1427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1427, d)
			}
		} else if yyct1427 == codecSelferValueTypeArray1234 {
			yyl1427 := r.ReadArrayStart()
			if yyl1427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1428Slc
	var yyhl1428 bool = l >= 0
	for yyj1428 := 0; ; yyj1428++ {
		if yyhl1428 {
			if yyj1428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1428Slc = r.DecodeBytes(yys1428Slc, true, true)
		yys1428 := string(yys1428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1428 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1428)
		} // end switch yys1428
	} // end for yyj1428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1432 int
	var yyb1432 bool
	var yyhl1432 bool = l >= 0
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1432++
		if yyhl1432 {
			yyb1432 = yyj1432 > l
		} else {
			yyb1432 = r.CheckBreak()
		}
		if yyb1432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1436 := z.EncBinary()
		_ = yym1436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1437 := !z.EncBinary()
			yy2arr1437 := z.EncBasicHandle().StructToArray
			var yyq1437 [2]bool
			_, _, _ = yysep1437, yyq1437, yy2arr1437
			const yyr1437 bool = false
			yyq1437[0] = x.PostStart != nil
			yyq1437[1] = x.PreStop != nil
			var yynn1437 int
			if yyr1437 || yy2arr1437 {
				r.EncodeArrayStart(2)
			} else {
				yynn1437 = 0
				for _, b := range yyq1437 {
					if b {
						yynn1437++
					}
				}
				r.EncodeMapStart(yynn1437)
				yynn1437 = 0
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1441 := r.ContainerType()
		if yyct1441 == codecSelferValueTypeMap1234 {
			yyl1441 := r.ReadMapStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1441, d)
			}
		} else if yyct1441 == codecSelferValueTypeArray1234 {
			yyl1441 := r.ReadArrayStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1442Slc
	var yyhl1442 bool = l >= 0
	for yyj1442 := 0; ; yyj1442++ {
		if yyhl1442 {
			if yyj1442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1442Slc = r.DecodeBytes(yys1442Slc, true, true)
		yys1442 := string(yys1442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1442 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1442)
		} // end switch yys1442
	} // end for yyj1442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1445 int
	var yyb1445 bool
	var yyhl1445 bool = l >= 0
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1445++
		if yyhl1445 {
			yyb1445 = yyj1445 > l
		} else {
			yyb1445 = r.CheckBreak()
		}
		if yyb1445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1448 := z.EncBinary()
	_ = yym1448
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1449 := z.DecBinary()
	_ = yym1449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1450 := z.EncBinary()
		_ = yym1450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1451 := !z.EncBinary()
			yy2arr1451 := z.EncBasicHandle().StructToArray
			var yyq1451 [2]bool
			_, _, _ = yysep1451, yyq1451, yy2arr1451
			const yyr1451 bool = false
			yyq1451[0] = x.Reason != ""
			yyq1451[1] = x.Message != ""
			var yynn1451 int
			if yyr1451 || yy2arr1451 {
				r.EncodeArrayStart(2)
			} else {
				yynn1451 = 0
				for _, b := range yyq1451 {
					if b {
						yynn1451++
					}
				}
				r.EncodeMapStart(yynn1451)
				yynn1451 = 0
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[0] {
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[1] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1458 := z.DecBinary()
	_ = yym1458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1459 := r.ContainerType()
		if yyct1459 == codecSelferValueTypeMap1234 {
			yyl1459 := r.ReadMapStart()
			if yyl1459 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1459, d)
			}
		} else if yyct1459 == codecSelferValueTypeArray1234 {
			yyl1459 := r.ReadArrayStart()
			if yyl1459 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1460Slc
	var yyhl1460 bool = l >= 0
	for yyj1460 := 0; ; yyj1460++ {
		if yyhl1460 {
			if yyj1460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1460Slc = r.DecodeBytes(yys1460Slc, true, true)
		yys1460 := string(yys1460Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1460 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1460)
		} // end switch yys1460
	} // end for yyj1460
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1463 int
	var yyb1463 bool
	var yyhl1463 bool = l >= 0
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1463++
		if yyhl1463 {
			yyb1463 = yyj1463 > l
		} else {
			yyb1463 = r.CheckBreak()
		}
		if yyb1463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1466 := z.EncBinary()
		_ = yym1466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1467 := !z.EncBinary()
			yy2arr1467 := z.EncBasicHandle().StructToArray
			var yyq1467 [1]bool
			_, _, _ = yysep1467, yyq1467, yy2arr1467
			const yyr1467 bool = false
			yyq1467[0] = true
			var yynn1467 int
			if yyr1467 || yy2arr1467 {
				r.EncodeArrayStart(1)
			} else {
				yynn1467 = 0
				for _, b := range yyq1467 {
					if b {
						yynn1467++
					}
				}
				r.EncodeMapStart(yynn1467)
				yynn1467 = 0
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[0] {
					yy1469 := &x.StartedAt
					yym1470 := z.EncBinary()
					_ = yym1470
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1469) {
					} else if yym1470 {
						z.EncBinaryMarshal(yy1469)
					} else if !yym1470 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1469)
					} else {
						z.EncFallback(yy1469)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1471 := &x.StartedAt
					yym1472 := z.EncBinary()
					_ = yym1472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1471) {
					} else if yym1472 {
						z.EncBinaryMarshal(yy1471)
					} else if !yym1472 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1471)
					} else {
						z.EncFallback(yy1471)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1473 := z.DecBinary()
	_ = yym1473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1474 := r.ContainerType()
		if yyct1474 == codecSelferValueTypeMap1234 {
			yyl1474 := r.ReadMapStart()
			if yyl1474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1474, d)
			}
		} else if yyct1474 == codecSelferValueTypeArray1234 {
			yyl1474 := r.ReadArrayStart()
			if yyl1474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1475Slc
	var yyhl1475 bool = l >= 0
	for yyj1475 := 0; ; yyj1475++ {
		if yyhl1475 {
			if yyj1475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1475Slc = r.DecodeBytes(yys1475Slc, true, true)
		yys1475 := string(yys1475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1475 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1476 := &x.StartedAt
				yym1477 := z.DecBinary()
				_ = yym1477
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1476) {
				} else if yym1477 {
					z.DecBinaryUnmarshal(yyv1476)
				} else if !yym1477 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1476)
				} else {
					z.DecFallback(yyv1476, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1475)
		} // end switch yys1475
	} // end for yyj1475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1478 int
	var yyb1478 bool
	var yyhl1478 bool = l >= 0
	yyj1478++
	if yyhl1478 {
		yyb1478 = yyj1478 > l
	} else {
		yyb1478 = r.CheckBreak()
	}
	if yyb1478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1479 := &x.StartedAt
		yym1480 := z.DecBinary()
		_ = yym1480
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1479) {
		} else if yym1480 {
			z.DecBinaryUnmarshal(yyv1479)
		} else if !yym1480 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1479)
		} else {
			z.DecFallback(yyv1479, false)
		}
	}
	for {
		yyj1478++
		if yyhl1478 {
			yyb1478 = yyj1478 > l
		} else {
			yyb1478 = r.CheckBreak()
		}
		if yyb1478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1481 := z.EncBinary()
		_ = yym1481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1482 := !z.EncBinary()
			yy2arr1482 := z.EncBasicHandle().StructToArray
			var yyq1482 [7]bool
			_, _, _ = yysep1482, yyq1482, yy2arr1482
			const yyr1482 bool = false
			yyq1482[1] = x.Signal != 0
			yyq1482[2] = x.Reason != ""
			yyq1482[3] = x.Message != ""
			yyq1482[4] = true
			yyq1482[5] = true
			yyq1482[6] = x.ContainerID != ""
			var yynn1482 int
			if yyr1482 || yy2arr1482 {
				r.EncodeArrayStart(7)
			} else {
				yynn1482 = 1
				for _, b := range yyq1482 {
					if b {
						yynn1482++
					}
				}
				r.EncodeMapStart(yynn1482)
				yynn1482 = 0
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1484 := z.EncBinary()
				_ = yym1484
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1485 := z.EncBinary()
				_ = yym1485
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[1] {
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1482[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[2] {
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1482[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[3] {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1482[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[4] {
					yy1496 := &x.StartedAt
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1496) {
					} else if yym1497 {
						z.EncBinaryMarshal(yy1496)
					} else if !yym1497 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1496)
					} else {
						z.EncFallback(yy1496)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1482[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1498 := &x.StartedAt
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1498) {
					} else if yym1499 {
						z.EncBinaryMarshal(yy1498)
					} else if !yym1499 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1498)
					} else {
						z.EncFallback(yy1498)
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[5] {
					yy1501 := &x.FinishedAt
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1501) {
					} else if yym1502 {
						z.EncBinaryMarshal(yy1501)
					} else if !yym1502 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1501)
					} else {
						z.EncFallback(yy1501)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1482[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1503 := &x.FinishedAt
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1503) {
					} else if yym1504 {
						z.EncBinaryMarshal(yy1503)
					} else if !yym1504 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1503)
					} else {
						z.EncFallback(yy1503)
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[6] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1482[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1508 := z.DecBinary()
	_ = yym1508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1509 := r.ContainerType()
		if yyct1509 == codecSelferValueTypeMap1234 {
			yyl1509 := r.ReadMapStart()
			if yyl1509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1509, d)
			}
		} else if yyct1509 == codecSelferValueTypeArray1234 {
			yyl1509 := r.ReadArrayStart()
			if yyl1509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1510Slc
	var yyhl1510 bool = l >= 0
	for yyj1510 := 0; ; yyj1510++ {
		if yyhl1510 {
			if yyj1510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1510Slc = r.DecodeBytes(yys1510Slc, true, true)
		yys1510 := string(yys1510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1510 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1515 := &x.StartedAt
				yym1516 := z.DecBinary()
				_ = yym1516
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1515) {
				} else if yym1516 {
					z.DecBinaryUnmarshal(yyv1515)
				} else if !yym1516 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1515)
				} else {
					z.DecFallback(yyv1515, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1517 := &x.FinishedAt
				yym1518 := z.DecBinary()
				_ = yym1518
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1517) {
				} else if yym1518 {
					z.DecBinaryUnmarshal(yyv1517)
				} else if !yym1518 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1517)
				} else {
					z.DecFallback(yyv1517, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1510)
		} // end switch yys1510
	} // end for yyj1510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1525 := &x.StartedAt
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1525) {
		} else if yym1526 {
			z.DecBinaryUnmarshal(yyv1525)
		} else if !yym1526 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1525)
		} else {
			z.DecFallback(yyv1525, false)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1527 := &x.FinishedAt
		yym1528 := z.DecBinary()
		_ = yym1528
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1527) {
		} else if yym1528 {
			z.DecBinaryUnmarshal(yyv1527)
		} else if !yym1528 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1527)
		} else {
			z.DecFallback(yyv1527, false)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1530 := z.EncBinary()
		_ = yym1530
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1531 := !z.EncBinary()
			yy2arr1531 := z.EncBasicHandle().StructToArray
			var yyq1531 [3]bool
			_, _, _ = yysep1531, yyq1531, yy2arr1531
			const yyr1531 bool = false
			yyq1531[0] = x.Waiting != nil
			yyq1531[1] = x.Running != nil
			yyq1531[2] = x.Terminated != nil
			var yynn1531 int
			if yyr1531 || yy2arr1531 {
				r.EncodeArrayStart(3)
			} else {
				yynn1531 = 0
				for _, b := range yyq1531 {
					if b {
						yynn1531++
					}
				}
				r.EncodeMapStart(yynn1531)
				yynn1531 = 0
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1531[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1531[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1531[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1531[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1531[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1531[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1531 || yy2arr1531 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1535 := z.DecBinary()
	_ = yym1535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1536 := r.ContainerType()
		if yyct1536 == codecSelferValueTypeMap1234 {
			yyl1536 := r.ReadMapStart()
			if yyl1536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1536, d)
			}
		} else if yyct1536 == codecSelferValueTypeArray1234 {
			yyl1536 := r.ReadArrayStart()
			if yyl1536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1537Slc
	var yyhl1537 bool = l >= 0
	for yyj1537 := 0; ; yyj1537++ {
		if yyhl1537 {
			if yyj1537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1537Slc = r.DecodeBytes(yys1537Slc, true, true)
		yys1537 := string(yys1537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1537 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1537)
		} // end switch yys1537
	} // end for yyj1537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1541 int
	var yyb1541 bool
	var yyhl1541 bool = l >= 0
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1541++
		if yyhl1541 {
			yyb1541 = yyj1541 > l
		} else {
			yyb1541 = r.CheckBreak()
		}
		if yyb1541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1545 := z.EncBinary()
		_ = yym1545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1546 := !z.EncBinary()
			yy2arr1546 := z.EncBasicHandle().StructToArray
			var yyq1546 [8]bool
			_, _, _ = yysep1546, yyq1546, yy2arr1546
			const yyr1546 bool = false
			yyq1546[1] = true
			yyq1546[2] = true
			yyq1546[7] = x.ContainerID != ""
			var yynn1546 int
			if yyr1546 || yy2arr1546 {
				r.EncodeArrayStart(8)
			} else {
				yynn1546 = 5
				for _, b := range yyq1546 {
					if b {
						yynn1546++
					}
				}
				r.EncodeMapStart(yynn1546)
				yynn1546 = 0
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1548 := z.EncBinary()
				_ = yym1548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1549 := z.EncBinary()
				_ = yym1549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1546[1] {
					yy1551 := &x.State
					yy1551.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1552 := &x.State
					yy1552.CodecEncodeSelf(e)
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1546[2] {
					yy1554 := &x.LastTerminationState
					yy1554.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1555 := &x.LastTerminationState
					yy1555.CodecEncodeSelf(e)
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1557 := z.EncBinary()
				_ = yym1557
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1558 := z.EncBinary()
				_ = yym1558
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1560 := z.EncBinary()
				_ = yym1560
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1561 := z.EncBinary()
				_ = yym1561
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1563 := z.EncBinary()
				_ = yym1563
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1564 := z.EncBinary()
				_ = yym1564
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1566 := z.EncBinary()
				_ = yym1566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1567 := z.EncBinary()
				_ = yym1567
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1546[7] {
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1546[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1571 := z.DecBinary()
	_ = yym1571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1572 := r.ContainerType()
		if yyct1572 == codecSelferValueTypeMap1234 {
			yyl1572 := r.ReadMapStart()
			if yyl1572 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1572, d)
			}
		} else if yyct1572 == codecSelferValueTypeArray1234 {
			yyl1572 := r.ReadArrayStart()
			if yyl1572 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1572, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1573Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1573Slc
	var yyhl1573 bool = l >= 0
	for yyj1573 := 0; ; yyj1573++ {
		if yyhl1573 {
			if yyj1573 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1573Slc = r.DecodeBytes(yys1573Slc, true, true)
		yys1573 := string(yys1573Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1573 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1575 := &x.State
				yyv1575.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1576 := &x.LastTerminationState
				yyv1576.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1573)
		} // end switch yys1573
	} // end for yyj1573
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1582 int
	var yyb1582 bool
	var yyhl1582 bool = l >= 0
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1584 := &x.State
		yyv1584.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1585 := &x.LastTerminationState
		yyv1585.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1582++
		if yyhl1582 {
			yyb1582 = yyj1582 > l
		} else {
			yyb1582 = r.CheckBreak()
		}
		if yyb1582 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1582-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1591 := z.EncBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1592 := z.DecBinary()
	_ = yym1592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1593 := z.EncBinary()
	_ = yym1593
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1594 := z.DecBinary()
	_ = yym1594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1595 := z.EncBinary()
		_ = yym1595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1596 := !z.EncBinary()
			yy2arr1596 := z.EncBasicHandle().StructToArray
			var yyq1596 [6]bool
			_, _, _ = yysep1596, yyq1596, yy2arr1596
			const yyr1596 bool = false
			yyq1596[2] = true
			yyq1596[3] = true
			yyq1596[4] = x.Reason != ""
			yyq1596[5] = x.Message != ""
			var yynn1596 int
			if yyr1596 || yy2arr1596 {
				r.EncodeArrayStart(6)
			} else {
				yynn1596 = 2
				for _, b := range yyq1596 {
					if b {
						yynn1596++
					}
				}
				r.EncodeMapStart(yynn1596)
				yynn1596 = 0
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[2] {
					yy1600 := &x.LastProbeTime
					yym1601 := z.EncBinary()
					_ = yym1601
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1600) {
					} else if yym1601 {
						z.EncBinaryMarshal(yy1600)
					} else if !yym1601 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1600)
					} else {
						z.EncFallback(yy1600)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1602 := &x.LastProbeTime
					yym1603 := z.EncBinary()
					_ = yym1603
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1602) {
					} else if yym1603 {
						z.EncBinaryMarshal(yy1602)
					} else if !yym1603 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1602)
					} else {
						z.EncFallback(yy1602)
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[3] {
					yy1605 := &x.LastTransitionTime
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1605) {
					} else if yym1606 {
						z.EncBinaryMarshal(yy1605)
					} else if !yym1606 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1605)
					} else {
						z.EncFallback(yy1605)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1607 := &x.LastTransitionTime
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1607) {
					} else if yym1608 {
						z.EncBinaryMarshal(yy1607)
					} else if !yym1608 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1607)
					} else {
						z.EncFallback(yy1607)
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[4] {
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1596[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[5] {
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1596[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1615 := z.DecBinary()
	_ = yym1615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1616 := r.ContainerType()
		if yyct1616 == codecSelferValueTypeMap1234 {
			yyl1616 := r.ReadMapStart()
			if yyl1616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1616, d)
			}
		} else if yyct1616 == codecSelferValueTypeArray1234 {
			yyl1616 := r.ReadArrayStart()
			if yyl1616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1617Slc
	var yyhl1617 bool = l >= 0
	for yyj1617 := 0; ; yyj1617++ {
		if yyhl1617 {
			if yyj1617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1617Slc = r.DecodeBytes(yys1617Slc, true, true)
		yys1617 := string(yys1617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1617 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1620 := &x.LastProbeTime
				yym1621 := z.DecBinary()
				_ = yym1621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1620) {
				} else if yym1621 {
					z.DecBinaryUnmarshal(yyv1620)
				} else if !yym1621 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1620)
				} else {
					z.DecFallback(yyv1620, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1622 := &x.LastTransitionTime
				yym1623 := z.DecBinary()
				_ = yym1623
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1622) {
				} else if yym1623 {
					z.DecBinaryUnmarshal(yyv1622)
				} else if !yym1623 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1622)
				} else {
					z.DecFallback(yyv1622, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1617)
		} // end switch yys1617
	} // end for yyj1617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1626 int
	var yyb1626 bool
	var yyhl1626 bool = l >= 0
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1629 := &x.LastProbeTime
		yym1630 := z.DecBinary()
		_ = yym1630
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1629) {
		} else if yym1630 {
			z.DecBinaryUnmarshal(yyv1629)
		} else if !yym1630 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1629)
		} else {
			z.DecFallback(yyv1629, false)
		}
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1631 := &x.LastTransitionTime
		yym1632 := z.DecBinary()
		_ = yym1632
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1631) {
		} else if yym1632 {
			z.DecBinaryUnmarshal(yyv1631)
		} else if !yym1632 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1631)
		} else {
			z.DecFallback(yyv1631, false)
		}
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1626++
		if yyhl1626 {
			yyb1626 = yyj1626 > l
		} else {
			yyb1626 = r.CheckBreak()
		}
		if yyb1626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1635 := z.EncBinary()
	_ = yym1635
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1636 := z.DecBinary()
	_ = yym1636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1637 := z.EncBinary()
	_ = yym1637
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1638 := z.DecBinary()
	_ = yym1638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1639 := z.EncBinary()
		_ = yym1639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1640 := !z.EncBinary()
			yy2arr1640 := z.EncBasicHandle().StructToArray
			var yyq1640 [1]bool
			_, _, _ = yysep1640, yyq1640, yy2arr1640
			const yyr1640 bool = false
			var yynn1640 int
			if yyr1640 || yy2arr1640 {
				r.EncodeArrayStart(1)
			} else {
				yynn1640 = 1
				for _, b := range yyq1640 {
					if b {
						yynn1640++
					}
				}
				r.EncodeMapStart(yynn1640)
				yynn1640 = 0
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1642 := z.EncBinary()
					_ = yym1642
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1643 := z.EncBinary()
					_ = yym1643
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1644 := z.DecBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1645 := r.ContainerType()
		if yyct1645 == codecSelferValueTypeMap1234 {
			yyl1645 := r.ReadMapStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1645, d)
			}
		} else if yyct1645 == codecSelferValueTypeArray1234 {
			yyl1645 := r.ReadArrayStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1646Slc
	var yyhl1646 bool = l >= 0
	for yyj1646 := 0; ; yyj1646++ {
		if yyhl1646 {
			if yyj1646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1646Slc = r.DecodeBytes(yys1646Slc, true, true)
		yys1646 := string(yys1646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1646 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1647 := &x.NodeSelectorTerms
				yym1648 := z.DecBinary()
				_ = yym1648
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1647), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1646)
		} // end switch yys1646
	} // end for yyj1646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1649 int
	var yyb1649 bool
	var yyhl1649 bool = l >= 0
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1650 := &x.NodeSelectorTerms
		yym1651 := z.DecBinary()
		_ = yym1651
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1650), d)
		}
	}
	for {
		yyj1649++
		if yyhl1649 {
			yyb1649 = yyj1649 > l
		} else {
			yyb1649 = r.CheckBreak()
		}
		if yyb1649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [1]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			var yynn1653 int
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(1)
			} else {
				yynn1653 = 1
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
				yynn1653 = 0
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1657 := z.DecBinary()
	_ = yym1657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1658 := r.ContainerType()
		if yyct1658 == codecSelferValueTypeMap1234 {
			yyl1658 := r.ReadMapStart()
			if yyl1658 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1658, d)
			}
		} else if yyct1658 == codecSelferValueTypeArray1234 {
			yyl1658 := r.ReadArrayStart()
			if yyl1658 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1658, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1659Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1659Slc
	var yyhl1659 bool = l >= 0
	for yyj1659 := 0; ; yyj1659++ {
		if yyhl1659 {
			if yyj1659 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1659Slc = r.DecodeBytes(yys1659Slc, true, true)
		yys1659 := string(yys1659Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1659 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1660 := &x.MatchExpressions
				yym1661 := z.DecBinary()
				_ = yym1661
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1660), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1659)
		} // end switch yys1659
	} // end for yyj1659
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1662 int
	var yyb1662 bool
	var yyhl1662 bool = l >= 0
	yyj1662++
	if yyhl1662 {
		yyb1662 = yyj1662 > l
	} else {
		yyb1662 = r.CheckBreak()
	}
	if yyb1662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1663 := &x.MatchExpressions
		yym1664 := z.DecBinary()
		_ = yym1664
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1663), d)
		}
	}
	for {
		yyj1662++
		if yyhl1662 {
			yyb1662 = yyj1662 > l
		} else {
			yyb1662 = r.CheckBreak()
		}
		if yyb1662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyq1666 [3]bool
			_, _, _ = yysep1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[2] = len(x.Values) != 0
			var yynn1666 int
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(3)
			} else {
				yynn1666 = 2
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
				yynn1666 = 0
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1668 := z.EncBinary()
				_ = yym1668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1669 := z.EncBinary()
				_ = yym1669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1672 := z.EncBinary()
						_ = yym1672
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1673 := z.EncBinary()
						_ = yym1673
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1674 := z.DecBinary()
	_ = yym1674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1675 := r.ContainerType()
		if yyct1675 == codecSelferValueTypeMap1234 {
			yyl1675 := r.ReadMapStart()
			if yyl1675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1675, d)
			}
		} else if yyct1675 == codecSelferValueTypeArray1234 {
			yyl1675 := r.ReadArrayStart()
			if yyl1675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1676Slc
	var yyhl1676 bool = l >= 0
	for yyj1676 := 0; ; yyj1676++ {
		if yyhl1676 {
			if yyj1676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1676Slc = r.DecodeBytes(yys1676Slc, true, true)
		yys1676 := string(yys1676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1676 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1679 := &x.Values
				yym1680 := z.DecBinary()
				_ = yym1680
				if false {
				} else {
					z.F.DecSliceStringX(yyv1679, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1676)
		} // end switch yys1676
	} // end for yyj1676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1681 int
	var yyb1681 bool
	var yyhl1681 bool = l >= 0
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1681++
	if yyhl1681 {
		yyb1681 = yyj1681 > l
	} else {
		yyb1681 = r.CheckBreak()
	}
	if yyb1681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1684 := &x.Values
		yym1685 := z.DecBinary()
		_ = yym1685
		if false {
		} else {
			z.F.DecSliceStringX(yyv1684, false, d)
		}
	}
	for {
		yyj1681++
		if yyhl1681 {
			yyb1681 = yyj1681 > l
		} else {
			yyb1681 = r.CheckBreak()
		}
		if yyb1681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1686 := z.EncBinary()
	_ = yym1686
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1687 := z.DecBinary()
	_ = yym1687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1688 := z.EncBinary()
		_ = yym1688
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1689 := !z.EncBinary()
			yy2arr1689 := z.EncBasicHandle().StructToArray
			var yyq1689 [3]bool
			_, _, _ = yysep1689, yyq1689, yy2arr1689
			const yyr1689 bool = false
			yyq1689[0] = x.NodeAffinity != nil
			yyq1689[1] = x.PodAffinity != nil
			yyq1689[2] = x.PodAntiAffinity != nil
			var yynn1689 int
			if yyr1689 || yy2arr1689 {
				r.EncodeArrayStart(3)
			} else {
				yynn1689 = 0
				for _, b := range yyq1689 {
					if b {
						yynn1689++
					}
				}
				r.EncodeMapStart(yynn1689)
				yynn1689 = 0
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1689[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1689[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1689[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1689[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1689[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1689[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1693 := z.DecBinary()
	_ = yym1693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1694 := r.ContainerType()
		if yyct1694 == codecSelferValueTypeMap1234 {
			yyl1694 := r.ReadMapStart()
			if yyl1694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1694, d)
			}
		} else if yyct1694 == codecSelferValueTypeArray1234 {
			yyl1694 := r.ReadArrayStart()
			if yyl1694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1695Slc
	var yyhl1695 bool = l >= 0
	for yyj1695 := 0; ; yyj1695++ {
		if yyhl1695 {
			if yyj1695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1695Slc = r.DecodeBytes(yys1695Slc, true, true)
		yys1695 := string(yys1695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1695 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1695)
		} // end switch yys1695
	} // end for yyj1695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1699 int
	var yyb1699 bool
	var yyhl1699 bool = l >= 0
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1699++
	if yyhl1699 {
		yyb1699 = yyj1699 > l
	} else {
		yyb1699 = r.CheckBreak()
	}
	if yyb1699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1699++
		if yyhl1699 {
			yyb1699 = yyj1699 > l
		} else {
			yyb1699 = r.CheckBreak()
		}
		if yyb1699 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1699-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1703 := z.EncBinary()
		_ = yym1703
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1704 := !z.EncBinary()
			yy2arr1704 := z.EncBasicHandle().StructToArray
			var yyq1704 [2]bool
			_, _, _ = yysep1704, yyq1704, yy2arr1704
			const yyr1704 bool = false
			yyq1704[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1704[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1704 int
			if yyr1704 || yy2arr1704 {
				r.EncodeArrayStart(2)
			} else {
				yynn1704 = 0
				for _, b := range yyq1704 {
					if b {
						yynn1704++
					}
				}
				r.EncodeMapStart(yynn1704)
				yynn1704 = 0
			}
			if yyr1704 || yy2arr1704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1704[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1706 := z.EncBinary()
						_ = yym1706
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1704[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1707 := z.EncBinary()
						_ = yym1707
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1704 || yy2arr1704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1704[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1709 := z.EncBinary()
						_ = yym1709
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1704[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1710 := z.EncBinary()
						_ = yym1710
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1704 || yy2arr1704 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1711 := z.DecBinary()
	_ = yym1711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1712 := r.ContainerType()
		if yyct1712 == codecSelferValueTypeMap1234 {
			yyl1712 := r.ReadMapStart()
			if yyl1712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1712, d)
			}
		} else if yyct1712 == codecSelferValueTypeArray1234 {
			yyl1712 := r.ReadArrayStart()
			if yyl1712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1713Slc
	var yyhl1713 bool = l >= 0
	for yyj1713 := 0; ; yyj1713++ {
		if yyhl1713 {
			if yyj1713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1713Slc = r.DecodeBytes(yys1713Slc, true, true)
		yys1713 := string(yys1713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1713 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1714 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1715 := z.DecBinary()
				_ = yym1715
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1714), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1716 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1717 := z.DecBinary()
				_ = yym1717
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1716), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1713)
		} // end switch yys1713
	} // end for yyj1713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1718 int
	var yyb1718 bool
	var yyhl1718 bool = l >= 0
	yyj1718++
	if yyhl1718 {
		yyb1718 = yyj1718 > l
	} else {
		yyb1718 = r.CheckBreak()
	}
	if yyb1718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1719 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1720 := z.DecBinary()
		_ = yym1720
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1719), d)
		}
	}
	yyj1718++
	if yyhl1718 {
		yyb1718 = yyj1718 > l
	} else {
		yyb1718 = r.CheckBreak()
	}
	if yyb1718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1721 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1722 := z.DecBinary()
		_ = yym1722
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1721), d)
		}
	}
	for {
		yyj1718++
		if yyhl1718 {
			yyb1718 = yyj1718 > l
		} else {
			yyb1718 = r.CheckBreak()
		}
		if yyb1718 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1718-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1723 := z.EncBinary()
		_ = yym1723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1724 := !z.EncBinary()
			yy2arr1724 := z.EncBasicHandle().StructToArray
			var yyq1724 [2]bool
			_, _, _ = yysep1724, yyq1724, yy2arr1724
			const yyr1724 bool = false
			yyq1724[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1724[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1724 int
			if yyr1724 || yy2arr1724 {
				r.EncodeArrayStart(2)
			} else {
				yynn1724 = 0
				for _, b := range yyq1724 {
					if b {
						yynn1724++
					}
				}
				r.EncodeMapStart(yynn1724)
				yynn1724 = 0
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1726 := z.EncBinary()
						_ = yym1726
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1727 := z.EncBinary()
						_ = yym1727
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1729 := z.EncBinary()
						_ = yym1729
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1730 := z.EncBinary()
						_ = yym1730
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1731 := z.DecBinary()
	_ = yym1731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1732 := r.ContainerType()
		if yyct1732 == codecSelferValueTypeMap1234 {
			yyl1732 := r.ReadMapStart()
			if yyl1732 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1732, d)
			}
		} else if yyct1732 == codecSelferValueTypeArray1234 {
			yyl1732 := r.ReadArrayStart()
			if yyl1732 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1733Slc
	var yyhl1733 bool = l >= 0
	for yyj1733 := 0; ; yyj1733++ {
		if yyhl1733 {
			if yyj1733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1733Slc = r.DecodeBytes(yys1733Slc, true, true)
		yys1733 := string(yys1733Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1733 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1734 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1735 := z.DecBinary()
				_ = yym1735
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1734), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1736 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1737 := z.DecBinary()
				_ = yym1737
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1736), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1733)
		} // end switch yys1733
	} // end for yyj1733
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1738 int
	var yyb1738 bool
	var yyhl1738 bool = l >= 0
	yyj1738++
	if yyhl1738 {
		yyb1738 = yyj1738 > l
	} else {
		yyb1738 = r.CheckBreak()
	}
	if yyb1738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1739 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1740 := z.DecBinary()
		_ = yym1740
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1739), d)
		}
	}
	yyj1738++
	if yyhl1738 {
		yyb1738 = yyj1738 > l
	} else {
		yyb1738 = r.CheckBreak()
	}
	if yyb1738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1741 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1742 := z.DecBinary()
		_ = yym1742
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1741), d)
		}
	}
	for {
		yyj1738++
		if yyhl1738 {
			yyb1738 = yyj1738 > l
		} else {
			yyb1738 = r.CheckBreak()
		}
		if yyb1738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1743 := z.EncBinary()
		_ = yym1743
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1744 := !z.EncBinary()
			yy2arr1744 := z.EncBasicHandle().StructToArray
			var yyq1744 [2]bool
			_, _, _ = yysep1744, yyq1744, yy2arr1744
			const yyr1744 bool = false
			var yynn1744 int
			if yyr1744 || yy2arr1744 {
				r.EncodeArrayStart(2)
			} else {
				yynn1744 = 2
				for _, b := range yyq1744 {
					if b {
						yynn1744++
					}
				}
				r.EncodeMapStart(yynn1744)
				yynn1744 = 0
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1746 := z.EncBinary()
				_ = yym1746
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1747 := z.EncBinary()
				_ = yym1747
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1749 := &x.PodAffinityTerm
				yy1749.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1750 := &x.PodAffinityTerm
				yy1750.CodecEncodeSelf(e)
			}
			if yyr1744 || yy2arr1744 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1751 := z.DecBinary()
	_ = yym1751
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1752 := r.ContainerType()
		if yyct1752 == codecSelferValueTypeMap1234 {
			yyl1752 := r.ReadMapStart()
			if yyl1752 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1752, d)
			}
		} else if yyct1752 == codecSelferValueTypeArray1234 {
			yyl1752 := r.ReadArrayStart()
			if yyl1752 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1752, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1753Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1753Slc
	var yyhl1753 bool = l >= 0
	for yyj1753 := 0; ; yyj1753++ {
		if yyhl1753 {
			if yyj1753 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1753Slc = r.DecodeBytes(yys1753Slc, true, true)
		yys1753 := string(yys1753Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1753 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1755 := &x.PodAffinityTerm
				yyv1755.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1753)
		} // end switch yys1753
	} // end for yyj1753
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1756 int
	var yyb1756 bool
	var yyhl1756 bool = l >= 0
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1756++
	if yyhl1756 {
		yyb1756 = yyj1756 > l
	} else {
		yyb1756 = r.CheckBreak()
	}
	if yyb1756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1758 := &x.PodAffinityTerm
		yyv1758.CodecDecodeSelf(d)
	}
	for {
		yyj1756++
		if yyhl1756 {
			yyb1756 = yyj1756 > l
		} else {
			yyb1756 = r.CheckBreak()
		}
		if yyb1756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1759 := z.EncBinary()
		_ = yym1759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1760 := !z.EncBinary()
			yy2arr1760 := z.EncBasicHandle().StructToArray
			var yyq1760 [3]bool
			_, _, _ = yysep1760, yyq1760, yy2arr1760
			const yyr1760 bool = false
			yyq1760[0] = x.LabelSelector != nil
			yyq1760[2] = x.TopologyKey != ""
			var yynn1760 int
			if yyr1760 || yy2arr1760 {
				r.EncodeArrayStart(3)
			} else {
				yynn1760 = 1
				for _, b := range yyq1760 {
					if b {
						yynn1760++
					}
				}
				r.EncodeMapStart(yynn1760)
				yynn1760 = 0
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1762 := z.EncBinary()
						_ = yym1762
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1763 := z.EncBinary()
						_ = yym1763
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[2] {
					yym1768 := z.EncBinary()
					_ = yym1768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1760[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1770 := z.DecBinary()
	_ = yym1770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1771 := r.ContainerType()
		if yyct1771 == codecSelferValueTypeMap1234 {
			yyl1771 := r.ReadMapStart()
			if yyl1771 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1771, d)
			}
		} else if yyct1771 == codecSelferValueTypeArray1234 {
			yyl1771 := r.ReadArrayStart()
			if yyl1771 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1772Slc
	var yyhl1772 bool = l >= 0
	for yyj1772 := 0; ; yyj1772++ {
		if yyhl1772 {
			if yyj1772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1772Slc = r.DecodeBytes(yys1772Slc, true, true)
		yys1772 := string(yys1772Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1772 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1774 := z.DecBinary()
				_ = yym1774
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1775 := &x.Namespaces
				yym1776 := z.DecBinary()
				_ = yym1776
				if false {
				} else {
					z.F.DecSliceStringX(yyv1775, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1772)
		} // end switch yys1772
	} // end for yyj1772
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1778 int
	var yyb1778 bool
	var yyhl1778 bool = l >= 0
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1780 := z.DecBinary()
		_ = yym1780
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1781 := &x.Namespaces
		yym1782 := z.DecBinary()
		_ = yym1782
		if false {
		} else {
			z.F.DecSliceStringX(yyv1781, false, d)
		}
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1778++
		if yyhl1778 {
			yyb1778 = yyj1778 > l
		} else {
			yyb1778 = r.CheckBreak()
		}
		if yyb1778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1784 := z.EncBinary()
		_ = yym1784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1785 := !z.EncBinary()
			yy2arr1785 := z.EncBasicHandle().StructToArray
			var yyq1785 [2]bool
			_, _, _ = yysep1785, yyq1785, yy2arr1785
			const yyr1785 bool = false
			yyq1785[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1785[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1785 int
			if yyr1785 || yy2arr1785 {
				r.EncodeArrayStart(2)
			} else {
				yynn1785 = 0
				for _, b := range yyq1785 {
					if b {
						yynn1785++
					}
				}
				r.EncodeMapStart(yynn1785)
				yynn1785 = 0
			}
			if yyr1785 || yy2arr1785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1785[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1785[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1785[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1788 := z.EncBinary()
						_ = yym1788
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1789 := z.EncBinary()
						_ = yym1789
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1790 := z.DecBinary()
	_ = yym1790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1791 := r.ContainerType()
		if yyct1791 == codecSelferValueTypeMap1234 {
			yyl1791 := r.ReadMapStart()
			if yyl1791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1791, d)
			}
		} else if yyct1791 == codecSelferValueTypeArray1234 {
			yyl1791 := r.ReadArrayStart()
			if yyl1791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1792Slc
	var yyhl1792 bool = l >= 0
	for yyj1792 := 0; ; yyj1792++ {
		if yyhl1792 {
			if yyj1792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1792Slc = r.DecodeBytes(yys1792Slc, true, true)
		yys1792 := string(yys1792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1792 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1794 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1795 := z.DecBinary()
				_ = yym1795
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1794), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1792)
		} // end switch yys1792
	} // end for yyj1792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1796 int
	var yyb1796 bool
	var yyhl1796 bool = l >= 0
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1798 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1799 := z.DecBinary()
		_ = yym1799
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1798), d)
		}
	}
	for {
		yyj1796++
		if yyhl1796 {
			yyb1796 = yyj1796 > l
		} else {
			yyb1796 = r.CheckBreak()
		}
		if yyb1796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1800 := z.EncBinary()
		_ = yym1800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1801 := !z.EncBinary()
			yy2arr1801 := z.EncBasicHandle().StructToArray
			var yyq1801 [2]bool
			_, _, _ = yysep1801, yyq1801, yy2arr1801
			const yyr1801 bool = false
			var yynn1801 int
			if yyr1801 || yy2arr1801 {
				r.EncodeArrayStart(2)
			} else {
				yynn1801 = 2
				for _, b := range yyq1801 {
					if b {
						yynn1801++
					}
				}
				r.EncodeMapStart(yynn1801)
				yynn1801 = 0
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1803 := z.EncBinary()
				_ = yym1803
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1804 := z.EncBinary()
				_ = yym1804
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1806 := &x.Preference
				yy1806.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1807 := &x.Preference
				yy1807.CodecEncodeSelf(e)
			}
			if yyr1801 || yy2arr1801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1808 := z.DecBinary()
	_ = yym1808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1809 := r.ContainerType()
		if yyct1809 == codecSelferValueTypeMap1234 {
			yyl1809 := r.ReadMapStart()
			if yyl1809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1809, d)
			}
		} else if yyct1809 == codecSelferValueTypeArray1234 {
			yyl1809 := r.ReadArrayStart()
			if yyl1809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1810Slc
	var yyhl1810 bool = l >= 0
	for yyj1810 := 0; ; yyj1810++ {
		if yyhl1810 {
			if yyj1810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1810Slc = r.DecodeBytes(yys1810Slc, true, true)
		yys1810 := string(yys1810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1810 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1812 := &x.Preference
				yyv1812.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1810)
		} // end switch yys1810
	} // end for yyj1810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1813 int
	var yyb1813 bool
	var yyhl1813 bool = l >= 0
	yyj1813++
	if yyhl1813 {
		yyb1813 = yyj1813 > l
	} else {
		yyb1813 = r.CheckBreak()
	}
	if yyb1813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1813++
	if yyhl1813 {
		yyb1813 = yyj1813 > l
	} else {
		yyb1813 = r.CheckBreak()
	}
	if yyb1813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1815 := &x.Preference
		yyv1815.CodecDecodeSelf(d)
	}
	for {
		yyj1813++
		if yyhl1813 {
			yyb1813 = yyj1813 > l
		} else {
			yyb1813 = r.CheckBreak()
		}
		if yyb1813 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1813-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1816 := z.EncBinary()
		_ = yym1816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1817 := !z.EncBinary()
			yy2arr1817 := z.EncBasicHandle().StructToArray
			var yyq1817 [3]bool
			_, _, _ = yysep1817, yyq1817, yy2arr1817
			const yyr1817 bool = false
			yyq1817[1] = x.Value != ""
			var yynn1817 int
			if yyr1817 || yy2arr1817 {
				r.EncodeArrayStart(3)
			} else {
				yynn1817 = 2
				for _, b := range yyq1817 {
					if b {
						yynn1817++
					}
				}
				r.EncodeMapStart(yynn1817)
				yynn1817 = 0
			}
			if yyr1817 || yy2arr1817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1819 := z.EncBinary()
				_ = yym1819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1820 := z.EncBinary()
				_ = yym1820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1817 || yy2arr1817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1817[1] {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1817[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1823 := z.EncBinary()
					_ = yym1823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1817 || yy2arr1817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1817 || yy2arr1817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1825 := z.DecBinary()
	_ = yym1825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1826 := r.ContainerType()
		if yyct1826 == codecSelferValueTypeMap1234 {
			yyl1826 := r.ReadMapStart()
			if yyl1826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1826, d)
			}
		} else if yyct1826 == codecSelferValueTypeArray1234 {
			yyl1826 := r.ReadArrayStart()
			if yyl1826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1827Slc
	var yyhl1827 bool = l >= 0
	for yyj1827 := 0; ; yyj1827++ {
		if yyhl1827 {
			if yyj1827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1827Slc = r.DecodeBytes(yys1827Slc, true, true)
		yys1827 := string(yys1827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1827 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1827)
		} // end switch yys1827
	} // end for yyj1827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1831 int
	var yyb1831 bool
	var yyhl1831 bool = l >= 0
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1831++
		if yyhl1831 {
			yyb1831 = yyj1831 > l
		} else {
			yyb1831 = r.CheckBreak()
		}
		if yyb1831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1835 := z.EncBinary()
	_ = yym1835
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1836 := z.DecBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1837 := z.EncBinary()
		_ = yym1837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1838 := !z.EncBinary()
			yy2arr1838 := z.EncBasicHandle().StructToArray
			var yyq1838 [4]bool
			_, _, _ = yysep1838, yyq1838, yy2arr1838
			const yyr1838 bool = false
			yyq1838[0] = x.Key != ""
			yyq1838[1] = x.Operator != ""
			yyq1838[2] = x.Value != ""
			yyq1838[3] = x.Effect != ""
			var yynn1838 int
			if yyr1838 || yy2arr1838 {
				r.EncodeArrayStart(4)
			} else {
				yynn1838 = 0
				for _, b := range yyq1838 {
					if b {
						yynn1838++
					}
				}
				r.EncodeMapStart(yynn1838)
				yynn1838 = 0
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[0] {
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1841 := z.EncBinary()
					_ = yym1841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[2] {
					yym1844 := z.EncBinary()
					_ = yym1844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1847 := z.DecBinary()
	_ = yym1847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1848 := r.ContainerType()
		if yyct1848 == codecSelferValueTypeMap1234 {
			yyl1848 := r.ReadMapStart()
			if yyl1848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1848, d)
			}
		} else if yyct1848 == codecSelferValueTypeArray1234 {
			yyl1848 := r.ReadArrayStart()
			if yyl1848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1849Slc
	var yyhl1849 bool = l >= 0
	for yyj1849 := 0; ; yyj1849++ {
		if yyhl1849 {
			if yyj1849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1849Slc = r.DecodeBytes(yys1849Slc, true, true)
		yys1849 := string(yys1849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1849 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1849)
		} // end switch yys1849
	} // end for yyj1849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1854 int
	var yyb1854 bool
	var yyhl1854 bool = l >= 0
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1854++
		if yyhl1854 {
			yyb1854 = yyj1854 > l
		} else {
			yyb1854 = r.CheckBreak()
		}
		if yyb1854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1859 := z.EncBinary()
	_ = yym1859
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1860 := z.DecBinary()
	_ = yym1860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1861 := z.EncBinary()
		_ = yym1861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1862 := !z.EncBinary()
			yy2arr1862 := z.EncBasicHandle().StructToArray
			var yyq1862 [17]bool
			_, _, _ = yysep1862, yyq1862, yy2arr1862
			const yyr1862 bool = false
			yyq1862[0] = len(x.Volumes) != 0
			yyq1862[2] = x.RestartPolicy != ""
			yyq1862[3] = x.TerminationGracePeriodSeconds != nil
			yyq1862[4] = x.ActiveDeadlineSeconds != nil
			yyq1862[5] = x.DNSPolicy != ""
			yyq1862[6] = len(x.NodeSelector) != 0
			yyq1862[7] = x.ServiceAccountName != ""
			yyq1862[8] = x.DeprecatedServiceAccount != ""
			yyq1862[9] = x.NodeName != ""
			yyq1862[10] = x.HostNetwork != false
			yyq1862[11] = x.HostPID != false
			yyq1862[12] = x.HostIPC != false
			yyq1862[13] = x.SecurityContext != nil
			yyq1862[14] = len(x.ImagePullSecrets) != 0
			yyq1862[15] = x.Hostname != ""
			yyq1862[16] = x.Subdomain != ""
			var yynn1862 int
			if yyr1862 || yy2arr1862 {
				r.EncodeArrayStart(17)
			} else {
				yynn1862 = 1
				for _, b := range yyq1862 {
					if b {
						yynn1862++
					}
				}
				r.EncodeMapStart(yynn1862)
				yynn1862 = 0
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1871 := *x.TerminationGracePeriodSeconds
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							r.EncodeInt(int64(yy1871))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1873 := *x.TerminationGracePeriodSeconds
						yym1874 := z.EncBinary()
						_ = yym1874
						if false {
						} else {
							r.EncodeInt(int64(yy1873))
						}
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1876 := *x.ActiveDeadlineSeconds
						yym1877 := z.EncBinary()
						_ = yym1877
						if false {
						} else {
							r.EncodeInt(int64(yy1876))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1878 := *x.ActiveDeadlineSeconds
						yym1879 := z.EncBinary()
						_ = yym1879
						if false {
						} else {
							r.EncodeInt(int64(yy1878))
						}
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1882 := z.EncBinary()
						_ = yym1882
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1883 := z.EncBinary()
						_ = yym1883
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[7] {
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1886 := z.EncBinary()
					_ = yym1886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[8] {
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[9] {
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[10] {
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1862[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[11] {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1862[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[12] {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1862[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1904 := z.EncBinary()
						_ = yym1904
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1905 := z.EncBinary()
						_ = yym1905
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[15] {
					yym1907 := z.EncBinary()
					_ = yym1907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1862[16] {
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1862[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1862 || yy2arr1862 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1913 := r.ContainerType()
		if yyct1913 == codecSelferValueTypeMap1234 {
			yyl1913 := r.ReadMapStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1913, d)
			}
		} else if yyct1913 == codecSelferValueTypeArray1234 {
			yyl1913 := r.ReadArrayStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1914Slc
	var yyhl1914 bool = l >= 0
	for yyj1914 := 0; ; yyj1914++ {
		if yyhl1914 {
			if yyj1914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1914Slc = r.DecodeBytes(yys1914Slc, true, true)
		yys1914 := string(yys1914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1914 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1915 := &x.Volumes
				yym1916 := z.DecBinary()
				_ = yym1916
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1915), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1917 := &x.Containers
				yym1918 := z.DecBinary()
				_ = yym1918
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1917), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1921 := z.DecBinary()
				_ = yym1921
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1923 := z.DecBinary()
				_ = yym1923
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1925 := &x.NodeSelector
				yym1926 := z.DecBinary()
				_ = yym1926
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1925, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1934 := &x.ImagePullSecrets
				yym1935 := z.DecBinary()
				_ = yym1935
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1934), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1914)
		} // end switch yys1914
	} // end for yyj1914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1938 int
	var yyb1938 bool
	var yyhl1938 bool = l >= 0
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1939 := &x.Volumes
		yym1940 := z.DecBinary()
		_ = yym1940
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1939), d)
		}
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1941 := &x.Containers
		yym1942 := z.DecBinary()
		_ = yym1942
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1941), d)
		}
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1945 := z.DecBinary()
		_ = yym1945
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1947 := z.DecBinary()
		_ = yym1947
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1949 := &x.NodeSelector
		yym1950 := z.DecBinary()
		_ = yym1950
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1949, false, d)
		}
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1958 := &x.ImagePullSecrets
		yym1959 := z.DecBinary()
		_ = yym1959
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1958), d)
		}
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1938++
		if yyhl1938 {
			yyb1938 = yyj1938 > l
		} else {
			yyb1938 = r.CheckBreak()
		}
		if yyb1938 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1938-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1962 := z.EncBinary()
		_ = yym1962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1963 := !z.EncBinary()
			yy2arr1963 := z.EncBasicHandle().StructToArray
			var yyq1963 [5]bool
			_, _, _ = yysep1963, yyq1963, yy2arr1963
			const yyr1963 bool = false
			yyq1963[0] = x.SELinuxOptions != nil
			yyq1963[1] = x.RunAsUser != nil
			yyq1963[2] = x.RunAsNonRoot != nil
			yyq1963[3] = len(x.SupplementalGroups) != 0
			yyq1963[4] = x.FSGroup != nil
			var yynn1963 int
			if yyr1963 || yy2arr1963 {
				r.EncodeArrayStart(5)
			} else {
				yynn1963 = 0
				for _, b := range yyq1963 {
					if b {
						yynn1963++
					}
				}
				r.EncodeMapStart(yynn1963)
				yynn1963 = 0
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1966 := *x.RunAsUser
						yym1967 := z.EncBinary()
						_ = yym1967
						if false {
						} else {
							r.EncodeInt(int64(yy1966))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1968 := *x.RunAsUser
						yym1969 := z.EncBinary()
						_ = yym1969
						if false {
						} else {
							r.EncodeInt(int64(yy1968))
						}
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1971 := *x.RunAsNonRoot
						yym1972 := z.EncBinary()
						_ = yym1972
						if false {
						} else {
							r.EncodeBool(bool(yy1971))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1973 := *x.RunAsNonRoot
						yym1974 := z.EncBinary()
						_ = yym1974
						if false {
						} else {
							r.EncodeBool(bool(yy1973))
						}
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1976 := z.EncBinary()
						_ = yym1976
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1977 := z.EncBinary()
						_ = yym1977
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1979 := *x.FSGroup
						yym1980 := z.EncBinary()
						_ = yym1980
						if false {
						} else {
							r.EncodeInt(int64(yy1979))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1981 := *x.FSGroup
						yym1982 := z.EncBinary()
						_ = yym1982
						if false {
						} else {
							r.EncodeInt(int64(yy1981))
						}
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1983 := z.DecBinary()
	_ = yym1983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1984 := r.ContainerType()
		if yyct1984 == codecSelferValueTypeMap1234 {
			yyl1984 := r.ReadMapStart()
			if yyl1984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1984, d)
			}
		} else if yyct1984 == codecSelferValueTypeArray1234 {
			yyl1984 := r.ReadArrayStart()
			if yyl1984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1985Slc
	var yyhl1985 bool = l >= 0
	for yyj1985 := 0; ; yyj1985++ {
		if yyhl1985 {
			if yyj1985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1985Slc = r.DecodeBytes(yys1985Slc, true, true)
		yys1985 := string(yys1985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1985 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1988 := z.DecBinary()
				_ = yym1988
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1990 := z.DecBinary()
				_ = yym1990
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1991 := &x.SupplementalGroups
				yym1992 := z.DecBinary()
				_ = yym1992
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1991, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1994 := z.DecBinary()
				_ = yym1994
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1985)
		} // end switch yys1985
	} // end for yyj1985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1995 int
	var yyb1995 bool
	var yyhl1995 bool = l >= 0
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1998 := z.DecBinary()
		_ = yym1998
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2001 := &x.SupplementalGroups
		yym2002 := z.DecBinary()
		_ = yym2002
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2001, false, d)
		}
	}
	yyj1995++
	if yyhl1995 {
		yyb1995 = yyj1995 > l
	} else {
		yyb1995 = r.CheckBreak()
	}
	if yyb1995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2004 := z.DecBinary()
		_ = yym2004
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1995++
		if yyhl1995 {
			yyb1995 = yyj1995 > l
		} else {
			yyb1995 = r.CheckBreak()
		}
		if yyb1995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2005 := z.EncBinary()
		_ = yym2005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2006 := !z.EncBinary()
			yy2arr2006 := z.EncBasicHandle().StructToArray
			var yyq2006 [8]bool
			_, _, _ = yysep2006, yyq2006, yy2arr2006
			const yyr2006 bool = false
			yyq2006[0] = x.Phase != ""
			yyq2006[1] = len(x.Conditions) != 0
			yyq2006[2] = x.Message != ""
			yyq2006[3] = x.Reason != ""
			yyq2006[4] = x.HostIP != ""
			yyq2006[5] = x.PodIP != ""
			yyq2006[6] = x.StartTime != nil
			yyq2006[7] = len(x.ContainerStatuses) != 0
			var yynn2006 int
			if yyr2006 || yy2arr2006 {
				r.EncodeArrayStart(8)
			} else {
				yynn2006 = 0
				for _, b := range yyq2006 {
					if b {
						yynn2006++
					}
				}
				r.EncodeMapStart(yynn2006)
				yynn2006 = 0
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2009 := z.EncBinary()
						_ = yym2009
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2010 := z.EncBinary()
						_ = yym2010
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[2] {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[3] {
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[4] {
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[5] {
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2024 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2024 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2006[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2025 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2025 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2006[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2028 := z.EncBinary()
						_ = yym2028
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2029 := z.DecBinary()
	_ = yym2029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2030 := r.ContainerType()
		if yyct2030 == codecSelferValueTypeMap1234 {
			yyl2030 := r.ReadMapStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2030, d)
			}
		} else if yyct2030 == codecSelferValueTypeArray1234 {
			yyl2030 := r.ReadArrayStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2031Slc
	var yyhl2031 bool = l >= 0
	for yyj2031 := 0; ; yyj2031++ {
		if yyhl2031 {
			if yyj2031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2031Slc = r.DecodeBytes(yys2031Slc, true, true)
		yys2031 := string(yys2031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2031 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2033 := &x.Conditions
				yym2034 := z.DecBinary()
				_ = yym2034
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2033), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2040 := z.DecBinary()
				_ = yym2040
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2040 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2040 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2041 := &x.ContainerStatuses
				yym2042 := z.DecBinary()
				_ = yym2042
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2041), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2031)
		} // end switch yys2031
	} // end for yyj2031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2043 int
	var yyb2043 bool
	var yyhl2043 bool = l >= 0
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2045 := &x.Conditions
		yym2046 := z.DecBinary()
		_ = yym2046
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2045), d)
		}
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2052 := z.DecBinary()
		_ = yym2052
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2052 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2052 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2053 := &x.ContainerStatuses
		yym2054 := z.DecBinary()
		_ = yym2054
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2053), d)
		}
	}
	for {
		yyj2043++
		if yyhl2043 {
			yyb2043 = yyj2043 > l
		} else {
			yyb2043 = r.CheckBreak()
		}
		if yyb2043 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2043-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2055 := z.EncBinary()
		_ = yym2055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2056 := !z.EncBinary()
			yy2arr2056 := z.EncBasicHandle().StructToArray
			var yyq2056 [4]bool
			_, _, _ = yysep2056, yyq2056, yy2arr2056
			const yyr2056 bool = false
			yyq2056[0] = x.Kind != ""
			yyq2056[1] = x.APIVersion != ""
			yyq2056[2] = true
			yyq2056[3] = true
			var yynn2056 int
			if yyr2056 || yy2arr2056 {
				r.EncodeArrayStart(4)
			} else {
				yynn2056 = 0
				for _, b := range yyq2056 {
					if b {
						yynn2056++
					}
				}
				r.EncodeMapStart(yynn2056)
				yynn2056 = 0
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[0] {
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[1] {
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[2] {
					yy2064 := &x.ObjectMeta
					yy2064.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2065 := &x.ObjectMeta
					yy2065.CodecEncodeSelf(e)
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[3] {
					yy2067 := &x.Status
					yy2067.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2068 := &x.Status
					yy2068.CodecEncodeSelf(e)
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2069 := z.DecBinary()
	_ = yym2069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2070 := r.ContainerType()
		if yyct2070 == codecSelferValueTypeMap1234 {
			yyl2070 := r.ReadMapStart()
			if yyl2070 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2070, d)
			}
		} else if yyct2070 == codecSelferValueTypeArray1234 {
			yyl2070 := r.ReadArrayStart()
			if yyl2070 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2071Slc
	var yyhl2071 bool = l >= 0
	for yyj2071 := 0; ; yyj2071++ {
		if yyhl2071 {
			if yyj2071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2071Slc = r.DecodeBytes(yys2071Slc, true, true)
		yys2071 := string(yys2071Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2071 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2074 := &x.ObjectMeta
				yyv2074.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2075 := &x.Status
				yyv2075.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2071)
		} // end switch yys2071
	} // end for yyj2071
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2076 int
	var yyb2076 bool
	var yyhl2076 bool = l >= 0
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2079 := &x.ObjectMeta
		yyv2079.CodecDecodeSelf(d)
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2080 := &x.Status
		yyv2080.CodecDecodeSelf(d)
	}
	for {
		yyj2076++
		if yyhl2076 {
			yyb2076 = yyj2076 > l
		} else {
			yyb2076 = r.CheckBreak()
		}
		if yyb2076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2081 := z.EncBinary()
		_ = yym2081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2082 := !z.EncBinary()
			yy2arr2082 := z.EncBasicHandle().StructToArray
			var yyq2082 [5]bool
			_, _, _ = yysep2082, yyq2082, yy2arr2082
			const yyr2082 bool = false
			yyq2082[0] = x.Kind != ""
			yyq2082[1] = x.APIVersion != ""
			yyq2082[2] = true
			yyq2082[3] = true
			yyq2082[4] = true
			var yynn2082 int
			if yyr2082 || yy2arr2082 {
				r.EncodeArrayStart(5)
			} else {
				yynn2082 = 0
				for _, b := range yyq2082 {
					if b {
						yynn2082++
					}
				}
				r.EncodeMapStart(yynn2082)
				yynn2082 = 0
			}
			if yyr2082 || yy2arr2082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2082[0] {
					yym2084 := z.EncBinary()
					_ = yym2084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2085 := z.EncBinary()
					_ = yym2085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2082 || yy2arr2082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2082[1] {
					yym2087 := z.EncBinary()
					_ = yym2087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2082[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2088 := z.EncBinary()
					_ = yym2088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2082 || yy2arr2082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2082[2] {
					yy2090 := &x.ObjectMeta
					yy2090.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2082[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2091 := &x.ObjectMeta
					yy2091.CodecEncodeSelf(e)
				}
			}
			if yyr2082 || yy2arr2082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2082[3] {
					yy2093 := &x.Spec
					yy2093.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2082[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2094 := &x.Spec
					yy2094.CodecEncodeSelf(e)
				}
			}
			if yyr2082 || yy2arr2082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2082[4] {
					yy2096 := &x.Status
					yy2096.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2082[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2097 := &x.Status
					yy2097.CodecEncodeSelf(e)
				}
			}
			if yyr2082 || yy2arr2082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2098 := z.DecBinary()
	_ = yym2098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2099 := r.ContainerType()
		if yyct2099 == codecSelferValueTypeMap1234 {
			yyl2099 := r.ReadMapStart()
			if yyl2099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2099, d)
			}
		} else if yyct2099 == codecSelferValueTypeArray1234 {
			yyl2099 := r.ReadArrayStart()
			if yyl2099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2100Slc
	var yyhl2100 bool = l >= 0
	for yyj2100 := 0; ; yyj2100++ {
		if yyhl2100 {
			if yyj2100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2100Slc = r.DecodeBytes(yys2100Slc, true, true)
		yys2100 := string(yys2100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2103 := &x.ObjectMeta
				yyv2103.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2104 := &x.Spec
				yyv2104.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2105 := &x.Status
				yyv2105.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2100)
		} // end switch yys2100
	} // end for yyj2100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2106 int
	var yyb2106 bool
	var yyhl2106 bool = l >= 0
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2109 := &x.ObjectMeta
		yyv2109.CodecDecodeSelf(d)
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2110 := &x.Spec
		yyv2110.CodecDecodeSelf(d)
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2111 := &x.Status
		yyv2111.CodecDecodeSelf(d)
	}
	for {
		yyj2106++
		if yyhl2106 {
			yyb2106 = yyj2106 > l
		} else {
			yyb2106 = r.CheckBreak()
		}
		if yyb2106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2112 := z.EncBinary()
		_ = yym2112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2113 := !z.EncBinary()
			yy2arr2113 := z.EncBasicHandle().StructToArray
			var yyq2113 [4]bool
			_, _, _ = yysep2113, yyq2113, yy2arr2113
			const yyr2113 bool = false
			yyq2113[0] = x.Kind != ""
			yyq2113[1] = x.APIVersion != ""
			yyq2113[2] = true
			var yynn2113 int
			if yyr2113 || yy2arr2113 {
				r.EncodeArrayStart(4)
			} else {
				yynn2113 = 1
				for _, b := range yyq2113 {
					if b {
						yynn2113++
					}
				}
				r.EncodeMapStart(yynn2113)
				yynn2113 = 0
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[0] {
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[1] {
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[2] {
					yy2121 := &x.ListMeta
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2121) {
					} else {
						z.EncFallback(yy2121)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2123 := &x.ListMeta
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2123) {
					} else {
						z.EncFallback(yy2123)
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2127 := z.EncBinary()
					_ = yym2127
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2128 := z.DecBinary()
	_ = yym2128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2129 := r.ContainerType()
		if yyct2129 == codecSelferValueTypeMap1234 {
			yyl2129 := r.ReadMapStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2129, d)
			}
		} else if yyct2129 == codecSelferValueTypeArray1234 {
			yyl2129 := r.ReadArrayStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2130Slc
	var yyhl2130 bool = l >= 0
	for yyj2130 := 0; ; yyj2130++ {
		if yyhl2130 {
			if yyj2130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2130Slc = r.DecodeBytes(yys2130Slc, true, true)
		yys2130 := string(yys2130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2130 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2133 := &x.ListMeta
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2133) {
				} else {
					z.DecFallback(yyv2133, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2135 := &x.Items
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2130)
		} // end switch yys2130
	} // end for yyj2130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2140 := &x.ListMeta
		yym2141 := z.DecBinary()
		_ = yym2141
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2140) {
		} else {
			z.DecFallback(yyv2140, false)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2142 := &x.Items
		yym2143 := z.DecBinary()
		_ = yym2143
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2142), d)
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2144 := z.EncBinary()
		_ = yym2144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2145 := !z.EncBinary()
			yy2arr2145 := z.EncBasicHandle().StructToArray
			var yyq2145 [2]bool
			_, _, _ = yysep2145, yyq2145, yy2arr2145
			const yyr2145 bool = false
			yyq2145[0] = true
			yyq2145[1] = true
			var yynn2145 int
			if yyr2145 || yy2arr2145 {
				r.EncodeArrayStart(2)
			} else {
				yynn2145 = 0
				for _, b := range yyq2145 {
					if b {
						yynn2145++
					}
				}
				r.EncodeMapStart(yynn2145)
				yynn2145 = 0
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2145[0] {
					yy2147 := &x.ObjectMeta
					yy2147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2145[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2148 := &x.ObjectMeta
					yy2148.CodecEncodeSelf(e)
				}
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2145[1] {
					yy2150 := &x.Spec
					yy2150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2145[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2151 := &x.Spec
					yy2151.CodecEncodeSelf(e)
				}
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2152 := z.DecBinary()
	_ = yym2152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2153 := r.ContainerType()
		if yyct2153 == codecSelferValueTypeMap1234 {
			yyl2153 := r.ReadMapStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2153, d)
			}
		} else if yyct2153 == codecSelferValueTypeArray1234 {
			yyl2153 := r.ReadArrayStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2154Slc
	var yyhl2154 bool = l >= 0
	for yyj2154 := 0; ; yyj2154++ {
		if yyhl2154 {
			if yyj2154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2154Slc = r.DecodeBytes(yys2154Slc, true, true)
		yys2154 := string(yys2154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2154 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2155 := &x.ObjectMeta
				yyv2155.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2156 := &x.Spec
				yyv2156.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2154)
		} // end switch yys2154
	} // end for yyj2154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2157 int
	var yyb2157 bool
	var yyhl2157 bool = l >= 0
	yyj2157++
	if yyhl2157 {
		yyb2157 = yyj2157 > l
	} else {
		yyb2157 = r.CheckBreak()
	}
	if yyb2157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2158 := &x.ObjectMeta
		yyv2158.CodecDecodeSelf(d)
	}
	yyj2157++
	if yyhl2157 {
		yyb2157 = yyj2157 > l
	} else {
		yyb2157 = r.CheckBreak()
	}
	if yyb2157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2159 := &x.Spec
		yyv2159.CodecDecodeSelf(d)
	}
	for {
		yyj2157++
		if yyhl2157 {
			yyb2157 = yyj2157 > l
		} else {
			yyb2157 = r.CheckBreak()
		}
		if yyb2157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2160 := z.EncBinary()
		_ = yym2160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2161 := !z.EncBinary()
			yy2arr2161 := z.EncBasicHandle().StructToArray
			var yyq2161 [4]bool
			_, _, _ = yysep2161, yyq2161, yy2arr2161
			const yyr2161 bool = false
			yyq2161[0] = x.Kind != ""
			yyq2161[1] = x.APIVersion != ""
			yyq2161[2] = true
			yyq2161[3] = true
			var yynn2161 int
			if yyr2161 || yy2arr2161 {
				r.EncodeArrayStart(4)
			} else {
				yynn2161 = 0
				for _, b := range yyq2161 {
					if b {
						yynn2161++
					}
				}
				r.EncodeMapStart(yynn2161)
				yynn2161 = 0
			}
			if yyr2161 || yy2arr2161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2161[0] {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2161[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2161 || yy2arr2161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2161[1] {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2161[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2161 || yy2arr2161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2161[2] {
					yy2169 := &x.ObjectMeta
					yy2169.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2161[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2170 := &x.ObjectMeta
					yy2170.CodecEncodeSelf(e)
				}
			}
			if yyr2161 || yy2arr2161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2161[3] {
					yy2172 := &x.Template
					yy2172.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2161[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2173 := &x.Template
					yy2173.CodecEncodeSelf(e)
				}
			}
			if yyr2161 || yy2arr2161 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2174 := z.DecBinary()
	_ = yym2174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2175 := r.ContainerType()
		if yyct2175 == codecSelferValueTypeMap1234 {
			yyl2175 := r.ReadMapStart()
			if yyl2175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2175, d)
			}
		} else if yyct2175 == codecSelferValueTypeArray1234 {
			yyl2175 := r.ReadArrayStart()
			if yyl2175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2176Slc
	var yyhl2176 bool = l >= 0
	for yyj2176 := 0; ; yyj2176++ {
		if yyhl2176 {
			if yyj2176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2176Slc = r.DecodeBytes(yys2176Slc, true, true)
		yys2176 := string(yys2176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2176 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2179 := &x.ObjectMeta
				yyv2179.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2180 := &x.Template
				yyv2180.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2176)
		} // end switch yys2176
	} // end for yyj2176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2181 int
	var yyb2181 bool
	var yyhl2181 bool = l >= 0
	yyj2181++
	if yyhl2181 {
		yyb2181 = yyj2181 > l
	} else {
		yyb2181 = r.CheckBreak()
	}
	if yyb2181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2181++
	if yyhl2181 {
		yyb2181 = yyj2181 > l
	} else {
		yyb2181 = r.CheckBreak()
	}
	if yyb2181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2181++
	if yyhl2181 {
		yyb2181 = yyj2181 > l
	} else {
		yyb2181 = r.CheckBreak()
	}
	if yyb2181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2184 := &x.ObjectMeta
		yyv2184.CodecDecodeSelf(d)
	}
	yyj2181++
	if yyhl2181 {
		yyb2181 = yyj2181 > l
	} else {
		yyb2181 = r.CheckBreak()
	}
	if yyb2181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2185 := &x.Template
		yyv2185.CodecDecodeSelf(d)
	}
	for {
		yyj2181++
		if yyhl2181 {
			yyb2181 = yyj2181 > l
		} else {
			yyb2181 = r.CheckBreak()
		}
		if yyb2181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2186 := z.EncBinary()
		_ = yym2186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2187 := !z.EncBinary()
			yy2arr2187 := z.EncBasicHandle().StructToArray
			var yyq2187 [4]bool
			_, _, _ = yysep2187, yyq2187, yy2arr2187
			const yyr2187 bool = false
			yyq2187[0] = x.Kind != ""
			yyq2187[1] = x.APIVersion != ""
			yyq2187[2] = true
			var yynn2187 int
			if yyr2187 || yy2arr2187 {
				r.EncodeArrayStart(4)
			} else {
				yynn2187 = 1
				for _, b := range yyq2187 {
					if b {
						yynn2187++
					}
				}
				r.EncodeMapStart(yynn2187)
				yynn2187 = 0
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2187[0] {
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2187[1] {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2187[2] {
					yy2195 := &x.ListMeta
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2195) {
					} else {
						z.EncFallback(yy2195)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2197 := &x.ListMeta
					yym2198 := z.EncBinary()
					_ = yym2198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2197) {
					} else {
						z.EncFallback(yy2197)
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2202 := z.DecBinary()
	_ = yym2202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2203 := r.ContainerType()
		if yyct2203 == codecSelferValueTypeMap1234 {
			yyl2203 := r.ReadMapStart()
			if yyl2203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2203, d)
			}
		} else if yyct2203 == codecSelferValueTypeArray1234 {
			yyl2203 := r.ReadArrayStart()
			if yyl2203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2204Slc
	var yyhl2204 bool = l >= 0
	for yyj2204 := 0; ; yyj2204++ {
		if yyhl2204 {
			if yyj2204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2204Slc = r.DecodeBytes(yys2204Slc, true, true)
		yys2204 := string(yys2204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2207 := &x.ListMeta
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2207) {
				} else {
					z.DecFallback(yyv2207, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2209 := &x.Items
				yym2210 := z.DecBinary()
				_ = yym2210
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2209), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2204)
		} // end switch yys2204
	} // end for yyj2204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2211 int
	var yyb2211 bool
	var yyhl2211 bool = l >= 0
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2214 := &x.ListMeta
		yym2215 := z.DecBinary()
		_ = yym2215
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2214) {
		} else {
			z.DecFallback(yyv2214, false)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2216 := &x.Items
		yym2217 := z.DecBinary()
		_ = yym2217
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2216), d)
		}
	}
	for {
		yyj2211++
		if yyhl2211 {
			yyb2211 = yyj2211 > l
		} else {
			yyb2211 = r.CheckBreak()
		}
		if yyb2211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2218 := z.EncBinary()
		_ = yym2218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2219 := !z.EncBinary()
			yy2arr2219 := z.EncBasicHandle().StructToArray
			var yyq2219 [3]bool
			_, _, _ = yysep2219, yyq2219, yy2arr2219
			const yyr2219 bool = false
			yyq2219[0] = x.Replicas != nil
			yyq2219[1] = len(x.Selector) != 0
			yyq2219[2] = x.Template != nil
			var yynn2219 int
			if yyr2219 || yy2arr2219 {
				r.EncodeArrayStart(3)
			} else {
				yynn2219 = 0
				for _, b := range yyq2219 {
					if b {
						yynn2219++
					}
				}
				r.EncodeMapStart(yynn2219)
				yynn2219 = 0
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2219[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2221 := *x.Replicas
						yym2222 := z.EncBinary()
						_ = yym2222
						if false {
						} else {
							r.EncodeInt(int64(yy2221))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2223 := *x.Replicas
						yym2224 := z.EncBinary()
						_ = yym2224
						if false {
						} else {
							r.EncodeInt(int64(yy2223))
						}
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2219[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2226 := z.EncBinary()
						_ = yym2226
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2219[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2227 := z.EncBinary()
						_ = yym2227
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2219[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2219[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2229 := z.DecBinary()
	_ = yym2229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2230 := r.ContainerType()
		if yyct2230 == codecSelferValueTypeMap1234 {
			yyl2230 := r.ReadMapStart()
			if yyl2230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2230, d)
			}
		} else if yyct2230 == codecSelferValueTypeArray1234 {
			yyl2230 := r.ReadArrayStart()
			if yyl2230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2231Slc
	var yyhl2231 bool = l >= 0
	for yyj2231 := 0; ; yyj2231++ {
		if yyhl2231 {
			if yyj2231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2231Slc = r.DecodeBytes(yys2231Slc, true, true)
		yys2231 := string(yys2231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2231 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2233 := z.DecBinary()
				_ = yym2233
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2234 := &x.Selector
				yym2235 := z.DecBinary()
				_ = yym2235
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2234, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2231)
		} // end switch yys2231
	} // end for yyj2231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2237 int
	var yyb2237 bool
	var yyhl2237 bool = l >= 0
	yyj2237++
	if yyhl2237 {
		yyb2237 = yyj2237 > l
	} else {
		yyb2237 = r.CheckBreak()
	}
	if yyb2237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2239 := z.DecBinary()
		_ = yym2239
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2237++
	if yyhl2237 {
		yyb2237 = yyj2237 > l
	} else {
		yyb2237 = r.CheckBreak()
	}
	if yyb2237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2240 := &x.Selector
		yym2241 := z.DecBinary()
		_ = yym2241
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2240, false, d)
		}
	}
	yyj2237++
	if yyhl2237 {
		yyb2237 = yyj2237 > l
	} else {
		yyb2237 = r.CheckBreak()
	}
	if yyb2237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2237++
		if yyhl2237 {
			yyb2237 = yyj2237 > l
		} else {
			yyb2237 = r.CheckBreak()
		}
		if yyb2237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2243 := z.EncBinary()
		_ = yym2243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2244 := !z.EncBinary()
			yy2arr2244 := z.EncBasicHandle().StructToArray
			var yyq2244 [3]bool
			_, _, _ = yysep2244, yyq2244, yy2arr2244
			const yyr2244 bool = false
			yyq2244[1] = x.FullyLabeledReplicas != 0
			yyq2244[2] = x.ObservedGeneration != 0
			var yynn2244 int
			if yyr2244 || yy2arr2244 {
				r.EncodeArrayStart(3)
			} else {
				yynn2244 = 1
				for _, b := range yyq2244 {
					if b {
						yynn2244++
					}
				}
				r.EncodeMapStart(yynn2244)
				yynn2244 = 0
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2246 := z.EncBinary()
				_ = yym2246
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2244[1] {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2244[2] {
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2254 := z.DecBinary()
	_ = yym2254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2255 := r.ContainerType()
		if yyct2255 == codecSelferValueTypeMap1234 {
			yyl2255 := r.ReadMapStart()
			if yyl2255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2255, d)
			}
		} else if yyct2255 == codecSelferValueTypeArray1234 {
			yyl2255 := r.ReadArrayStart()
			if yyl2255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2256Slc
	var yyhl2256 bool = l >= 0
	for yyj2256 := 0; ; yyj2256++ {
		if yyhl2256 {
			if yyj2256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2256Slc = r.DecodeBytes(yys2256Slc, true, true)
		yys2256 := string(yys2256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2256 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2256)
		} // end switch yys2256
	} // end for yyj2256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2260 int
	var yyb2260 bool
	var yyhl2260 bool = l >= 0
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2260++
		if yyhl2260 {
			yyb2260 = yyj2260 > l
		} else {
			yyb2260 = r.CheckBreak()
		}
		if yyb2260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2264 := z.EncBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2265 := !z.EncBinary()
			yy2arr2265 := z.EncBasicHandle().StructToArray
			var yyq2265 [5]bool
			_, _, _ = yysep2265, yyq2265, yy2arr2265
			const yyr2265 bool = false
			yyq2265[0] = x.Kind != ""
			yyq2265[1] = x.APIVersion != ""
			yyq2265[2] = true
			yyq2265[3] = true
			yyq2265[4] = true
			var yynn2265 int
			if yyr2265 || yy2arr2265 {
				r.EncodeArrayStart(5)
			} else {
				yynn2265 = 0
				for _, b := range yyq2265 {
					if b {
						yynn2265++
					}
				}
				r.EncodeMapStart(yynn2265)
				yynn2265 = 0
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[0] {
					yym2267 := z.EncBinary()
					_ = yym2267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2265[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2268 := z.EncBinary()
					_ = yym2268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[1] {
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2265[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2271 := z.EncBinary()
					_ = yym2271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[2] {
					yy2273 := &x.ObjectMeta
					yy2273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2274 := &x.ObjectMeta
					yy2274.CodecEncodeSelf(e)
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[3] {
					yy2276 := &x.Spec
					yy2276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2277 := &x.Spec
					yy2277.CodecEncodeSelf(e)
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[4] {
					yy2279 := &x.Status
					yy2279.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2280 := &x.Status
					yy2280.CodecEncodeSelf(e)
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2281 := z.DecBinary()
	_ = yym2281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2282 := r.ContainerType()
		if yyct2282 == codecSelferValueTypeMap1234 {
			yyl2282 := r.ReadMapStart()
			if yyl2282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2282, d)
			}
		} else if yyct2282 == codecSelferValueTypeArray1234 {
			yyl2282 := r.ReadArrayStart()
			if yyl2282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2283Slc
	var yyhl2283 bool = l >= 0
	for yyj2283 := 0; ; yyj2283++ {
		if yyhl2283 {
			if yyj2283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2283Slc = r.DecodeBytes(yys2283Slc, true, true)
		yys2283 := string(yys2283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2283 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2286 := &x.ObjectMeta
				yyv2286.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2287 := &x.Spec
				yyv2287.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2288 := &x.Status
				yyv2288.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2283)
		} // end switch yys2283
	} // end for yyj2283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2289 int
	var yyb2289 bool
	var yyhl2289 bool = l >= 0
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2292 := &x.ObjectMeta
		yyv2292.CodecDecodeSelf(d)
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2293 := &x.Spec
		yyv2293.CodecDecodeSelf(d)
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2294 := &x.Status
		yyv2294.CodecDecodeSelf(d)
	}
	for {
		yyj2289++
		if yyhl2289 {
			yyb2289 = yyj2289 > l
		} else {
			yyb2289 = r.CheckBreak()
		}
		if yyb2289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2295 := z.EncBinary()
		_ = yym2295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2296 := !z.EncBinary()
			yy2arr2296 := z.EncBasicHandle().StructToArray
			var yyq2296 [4]bool
			_, _, _ = yysep2296, yyq2296, yy2arr2296
			const yyr2296 bool = false
			yyq2296[0] = x.Kind != ""
			yyq2296[1] = x.APIVersion != ""
			yyq2296[2] = true
			var yynn2296 int
			if yyr2296 || yy2arr2296 {
				r.EncodeArrayStart(4)
			} else {
				yynn2296 = 1
				for _, b := range yyq2296 {
					if b {
						yynn2296++
					}
				}
				r.EncodeMapStart(yynn2296)
				yynn2296 = 0
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[0] {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[1] {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[2] {
					yy2304 := &x.ListMeta
					yym2305 := z.EncBinary()
					_ = yym2305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2304) {
					} else {
						z.EncFallback(yy2304)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2306 := &x.ListMeta
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2306) {
					} else {
						z.EncFallback(yy2306)
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2311 := z.DecBinary()
	_ = yym2311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2312 := r.ContainerType()
		if yyct2312 == codecSelferValueTypeMap1234 {
			yyl2312 := r.ReadMapStart()
			if yyl2312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2312, d)
			}
		} else if yyct2312 == codecSelferValueTypeArray1234 {
			yyl2312 := r.ReadArrayStart()
			if yyl2312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2313Slc
	var yyhl2313 bool = l >= 0
	for yyj2313 := 0; ; yyj2313++ {
		if yyhl2313 {
			if yyj2313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2313Slc = r.DecodeBytes(yys2313Slc, true, true)
		yys2313 := string(yys2313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2313 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2316 := &x.ListMeta
				yym2317 := z.DecBinary()
				_ = yym2317
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2316) {
				} else {
					z.DecFallback(yyv2316, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2318 := &x.Items
				yym2319 := z.DecBinary()
				_ = yym2319
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2318), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2313)
		} // end switch yys2313
	} // end for yyj2313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2320 int
	var yyb2320 bool
	var yyhl2320 bool = l >= 0
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2323 := &x.ListMeta
		yym2324 := z.DecBinary()
		_ = yym2324
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2323) {
		} else {
			z.DecFallback(yyv2323, false)
		}
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2325 := &x.Items
		yym2326 := z.DecBinary()
		_ = yym2326
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2325), d)
		}
	}
	for {
		yyj2320++
		if yyhl2320 {
			yyb2320 = yyj2320 > l
		} else {
			yyb2320 = r.CheckBreak()
		}
		if yyb2320 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2320-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2327 := z.EncBinary()
	_ = yym2327
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2328 := z.DecBinary()
	_ = yym2328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2329 := z.EncBinary()
	_ = yym2329
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2330 := z.DecBinary()
	_ = yym2330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2331 := z.EncBinary()
		_ = yym2331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2332 := !z.EncBinary()
			yy2arr2332 := z.EncBasicHandle().StructToArray
			var yyq2332 [1]bool
			_, _, _ = yysep2332, yyq2332, yy2arr2332
			const yyr2332 bool = false
			yyq2332[0] = true
			var yynn2332 int
			if yyr2332 || yy2arr2332 {
				r.EncodeArrayStart(1)
			} else {
				yynn2332 = 0
				for _, b := range yyq2332 {
					if b {
						yynn2332++
					}
				}
				r.EncodeMapStart(yynn2332)
				yynn2332 = 0
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2332[0] {
					yy2334 := &x.LoadBalancer
					yy2334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2332[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2335 := &x.LoadBalancer
					yy2335.CodecEncodeSelf(e)
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2336 := z.DecBinary()
	_ = yym2336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2337 := r.ContainerType()
		if yyct2337 == codecSelferValueTypeMap1234 {
			yyl2337 := r.ReadMapStart()
			if yyl2337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2337, d)
			}
		} else if yyct2337 == codecSelferValueTypeArray1234 {
			yyl2337 := r.ReadArrayStart()
			if yyl2337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2338Slc
	var yyhl2338 bool = l >= 0
	for yyj2338 := 0; ; yyj2338++ {
		if yyhl2338 {
			if yyj2338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2338Slc = r.DecodeBytes(yys2338Slc, true, true)
		yys2338 := string(yys2338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2338 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2339 := &x.LoadBalancer
				yyv2339.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2338)
		} // end switch yys2338
	} // end for yyj2338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2340 int
	var yyb2340 bool
	var yyhl2340 bool = l >= 0
	yyj2340++
	if yyhl2340 {
		yyb2340 = yyj2340 > l
	} else {
		yyb2340 = r.CheckBreak()
	}
	if yyb2340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2341 := &x.LoadBalancer
		yyv2341.CodecDecodeSelf(d)
	}
	for {
		yyj2340++
		if yyhl2340 {
			yyb2340 = yyj2340 > l
		} else {
			yyb2340 = r.CheckBreak()
		}
		if yyb2340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2342 := z.EncBinary()
		_ = yym2342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2343 := !z.EncBinary()
			yy2arr2343 := z.EncBasicHandle().StructToArray
			var yyq2343 [1]bool
			_, _, _ = yysep2343, yyq2343, yy2arr2343
			const yyr2343 bool = false
			yyq2343[0] = len(x.Ingress) != 0
			var yynn2343 int
			if yyr2343 || yy2arr2343 {
				r.EncodeArrayStart(1)
			} else {
				yynn2343 = 0
				for _, b := range yyq2343 {
					if b {
						yynn2343++
					}
				}
				r.EncodeMapStart(yynn2343)
				yynn2343 = 0
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2343[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2345 := z.EncBinary()
						_ = yym2345
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2346 := z.EncBinary()
						_ = yym2346
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2347 := z.DecBinary()
	_ = yym2347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2348 := r.ContainerType()
		if yyct2348 == codecSelferValueTypeMap1234 {
			yyl2348 := r.ReadMapStart()
			if yyl2348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2348, d)
			}
		} else if yyct2348 == codecSelferValueTypeArray1234 {
			yyl2348 := r.ReadArrayStart()
			if yyl2348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2349Slc
	var yyhl2349 bool = l >= 0
	for yyj2349 := 0; ; yyj2349++ {
		if yyhl2349 {
			if yyj2349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2349Slc = r.DecodeBytes(yys2349Slc, true, true)
		yys2349 := string(yys2349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2349 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2350 := &x.Ingress
				yym2351 := z.DecBinary()
				_ = yym2351
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2350), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2349)
		} // end switch yys2349
	} // end for yyj2349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2352 int
	var yyb2352 bool
	var yyhl2352 bool = l >= 0
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2353 := &x.Ingress
		yym2354 := z.DecBinary()
		_ = yym2354
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2353), d)
		}
	}
	for {
		yyj2352++
		if yyhl2352 {
			yyb2352 = yyj2352 > l
		} else {
			yyb2352 = r.CheckBreak()
		}
		if yyb2352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2355 := z.EncBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2356 := !z.EncBinary()
			yy2arr2356 := z.EncBasicHandle().StructToArray
			var yyq2356 [2]bool
			_, _, _ = yysep2356, yyq2356, yy2arr2356
			const yyr2356 bool = false
			yyq2356[0] = x.IP != ""
			yyq2356[1] = x.Hostname != ""
			var yynn2356 int
			if yyr2356 || yy2arr2356 {
				r.EncodeArrayStart(2)
			} else {
				yynn2356 = 0
				for _, b := range yyq2356 {
					if b {
						yynn2356++
					}
				}
				r.EncodeMapStart(yynn2356)
				yynn2356 = 0
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[0] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[1] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2356[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2363 := z.DecBinary()
	_ = yym2363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2364 := r.ContainerType()
		if yyct2364 == codecSelferValueTypeMap1234 {
			yyl2364 := r.ReadMapStart()
			if yyl2364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2364, d)
			}
		} else if yyct2364 == codecSelferValueTypeArray1234 {
			yyl2364 := r.ReadArrayStart()
			if yyl2364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2365Slc
	var yyhl2365 bool = l >= 0
	for yyj2365 := 0; ; yyj2365++ {
		if yyhl2365 {
			if yyj2365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2365Slc = r.DecodeBytes(yys2365Slc, true, true)
		yys2365 := string(yys2365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2365 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2365)
		} // end switch yys2365
	} // end for yyj2365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2368 int
	var yyb2368 bool
	var yyhl2368 bool = l >= 0
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2368++
		if yyhl2368 {
			yyb2368 = yyj2368 > l
		} else {
			yyb2368 = r.CheckBreak()
		}
		if yyb2368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2371 := z.EncBinary()
		_ = yym2371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2372 := !z.EncBinary()
			yy2arr2372 := z.EncBasicHandle().StructToArray
			var yyq2372 [9]bool
			_, _, _ = yysep2372, yyq2372, yy2arr2372
			const yyr2372 bool = false
			yyq2372[1] = len(x.Selector) != 0
			yyq2372[2] = x.ClusterIP != ""
			yyq2372[3] = x.Type != ""
			yyq2372[4] = len(x.ExternalIPs) != 0
			yyq2372[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2372[6] = x.SessionAffinity != ""
			yyq2372[7] = x.LoadBalancerIP != ""
			yyq2372[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2372 int
			if yyr2372 || yy2arr2372 {
				r.EncodeArrayStart(9)
			} else {
				yynn2372 = 1
				for _, b := range yyq2372 {
					if b {
						yynn2372++
					}
				}
				r.EncodeMapStart(yynn2372)
				yynn2372 = 0
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2374 := z.EncBinary()
					_ = yym2374
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2377 := z.EncBinary()
						_ = yym2377
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2372[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2378 := z.EncBinary()
						_ = yym2378
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[2] {
					yym2380 := z.EncBinary()
					_ = yym2380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2372[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2381 := z.EncBinary()
					_ = yym2381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2372[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2384 := z.EncBinary()
						_ = yym2384
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2372[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2385 := z.EncBinary()
						_ = yym2385
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2387 := z.EncBinary()
						_ = yym2387
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2372[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2388 := z.EncBinary()
						_ = yym2388
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2372[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[7] {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2372[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2372[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2394 := z.EncBinary()
						_ = yym2394
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2372[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2395 := z.EncBinary()
						_ = yym2395
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2372 || yy2arr2372 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2396 := z.DecBinary()
	_ = yym2396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2397 := r.ContainerType()
		if yyct2397 == codecSelferValueTypeMap1234 {
			yyl2397 := r.ReadMapStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2397, d)
			}
		} else if yyct2397 == codecSelferValueTypeArray1234 {
			yyl2397 := r.ReadArrayStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2398Slc
	var yyhl2398 bool = l >= 0
	for yyj2398 := 0; ; yyj2398++ {
		if yyhl2398 {
			if yyj2398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2398Slc = r.DecodeBytes(yys2398Slc, true, true)
		yys2398 := string(yys2398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2398 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2399 := &x.Ports
				yym2400 := z.DecBinary()
				_ = yym2400
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2399), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2401 := &x.Selector
				yym2402 := z.DecBinary()
				_ = yym2402
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2401, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2405 := &x.ExternalIPs
				yym2406 := z.DecBinary()
				_ = yym2406
				if false {
				} else {
					z.F.DecSliceStringX(yyv2405, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2407 := &x.DeprecatedPublicIPs
				yym2408 := z.DecBinary()
				_ = yym2408
				if false {
				} else {
					z.F.DecSliceStringX(yyv2407, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2411 := &x.LoadBalancerSourceRanges
				yym2412 := z.DecBinary()
				_ = yym2412
				if false {
				} else {
					z.F.DecSliceStringX(yyv2411, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2398)
		} // end switch yys2398
	} // end for yyj2398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2413 int
	var yyb2413 bool
	var yyhl2413 bool = l >= 0
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2414 := &x.Ports
		yym2415 := z.DecBinary()
		_ = yym2415
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2414), d)
		}
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2416 := &x.Selector
		yym2417 := z.DecBinary()
		_ = yym2417
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2416, false, d)
		}
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2420 := &x.ExternalIPs
		yym2421 := z.DecBinary()
		_ = yym2421
		if false {
		} else {
			z.F.DecSliceStringX(yyv2420, false, d)
		}
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2422 := &x.DeprecatedPublicIPs
		yym2423 := z.DecBinary()
		_ = yym2423
		if false {
		} else {
			z.F.DecSliceStringX(yyv2422, false, d)
		}
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2413++
	if yyhl2413 {
		yyb2413 = yyj2413 > l
	} else {
		yyb2413 = r.CheckBreak()
	}
	if yyb2413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2426 := &x.LoadBalancerSourceRanges
		yym2427 := z.DecBinary()
		_ = yym2427
		if false {
		} else {
			z.F.DecSliceStringX(yyv2426, false, d)
		}
	}
	for {
		yyj2413++
		if yyhl2413 {
			yyb2413 = yyj2413 > l
		} else {
			yyb2413 = r.CheckBreak()
		}
		if yyb2413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2428 := z.EncBinary()
		_ = yym2428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2429 := !z.EncBinary()
			yy2arr2429 := z.EncBasicHandle().StructToArray
			var yyq2429 [5]bool
			_, _, _ = yysep2429, yyq2429, yy2arr2429
			const yyr2429 bool = false
			yyq2429[0] = x.Name != ""
			yyq2429[1] = x.Protocol != ""
			yyq2429[3] = true
			yyq2429[4] = x.NodePort != 0
			var yynn2429 int
			if yyr2429 || yy2arr2429 {
				r.EncodeArrayStart(5)
			} else {
				yynn2429 = 1
				for _, b := range yyq2429 {
					if b {
						yynn2429++
					}
				}
				r.EncodeMapStart(yynn2429)
				yynn2429 = 0
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[0] {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2429[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2429[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2435 := z.EncBinary()
				_ = yym2435
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2436 := z.EncBinary()
				_ = yym2436
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[3] {
					yy2438 := &x.TargetPort
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2438) {
					} else if !yym2439 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2438)
					} else {
						z.EncFallback(yy2438)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2429[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2440 := &x.TargetPort
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2440) {
					} else if !yym2441 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2440)
					} else {
						z.EncFallback(yy2440)
					}
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[4] {
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2429[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2445 := z.DecBinary()
	_ = yym2445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2446 := r.ContainerType()
		if yyct2446 == codecSelferValueTypeMap1234 {
			yyl2446 := r.ReadMapStart()
			if yyl2446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2446, d)
			}
		} else if yyct2446 == codecSelferValueTypeArray1234 {
			yyl2446 := r.ReadArrayStart()
			if yyl2446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2447Slc
	var yyhl2447 bool = l >= 0
	for yyj2447 := 0; ; yyj2447++ {
		if yyhl2447 {
			if yyj2447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2447Slc = r.DecodeBytes(yys2447Slc, true, true)
		yys2447 := string(yys2447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2447 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2451 := &x.TargetPort
				yym2452 := z.DecBinary()
				_ = yym2452
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2451) {
				} else if !yym2452 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2451)
				} else {
					z.DecFallback(yyv2451, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2447)
		} // end switch yys2447
	} // end for yyj2447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2454 int
	var yyb2454 bool
	var yyhl2454 bool = l >= 0
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2458 := &x.TargetPort
		yym2459 := z.DecBinary()
		_ = yym2459
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2458) {
		} else if !yym2459 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2458)
		} else {
			z.DecFallback(yyv2458, false)
		}
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2454++
		if yyhl2454 {
			yyb2454 = yyj2454 > l
		} else {
			yyb2454 = r.CheckBreak()
		}
		if yyb2454 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2454-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2461 := z.EncBinary()
		_ = yym2461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2462 := !z.EncBinary()
			yy2arr2462 := z.EncBasicHandle().StructToArray
			var yyq2462 [5]bool
			_, _, _ = yysep2462, yyq2462, yy2arr2462
			const yyr2462 bool = false
			yyq2462[0] = x.Kind != ""
			yyq2462[1] = x.APIVersion != ""
			yyq2462[2] = true
			yyq2462[3] = true
			yyq2462[4] = true
			var yynn2462 int
			if yyr2462 || yy2arr2462 {
				r.EncodeArrayStart(5)
			} else {
				yynn2462 = 0
				for _, b := range yyq2462 {
					if b {
						yynn2462++
					}
				}
				r.EncodeMapStart(yynn2462)
				yynn2462 = 0
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2462[0] {
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2462[1] {
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2462[2] {
					yy2470 := &x.ObjectMeta
					yy2470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2471 := &x.ObjectMeta
					yy2471.CodecEncodeSelf(e)
				}
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2462[3] {
					yy2473 := &x.Spec
					yy2473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2462[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2474 := &x.Spec
					yy2474.CodecEncodeSelf(e)
				}
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2462[4] {
					yy2476 := &x.Status
					yy2476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2462[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2477 := &x.Status
					yy2477.CodecEncodeSelf(e)
				}
			}
			if yyr2462 || yy2arr2462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2479 := r.ContainerType()
		if yyct2479 == codecSelferValueTypeMap1234 {
			yyl2479 := r.ReadMapStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2479, d)
			}
		} else if yyct2479 == codecSelferValueTypeArray1234 {
			yyl2479 := r.ReadArrayStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2480Slc
	var yyhl2480 bool = l >= 0
	for yyj2480 := 0; ; yyj2480++ {
		if yyhl2480 {
			if yyj2480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2480Slc = r.DecodeBytes(yys2480Slc, true, true)
		yys2480 := string(yys2480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2483 := &x.ObjectMeta
				yyv2483.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2484 := &x.Spec
				yyv2484.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2485 := &x.Status
				yyv2485.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2480)
		} // end switch yys2480
	} // end for yyj2480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2486 int
	var yyb2486 bool
	var yyhl2486 bool = l >= 0
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2489 := &x.ObjectMeta
		yyv2489.CodecDecodeSelf(d)
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2490 := &x.Spec
		yyv2490.CodecDecodeSelf(d)
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2491 := &x.Status
		yyv2491.CodecDecodeSelf(d)
	}
	for {
		yyj2486++
		if yyhl2486 {
			yyb2486 = yyj2486 > l
		} else {
			yyb2486 = r.CheckBreak()
		}
		if yyb2486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2492 := z.EncBinary()
		_ = yym2492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2493 := !z.EncBinary()
			yy2arr2493 := z.EncBasicHandle().StructToArray
			var yyq2493 [4]bool
			_, _, _ = yysep2493, yyq2493, yy2arr2493
			const yyr2493 bool = false
			yyq2493[0] = x.Kind != ""
			yyq2493[1] = x.APIVersion != ""
			yyq2493[2] = true
			var yynn2493 int
			if yyr2493 || yy2arr2493 {
				r.EncodeArrayStart(4)
			} else {
				yynn2493 = 1
				for _, b := range yyq2493 {
					if b {
						yynn2493++
					}
				}
				r.EncodeMapStart(yynn2493)
				yynn2493 = 0
			}
			if yyr2493 || yy2arr2493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2493[0] {
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2493[1] {
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2493[2] {
					yy2501 := &x.ListMeta
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2501) {
					} else {
						z.EncFallback(yy2501)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2503 := &x.ListMeta
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2503) {
					} else {
						z.EncFallback(yy2503)
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2493 || yy2arr2493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2508 := z.DecBinary()
	_ = yym2508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2509 := r.ContainerType()
		if yyct2509 == codecSelferValueTypeMap1234 {
			yyl2509 := r.ReadMapStart()
			if yyl2509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2509, d)
			}
		} else if yyct2509 == codecSelferValueTypeArray1234 {
			yyl2509 := r.ReadArrayStart()
			if yyl2509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2510Slc
	var yyhl2510 bool = l >= 0
	for yyj2510 := 0; ; yyj2510++ {
		if yyhl2510 {
			if yyj2510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2510Slc = r.DecodeBytes(yys2510Slc, true, true)
		yys2510 := string(yys2510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2513 := &x.ListMeta
				yym2514 := z.DecBinary()
				_ = yym2514
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2513) {
				} else {
					z.DecFallback(yyv2513, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2515 := &x.Items
				yym2516 := z.DecBinary()
				_ = yym2516
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2515), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2510)
		} // end switch yys2510
	} // end for yyj2510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2517 int
	var yyb2517 bool
	var yyhl2517 bool = l >= 0
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2520 := &x.ListMeta
		yym2521 := z.DecBinary()
		_ = yym2521
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2520) {
		} else {
			z.DecFallback(yyv2520, false)
		}
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2522 := &x.Items
		yym2523 := z.DecBinary()
		_ = yym2523
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2522), d)
		}
	}
	for {
		yyj2517++
		if yyhl2517 {
			yyb2517 = yyj2517 > l
		} else {
			yyb2517 = r.CheckBreak()
		}
		if yyb2517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2524 := z.EncBinary()
		_ = yym2524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2525 := !z.EncBinary()
			yy2arr2525 := z.EncBasicHandle().StructToArray
			var yyq2525 [5]bool
			_, _, _ = yysep2525, yyq2525, yy2arr2525
			const yyr2525 bool = false
			yyq2525[0] = x.Kind != ""
			yyq2525[1] = x.APIVersion != ""
			yyq2525[2] = true
			yyq2525[3] = len(x.Secrets) != 0
			yyq2525[4] = len(x.ImagePullSecrets) != 0
			var yynn2525 int
			if yyr2525 || yy2arr2525 {
				r.EncodeArrayStart(5)
			} else {
				yynn2525 = 0
				for _, b := range yyq2525 {
					if b {
						yynn2525++
					}
				}
				r.EncodeMapStart(yynn2525)
				yynn2525 = 0
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[0] {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[1] {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2525[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[2] {
					yy2533 := &x.ObjectMeta
					yy2533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2525[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2534 := &x.ObjectMeta
					yy2534.CodecEncodeSelf(e)
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2536 := z.EncBinary()
						_ = yym2536
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2525[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2537 := z.EncBinary()
						_ = yym2537
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2539 := z.EncBinary()
						_ = yym2539
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2525[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2540 := z.EncBinary()
						_ = yym2540
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2541 := z.DecBinary()
	_ = yym2541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2542 := r.ContainerType()
		if yyct2542 == codecSelferValueTypeMap1234 {
			yyl2542 := r.ReadMapStart()
			if yyl2542 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2542, d)
			}
		} else if yyct2542 == codecSelferValueTypeArray1234 {
			yyl2542 := r.ReadArrayStart()
			if yyl2542 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2542, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2543Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2543Slc
	var yyhl2543 bool = l >= 0
	for yyj2543 := 0; ; yyj2543++ {
		if yyhl2543 {
			if yyj2543 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2543Slc = r.DecodeBytes(yys2543Slc, true, true)
		yys2543 := string(yys2543Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2543 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2546 := &x.ObjectMeta
				yyv2546.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2547 := &x.Secrets
				yym2548 := z.DecBinary()
				_ = yym2548
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2547), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2549 := &x.ImagePullSecrets
				yym2550 := z.DecBinary()
				_ = yym2550
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2549), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2543)
		} // end switch yys2543
	} // end for yyj2543
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2551 int
	var yyb2551 bool
	var yyhl2551 bool = l >= 0
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2554 := &x.ObjectMeta
		yyv2554.CodecDecodeSelf(d)
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2555 := &x.Secrets
		yym2556 := z.DecBinary()
		_ = yym2556
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2555), d)
		}
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2557 := &x.ImagePullSecrets
		yym2558 := z.DecBinary()
		_ = yym2558
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2557), d)
		}
	}
	for {
		yyj2551++
		if yyhl2551 {
			yyb2551 = yyj2551 > l
		} else {
			yyb2551 = r.CheckBreak()
		}
		if yyb2551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2559 := z.EncBinary()
		_ = yym2559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2560 := !z.EncBinary()
			yy2arr2560 := z.EncBasicHandle().StructToArray
			var yyq2560 [4]bool
			_, _, _ = yysep2560, yyq2560, yy2arr2560
			const yyr2560 bool = false
			yyq2560[0] = x.Kind != ""
			yyq2560[1] = x.APIVersion != ""
			yyq2560[2] = true
			var yynn2560 int
			if yyr2560 || yy2arr2560 {
				r.EncodeArrayStart(4)
			} else {
				yynn2560 = 1
				for _, b := range yyq2560 {
					if b {
						yynn2560++
					}
				}
				r.EncodeMapStart(yynn2560)
				yynn2560 = 0
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[0] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[1] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[2] {
					yy2568 := &x.ListMeta
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2568) {
					} else {
						z.EncFallback(yy2568)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2560[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2570 := &x.ListMeta
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2570) {
					} else {
						z.EncFallback(yy2570)
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2575 := z.DecBinary()
	_ = yym2575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2576 := r.ContainerType()
		if yyct2576 == codecSelferValueTypeMap1234 {
			yyl2576 := r.ReadMapStart()
			if yyl2576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2576, d)
			}
		} else if yyct2576 == codecSelferValueTypeArray1234 {
			yyl2576 := r.ReadArrayStart()
			if yyl2576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2577Slc
	var yyhl2577 bool = l >= 0
	for yyj2577 := 0; ; yyj2577++ {
		if yyhl2577 {
			if yyj2577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2577Slc = r.DecodeBytes(yys2577Slc, true, true)
		yys2577 := string(yys2577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2577 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2580 := &x.ListMeta
				yym2581 := z.DecBinary()
				_ = yym2581
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2580) {
				} else {
					z.DecFallback(yyv2580, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2582 := &x.Items
				yym2583 := z.DecBinary()
				_ = yym2583
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2582), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2577)
		} // end switch yys2577
	} // end for yyj2577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2584 int
	var yyb2584 bool
	var yyhl2584 bool = l >= 0
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2587 := &x.ListMeta
		yym2588 := z.DecBinary()
		_ = yym2588
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2587) {
		} else {
			z.DecFallback(yyv2587, false)
		}
	}
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2589 := &x.Items
		yym2590 := z.DecBinary()
		_ = yym2590
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2589), d)
		}
	}
	for {
		yyj2584++
		if yyhl2584 {
			yyb2584 = yyj2584 > l
		} else {
			yyb2584 = r.CheckBreak()
		}
		if yyb2584 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2584-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2591 := z.EncBinary()
		_ = yym2591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2592 := !z.EncBinary()
			yy2arr2592 := z.EncBasicHandle().StructToArray
			var yyq2592 [4]bool
			_, _, _ = yysep2592, yyq2592, yy2arr2592
			const yyr2592 bool = false
			yyq2592[0] = x.Kind != ""
			yyq2592[1] = x.APIVersion != ""
			yyq2592[2] = true
			var yynn2592 int
			if yyr2592 || yy2arr2592 {
				r.EncodeArrayStart(4)
			} else {
				yynn2592 = 1
				for _, b := range yyq2592 {
					if b {
						yynn2592++
					}
				}
				r.EncodeMapStart(yynn2592)
				yynn2592 = 0
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2592[0] {
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2592[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2592[1] {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2592[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2592[2] {
					yy2600 := &x.ObjectMeta
					yy2600.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2592[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2601 := &x.ObjectMeta
					yy2601.CodecEncodeSelf(e)
				}
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2605 := z.DecBinary()
	_ = yym2605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2606 := r.ContainerType()
		if yyct2606 == codecSelferValueTypeMap1234 {
			yyl2606 := r.ReadMapStart()
			if yyl2606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2606, d)
			}
		} else if yyct2606 == codecSelferValueTypeArray1234 {
			yyl2606 := r.ReadArrayStart()
			if yyl2606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2607Slc
	var yyhl2607 bool = l >= 0
	for yyj2607 := 0; ; yyj2607++ {
		if yyhl2607 {
			if yyj2607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2607Slc = r.DecodeBytes(yys2607Slc, true, true)
		yys2607 := string(yys2607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2607 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2610 := &x.ObjectMeta
				yyv2610.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2611 := &x.Subsets
				yym2612 := z.DecBinary()
				_ = yym2612
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2611), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2607)
		} // end switch yys2607
	} // end for yyj2607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2613 int
	var yyb2613 bool
	var yyhl2613 bool = l >= 0
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2616 := &x.ObjectMeta
		yyv2616.CodecDecodeSelf(d)
	}
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2617 := &x.Subsets
		yym2618 := z.DecBinary()
		_ = yym2618
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2617), d)
		}
	}
	for {
		yyj2613++
		if yyhl2613 {
			yyb2613 = yyj2613 > l
		} else {
			yyb2613 = r.CheckBreak()
		}
		if yyb2613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2619 := z.EncBinary()
		_ = yym2619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2620 := !z.EncBinary()
			yy2arr2620 := z.EncBasicHandle().StructToArray
			var yyq2620 [3]bool
			_, _, _ = yysep2620, yyq2620, yy2arr2620
			const yyr2620 bool = false
			yyq2620[0] = len(x.Addresses) != 0
			yyq2620[1] = len(x.NotReadyAddresses) != 0
			yyq2620[2] = len(x.Ports) != 0
			var yynn2620 int
			if yyr2620 || yy2arr2620 {
				r.EncodeArrayStart(3)
			} else {
				yynn2620 = 0
				for _, b := range yyq2620 {
					if b {
						yynn2620++
					}
				}
				r.EncodeMapStart(yynn2620)
				yynn2620 = 0
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2620[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2622 := z.EncBinary()
						_ = yym2622
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2620[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2623 := z.EncBinary()
						_ = yym2623
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2620[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2625 := z.EncBinary()
						_ = yym2625
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2620[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2626 := z.EncBinary()
						_ = yym2626
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2620[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2628 := z.EncBinary()
						_ = yym2628
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2620[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2629 := z.EncBinary()
						_ = yym2629
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2630 := z.DecBinary()
	_ = yym2630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2631 := r.ContainerType()
		if yyct2631 == codecSelferValueTypeMap1234 {
			yyl2631 := r.ReadMapStart()
			if yyl2631 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2631, d)
			}
		} else if yyct2631 == codecSelferValueTypeArray1234 {
			yyl2631 := r.ReadArrayStart()
			if yyl2631 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2631, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2632Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2632Slc
	var yyhl2632 bool = l >= 0
	for yyj2632 := 0; ; yyj2632++ {
		if yyhl2632 {
			if yyj2632 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2632Slc = r.DecodeBytes(yys2632Slc, true, true)
		yys2632 := string(yys2632Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2632 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2633 := &x.Addresses
				yym2634 := z.DecBinary()
				_ = yym2634
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2633), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2635 := &x.NotReadyAddresses
				yym2636 := z.DecBinary()
				_ = yym2636
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2635), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2637 := &x.Ports
				yym2638 := z.DecBinary()
				_ = yym2638
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2637), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2632)
		} // end switch yys2632
	} // end for yyj2632
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2639 int
	var yyb2639 bool
	var yyhl2639 bool = l >= 0
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2640 := &x.Addresses
		yym2641 := z.DecBinary()
		_ = yym2641
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2640), d)
		}
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2642 := &x.NotReadyAddresses
		yym2643 := z.DecBinary()
		_ = yym2643
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2642), d)
		}
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2644 := &x.Ports
		yym2645 := z.DecBinary()
		_ = yym2645
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2644), d)
		}
	}
	for {
		yyj2639++
		if yyhl2639 {
			yyb2639 = yyj2639 > l
		} else {
			yyb2639 = r.CheckBreak()
		}
		if yyb2639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2646 := z.EncBinary()
		_ = yym2646
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2647 := !z.EncBinary()
			yy2arr2647 := z.EncBasicHandle().StructToArray
			var yyq2647 [4]bool
			_, _, _ = yysep2647, yyq2647, yy2arr2647
			const yyr2647 bool = false
			yyq2647[1] = x.Hostname != ""
			yyq2647[2] = x.NodeName != nil
			yyq2647[3] = x.TargetRef != nil
			var yynn2647 int
			if yyr2647 || yy2arr2647 {
				r.EncodeArrayStart(4)
			} else {
				yynn2647 = 1
				for _, b := range yyq2647 {
					if b {
						yynn2647++
					}
				}
				r.EncodeMapStart(yynn2647)
				yynn2647 = 0
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2649 := z.EncBinary()
				_ = yym2649
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2650 := z.EncBinary()
				_ = yym2650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2647[1] {
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2647[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2647[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2655 := *x.NodeName
						yym2656 := z.EncBinary()
						_ = yym2656
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2655))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2647[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2657 := *x.NodeName
						yym2658 := z.EncBinary()
						_ = yym2658
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2657))
						}
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2647[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2647[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2660 := z.DecBinary()
	_ = yym2660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2661 := r.ContainerType()
		if yyct2661 == codecSelferValueTypeMap1234 {
			yyl2661 := r.ReadMapStart()
			if yyl2661 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2661, d)
			}
		} else if yyct2661 == codecSelferValueTypeArray1234 {
			yyl2661 := r.ReadArrayStart()
			if yyl2661 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2662Slc
	var yyhl2662 bool = l >= 0
	for yyj2662 := 0; ; yyj2662++ {
		if yyhl2662 {
			if yyj2662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2662Slc = r.DecodeBytes(yys2662Slc, true, true)
		yys2662 := string(yys2662Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2662 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2666 := z.DecBinary()
				_ = yym2666
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2662)
		} // end switch yys2662
	} // end for yyj2662
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2668 int
	var yyb2668 bool
	var yyhl2668 bool = l >= 0
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2672 := z.DecBinary()
		_ = yym2672
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2668++
	if yyhl2668 {
		yyb2668 = yyj2668 > l
	} else {
		yyb2668 = r.CheckBreak()
	}
	if yyb2668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2668++
		if yyhl2668 {
			yyb2668 = yyj2668 > l
		} else {
			yyb2668 = r.CheckBreak()
		}
		if yyb2668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2674 := z.EncBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2675 := !z.EncBinary()
			yy2arr2675 := z.EncBasicHandle().StructToArray
			var yyq2675 [3]bool
			_, _, _ = yysep2675, yyq2675, yy2arr2675
			const yyr2675 bool = false
			yyq2675[0] = x.Name != ""
			yyq2675[2] = x.Protocol != ""
			var yynn2675 int
			if yyr2675 || yy2arr2675 {
				r.EncodeArrayStart(3)
			} else {
				yynn2675 = 1
				for _, b := range yyq2675 {
					if b {
						yynn2675++
					}
				}
				r.EncodeMapStart(yynn2675)
				yynn2675 = 0
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2675[0] {
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2680 := z.EncBinary()
				_ = yym2680
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2681 := z.EncBinary()
				_ = yym2681
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2675[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2684 := r.ContainerType()
		if yyct2684 == codecSelferValueTypeMap1234 {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if yyct2684 == codecSelferValueTypeArray1234 {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2685 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2689 int
	var yyb2689 bool
	var yyhl2689 bool = l >= 0
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2689++
		if yyhl2689 {
			yyb2689 = yyj2689 > l
		} else {
			yyb2689 = r.CheckBreak()
		}
		if yyb2689 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2689-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2693 := z.EncBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2694 := !z.EncBinary()
			yy2arr2694 := z.EncBasicHandle().StructToArray
			var yyq2694 [4]bool
			_, _, _ = yysep2694, yyq2694, yy2arr2694
			const yyr2694 bool = false
			yyq2694[0] = x.Kind != ""
			yyq2694[1] = x.APIVersion != ""
			yyq2694[2] = true
			var yynn2694 int
			if yyr2694 || yy2arr2694 {
				r.EncodeArrayStart(4)
			} else {
				yynn2694 = 1
				for _, b := range yyq2694 {
					if b {
						yynn2694++
					}
				}
				r.EncodeMapStart(yynn2694)
				yynn2694 = 0
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[0] {
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[1] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[2] {
					yy2702 := &x.ListMeta
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2702) {
					} else {
						z.EncFallback(yy2702)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2694[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2704 := &x.ListMeta
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2704) {
					} else {
						z.EncFallback(yy2704)
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2709 := z.DecBinary()
	_ = yym2709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2710 := r.ContainerType()
		if yyct2710 == codecSelferValueTypeMap1234 {
			yyl2710 := r.ReadMapStart()
			if yyl2710 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2710, d)
			}
		} else if yyct2710 == codecSelferValueTypeArray1234 {
			yyl2710 := r.ReadArrayStart()
			if yyl2710 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2710, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2711Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2711Slc
	var yyhl2711 bool = l >= 0
	for yyj2711 := 0; ; yyj2711++ {
		if yyhl2711 {
			if yyj2711 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2711Slc = r.DecodeBytes(yys2711Slc, true, true)
		yys2711 := string(yys2711Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2711 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2714 := &x.ListMeta
				yym2715 := z.DecBinary()
				_ = yym2715
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2714) {
				} else {
					z.DecFallback(yyv2714, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2716 := &x.Items
				yym2717 := z.DecBinary()
				_ = yym2717
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2716), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2711)
		} // end switch yys2711
	} // end for yyj2711
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2718 int
	var yyb2718 bool
	var yyhl2718 bool = l >= 0
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2721 := &x.ListMeta
		yym2722 := z.DecBinary()
		_ = yym2722
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2721) {
		} else {
			z.DecFallback(yyv2721, false)
		}
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2723 := &x.Items
		yym2724 := z.DecBinary()
		_ = yym2724
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2723), d)
		}
	}
	for {
		yyj2718++
		if yyhl2718 {
			yyb2718 = yyj2718 > l
		} else {
			yyb2718 = r.CheckBreak()
		}
		if yyb2718 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2718-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2725 := z.EncBinary()
		_ = yym2725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2726 := !z.EncBinary()
			yy2arr2726 := z.EncBasicHandle().StructToArray
			var yyq2726 [4]bool
			_, _, _ = yysep2726, yyq2726, yy2arr2726
			const yyr2726 bool = false
			yyq2726[0] = x.PodCIDR != ""
			yyq2726[1] = x.ExternalID != ""
			yyq2726[2] = x.ProviderID != ""
			yyq2726[3] = x.Unschedulable != false
			var yynn2726 int
			if yyr2726 || yy2arr2726 {
				r.EncodeArrayStart(4)
			} else {
				yynn2726 = 0
				for _, b := range yyq2726 {
					if b {
						yynn2726++
					}
				}
				r.EncodeMapStart(yynn2726)
				yynn2726 = 0
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[0] {
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[1] {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[2] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[3] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2726[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2739 := z.DecBinary()
	_ = yym2739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2740 := r.ContainerType()
		if yyct2740 == codecSelferValueTypeMap1234 {
			yyl2740 := r.ReadMapStart()
			if yyl2740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2740, d)
			}
		} else if yyct2740 == codecSelferValueTypeArray1234 {
			yyl2740 := r.ReadArrayStart()
			if yyl2740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2741Slc
	var yyhl2741 bool = l >= 0
	for yyj2741 := 0; ; yyj2741++ {
		if yyhl2741 {
			if yyj2741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2741Slc = r.DecodeBytes(yys2741Slc, true, true)
		yys2741 := string(yys2741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2741 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2741)
		} // end switch yys2741
	} // end for yyj2741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2746 int
	var yyb2746 bool
	var yyhl2746 bool = l >= 0
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2746++
		if yyhl2746 {
			yyb2746 = yyj2746 > l
		} else {
			yyb2746 = r.CheckBreak()
		}
		if yyb2746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2751 := z.EncBinary()
		_ = yym2751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2752 := !z.EncBinary()
			yy2arr2752 := z.EncBasicHandle().StructToArray
			var yyq2752 [1]bool
			_, _, _ = yysep2752, yyq2752, yy2arr2752
			const yyr2752 bool = false
			var yynn2752 int
			if yyr2752 || yy2arr2752 {
				r.EncodeArrayStart(1)
			} else {
				yynn2752 = 1
				for _, b := range yyq2752 {
					if b {
						yynn2752++
					}
				}
				r.EncodeMapStart(yynn2752)
				yynn2752 = 0
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2754 := z.EncBinary()
				_ = yym2754
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2755 := z.EncBinary()
				_ = yym2755
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2756 := z.DecBinary()
	_ = yym2756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2757 := r.ContainerType()
		if yyct2757 == codecSelferValueTypeMap1234 {
			yyl2757 := r.ReadMapStart()
			if yyl2757 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2757, d)
			}
		} else if yyct2757 == codecSelferValueTypeArray1234 {
			yyl2757 := r.ReadArrayStart()
			if yyl2757 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2758Slc
	var yyhl2758 bool = l >= 0
	for yyj2758 := 0; ; yyj2758++ {
		if yyhl2758 {
			if yyj2758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2758Slc = r.DecodeBytes(yys2758Slc, true, true)
		yys2758 := string(yys2758Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2758 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2758)
		} // end switch yys2758
	} // end for yyj2758
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2760 int
	var yyb2760 bool
	var yyhl2760 bool = l >= 0
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2760++
		if yyhl2760 {
			yyb2760 = yyj2760 > l
		} else {
			yyb2760 = r.CheckBreak()
		}
		if yyb2760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2762 := z.EncBinary()
		_ = yym2762
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2763 := !z.EncBinary()
			yy2arr2763 := z.EncBasicHandle().StructToArray
			var yyq2763 [1]bool
			_, _, _ = yysep2763, yyq2763, yy2arr2763
			const yyr2763 bool = false
			yyq2763[0] = true
			var yynn2763 int
			if yyr2763 || yy2arr2763 {
				r.EncodeArrayStart(1)
			} else {
				yynn2763 = 0
				for _, b := range yyq2763 {
					if b {
						yynn2763++
					}
				}
				r.EncodeMapStart(yynn2763)
				yynn2763 = 0
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2763[0] {
					yy2765 := &x.KubeletEndpoint
					yy2765.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2763[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2766 := &x.KubeletEndpoint
					yy2766.CodecEncodeSelf(e)
				}
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2767 := z.DecBinary()
	_ = yym2767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2768 := r.ContainerType()
		if yyct2768 == codecSelferValueTypeMap1234 {
			yyl2768 := r.ReadMapStart()
			if yyl2768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2768, d)
			}
		} else if yyct2768 == codecSelferValueTypeArray1234 {
			yyl2768 := r.ReadArrayStart()
			if yyl2768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2769Slc
	var yyhl2769 bool = l >= 0
	for yyj2769 := 0; ; yyj2769++ {
		if yyhl2769 {
			if yyj2769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2769Slc = r.DecodeBytes(yys2769Slc, true, true)
		yys2769 := string(yys2769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2769 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2770 := &x.KubeletEndpoint
				yyv2770.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2769)
		} // end switch yys2769
	} // end for yyj2769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2771 int
	var yyb2771 bool
	var yyhl2771 bool = l >= 0
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2772 := &x.KubeletEndpoint
		yyv2772.CodecDecodeSelf(d)
	}
	for {
		yyj2771++
		if yyhl2771 {
			yyb2771 = yyj2771 > l
		} else {
			yyb2771 = r.CheckBreak()
		}
		if yyb2771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2773 := z.EncBinary()
		_ = yym2773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2774 := !z.EncBinary()
			yy2arr2774 := z.EncBasicHandle().StructToArray
			var yyq2774 [10]bool
			_, _, _ = yysep2774, yyq2774, yy2arr2774
			const yyr2774 bool = false
			var yynn2774 int
			if yyr2774 || yy2arr2774 {
				r.EncodeArrayStart(10)
			} else {
				yynn2774 = 10
				for _, b := range yyq2774 {
					if b {
						yynn2774++
					}
				}
				r.EncodeMapStart(yynn2774)
				yynn2774 = 0
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2776 := z.EncBinary()
				_ = yym2776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2777 := z.EncBinary()
				_ = yym2777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2779 := z.EncBinary()
				_ = yym2779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2780 := z.EncBinary()
				_ = yym2780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2785 := z.EncBinary()
				_ = yym2785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2786 := z.EncBinary()
				_ = yym2786
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2789 := z.EncBinary()
				_ = yym2789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2792 := z.EncBinary()
				_ = yym2792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2797 := z.EncBinary()
				_ = yym2797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2798 := z.EncBinary()
				_ = yym2798
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2800 := z.EncBinary()
				_ = yym2800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2801 := z.EncBinary()
				_ = yym2801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2803 := z.EncBinary()
				_ = yym2803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2804 := z.EncBinary()
				_ = yym2804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2805 := z.DecBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2806 := r.ContainerType()
		if yyct2806 == codecSelferValueTypeMap1234 {
			yyl2806 := r.ReadMapStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2806, d)
			}
		} else if yyct2806 == codecSelferValueTypeArray1234 {
			yyl2806 := r.ReadArrayStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2807Slc
	var yyhl2807 bool = l >= 0
	for yyj2807 := 0; ; yyj2807++ {
		if yyhl2807 {
			if yyj2807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2807Slc = r.DecodeBytes(yys2807Slc, true, true)
		yys2807 := string(yys2807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2807 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2807)
		} // end switch yys2807
	} // end for yyj2807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2818 int
	var yyb2818 bool
	var yyhl2818 bool = l >= 0
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2818++
		if yyhl2818 {
			yyb2818 = yyj2818 > l
		} else {
			yyb2818 = r.CheckBreak()
		}
		if yyb2818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2829 := z.EncBinary()
		_ = yym2829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2830 := !z.EncBinary()
			yy2arr2830 := z.EncBasicHandle().StructToArray
			var yyq2830 [10]bool
			_, _, _ = yysep2830, yyq2830, yy2arr2830
			const yyr2830 bool = false
			yyq2830[0] = len(x.Capacity) != 0
			yyq2830[1] = len(x.Allocatable) != 0
			yyq2830[2] = x.Phase != ""
			yyq2830[3] = len(x.Conditions) != 0
			yyq2830[4] = len(x.Addresses) != 0
			yyq2830[5] = true
			yyq2830[6] = true
			yyq2830[7] = len(x.Images) != 0
			yyq2830[8] = len(x.VolumesInUse) != 0
			yyq2830[9] = len(x.VolumesAttached) != 0
			var yynn2830 int
			if yyr2830 || yy2arr2830 {
				r.EncodeArrayStart(10)
			} else {
				yynn2830 = 0
				for _, b := range yyq2830 {
					if b {
						yynn2830++
					}
				}
				r.EncodeMapStart(yynn2830)
				yynn2830 = 0
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2830[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2835 := z.EncBinary()
						_ = yym2835
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2836 := z.EncBinary()
						_ = yym2836
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2838 := z.EncBinary()
						_ = yym2838
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2839 := z.EncBinary()
						_ = yym2839
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[5] {
					yy2841 := &x.DaemonEndpoints
					yy2841.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2842 := &x.DaemonEndpoints
					yy2842.CodecEncodeSelf(e)
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[6] {
					yy2844 := &x.NodeInfo
					yy2844.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2845 := &x.NodeInfo
					yy2845.CodecEncodeSelf(e)
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2847 := z.EncBinary()
						_ = yym2847
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2848 := z.EncBinary()
						_ = yym2848
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2850 := z.EncBinary()
						_ = yym2850
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2851 := z.EncBinary()
						_ = yym2851
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2853 := z.EncBinary()
						_ = yym2853
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2830[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2854 := z.EncBinary()
						_ = yym2854
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2855 := z.DecBinary()
	_ = yym2855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2856 := r.ContainerType()
		if yyct2856 == codecSelferValueTypeMap1234 {
			yyl2856 := r.ReadMapStart()
			if yyl2856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2856, d)
			}
		} else if yyct2856 == codecSelferValueTypeArray1234 {
			yyl2856 := r.ReadArrayStart()
			if yyl2856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2857Slc
	var yyhl2857 bool = l >= 0
	for yyj2857 := 0; ; yyj2857++ {
		if yyhl2857 {
			if yyj2857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2857Slc = r.DecodeBytes(yys2857Slc, true, true)
		yys2857 := string(yys2857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2857 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2858 := &x.Capacity
				yyv2858.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2859 := &x.Allocatable
				yyv2859.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2861 := &x.Conditions
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2861), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2863 := &x.Addresses
				yym2864 := z.DecBinary()
				_ = yym2864
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2863), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2865 := &x.DaemonEndpoints
				yyv2865.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2866 := &x.NodeInfo
				yyv2866.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2867 := &x.Images
				yym2868 := z.DecBinary()
				_ = yym2868
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2867), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2869 := &x.VolumesInUse
				yym2870 := z.DecBinary()
				_ = yym2870
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2869), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2871 := &x.VolumesAttached
				yym2872 := z.DecBinary()
				_ = yym2872
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2857)
		} // end switch yys2857
	} // end for yyj2857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2873 int
	var yyb2873 bool
	var yyhl2873 bool = l >= 0
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2874 := &x.Capacity
		yyv2874.CodecDecodeSelf(d)
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2875 := &x.Allocatable
		yyv2875.CodecDecodeSelf(d)
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2877 := &x.Conditions
		yym2878 := z.DecBinary()
		_ = yym2878
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2877), d)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2879 := &x.Addresses
		yym2880 := z.DecBinary()
		_ = yym2880
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2879), d)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2881 := &x.DaemonEndpoints
		yyv2881.CodecDecodeSelf(d)
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2882 := &x.NodeInfo
		yyv2882.CodecDecodeSelf(d)
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2883 := &x.Images
		yym2884 := z.DecBinary()
		_ = yym2884
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2883), d)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2885 := &x.VolumesInUse
		yym2886 := z.DecBinary()
		_ = yym2886
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2885), d)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2887 := &x.VolumesAttached
		yym2888 := z.DecBinary()
		_ = yym2888
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2887), d)
		}
	}
	for {
		yyj2873++
		if yyhl2873 {
			yyb2873 = yyj2873 > l
		} else {
			yyb2873 = r.CheckBreak()
		}
		if yyb2873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2889 := z.EncBinary()
	_ = yym2889
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2890 := z.DecBinary()
	_ = yym2890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2891 := z.EncBinary()
		_ = yym2891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2892 := !z.EncBinary()
			yy2arr2892 := z.EncBasicHandle().StructToArray
			var yyq2892 [2]bool
			_, _, _ = yysep2892, yyq2892, yy2arr2892
			const yyr2892 bool = false
			var yynn2892 int
			if yyr2892 || yy2arr2892 {
				r.EncodeArrayStart(2)
			} else {
				yynn2892 = 2
				for _, b := range yyq2892 {
					if b {
						yynn2892++
					}
				}
				r.EncodeMapStart(yynn2892)
				yynn2892 = 0
			}
			if yyr2892 || yy2arr2892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2892 || yy2arr2892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2895 := z.EncBinary()
				_ = yym2895
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2896 := z.EncBinary()
				_ = yym2896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2892 || yy2arr2892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2897 := z.DecBinary()
	_ = yym2897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2898 := r.ContainerType()
		if yyct2898 == codecSelferValueTypeMap1234 {
			yyl2898 := r.ReadMapStart()
			if yyl2898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2898, d)
			}
		} else if yyct2898 == codecSelferValueTypeArray1234 {
			yyl2898 := r.ReadArrayStart()
			if yyl2898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2899Slc
	var yyhl2899 bool = l >= 0
	for yyj2899 := 0; ; yyj2899++ {
		if yyhl2899 {
			if yyj2899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2899Slc = r.DecodeBytes(yys2899Slc, true, true)
		yys2899 := string(yys2899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2899 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2899)
		} // end switch yys2899
	} // end for yyj2899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2902 int
	var yyb2902 bool
	var yyhl2902 bool = l >= 0
	yyj2902++
	if yyhl2902 {
		yyb2902 = yyj2902 > l
	} else {
		yyb2902 = r.CheckBreak()
	}
	if yyb2902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2902++
	if yyhl2902 {
		yyb2902 = yyj2902 > l
	} else {
		yyb2902 = r.CheckBreak()
	}
	if yyb2902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2902++
		if yyhl2902 {
			yyb2902 = yyj2902 > l
		} else {
			yyb2902 = r.CheckBreak()
		}
		if yyb2902 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2902-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2905 := z.EncBinary()
		_ = yym2905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2906 := !z.EncBinary()
			yy2arr2906 := z.EncBasicHandle().StructToArray
			var yyq2906 [1]bool
			_, _, _ = yysep2906, yyq2906, yy2arr2906
			const yyr2906 bool = false
			yyq2906[0] = len(x.PreferAvoidPods) != 0
			var yynn2906 int
			if yyr2906 || yy2arr2906 {
				r.EncodeArrayStart(1)
			} else {
				yynn2906 = 0
				for _, b := range yyq2906 {
					if b {
						yynn2906++
					}
				}
				r.EncodeMapStart(yynn2906)
				yynn2906 = 0
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2906[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2908 := z.EncBinary()
						_ = yym2908
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2906[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2909 := z.EncBinary()
						_ = yym2909
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2910 := z.DecBinary()
	_ = yym2910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2911 := r.ContainerType()
		if yyct2911 == codecSelferValueTypeMap1234 {
			yyl2911 := r.ReadMapStart()
			if yyl2911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2911, d)
			}
		} else if yyct2911 == codecSelferValueTypeArray1234 {
			yyl2911 := r.ReadArrayStart()
			if yyl2911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2912Slc
	var yyhl2912 bool = l >= 0
	for yyj2912 := 0; ; yyj2912++ {
		if yyhl2912 {
			if yyj2912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2912Slc = r.DecodeBytes(yys2912Slc, true, true)
		yys2912 := string(yys2912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2912 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2913 := &x.PreferAvoidPods
				yym2914 := z.DecBinary()
				_ = yym2914
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2913), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2912)
		} // end switch yys2912
	} // end for yyj2912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2915 int
	var yyb2915 bool
	var yyhl2915 bool = l >= 0
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2916 := &x.PreferAvoidPods
		yym2917 := z.DecBinary()
		_ = yym2917
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2916), d)
		}
	}
	for {
		yyj2915++
		if yyhl2915 {
			yyb2915 = yyj2915 > l
		} else {
			yyb2915 = r.CheckBreak()
		}
		if yyb2915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2918 := z.EncBinary()
		_ = yym2918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2919 := !z.EncBinary()
			yy2arr2919 := z.EncBasicHandle().StructToArray
			var yyq2919 [4]bool
			_, _, _ = yysep2919, yyq2919, yy2arr2919
			const yyr2919 bool = false
			yyq2919[1] = true
			yyq2919[2] = x.Reason != ""
			yyq2919[3] = x.Message != ""
			var yynn2919 int
			if yyr2919 || yy2arr2919 {
				r.EncodeArrayStart(4)
			} else {
				yynn2919 = 1
				for _, b := range yyq2919 {
					if b {
						yynn2919++
					}
				}
				r.EncodeMapStart(yynn2919)
				yynn2919 = 0
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2921 := &x.PodSignature
				yy2921.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2922 := &x.PodSignature
				yy2922.CodecEncodeSelf(e)
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[1] {
					yy2924 := &x.EvictionTime
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2924) {
					} else if yym2925 {
						z.EncBinaryMarshal(yy2924)
					} else if !yym2925 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2924)
					} else {
						z.EncFallback(yy2924)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2919[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2926 := &x.EvictionTime
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2926) {
					} else if yym2927 {
						z.EncBinaryMarshal(yy2926)
					} else if !yym2927 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2926)
					} else {
						z.EncFallback(yy2926)
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[2] {
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2919[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2919[3] {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2919[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2919 || yy2arr2919 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2934 := z.DecBinary()
	_ = yym2934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2935 := r.ContainerType()
		if yyct2935 == codecSelferValueTypeMap1234 {
			yyl2935 := r.ReadMapStart()
			if yyl2935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2935, d)
			}
		} else if yyct2935 == codecSelferValueTypeArray1234 {
			yyl2935 := r.ReadArrayStart()
			if yyl2935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2936Slc
	var yyhl2936 bool = l >= 0
	for yyj2936 := 0; ; yyj2936++ {
		if yyhl2936 {
			if yyj2936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2936Slc = r.DecodeBytes(yys2936Slc, true, true)
		yys2936 := string(yys2936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2936 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2937 := &x.PodSignature
				yyv2937.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2938 := &x.EvictionTime
				yym2939 := z.DecBinary()
				_ = yym2939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2938) {
				} else if yym2939 {
					z.DecBinaryUnmarshal(yyv2938)
				} else if !yym2939 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2938)
				} else {
					z.DecFallback(yyv2938, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2936)
		} // end switch yys2936
	} // end for yyj2936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2942 int
	var yyb2942 bool
	var yyhl2942 bool = l >= 0
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2943 := &x.PodSignature
		yyv2943.CodecDecodeSelf(d)
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2944 := &x.EvictionTime
		yym2945 := z.DecBinary()
		_ = yym2945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2944) {
		} else if yym2945 {
			z.DecBinaryUnmarshal(yyv2944)
		} else if !yym2945 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2944)
		} else {
			z.DecFallback(yyv2944, false)
		}
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2942++
		if yyhl2942 {
			yyb2942 = yyj2942 > l
		} else {
			yyb2942 = r.CheckBreak()
		}
		if yyb2942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2948 := z.EncBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2949 := !z.EncBinary()
			yy2arr2949 := z.EncBasicHandle().StructToArray
			var yyq2949 [1]bool
			_, _, _ = yysep2949, yyq2949, yy2arr2949
			const yyr2949 bool = false
			yyq2949[0] = x.PodController != nil
			var yynn2949 int
			if yyr2949 || yy2arr2949 {
				r.EncodeArrayStart(1)
			} else {
				yynn2949 = 0
				for _, b := range yyq2949 {
					if b {
						yynn2949++
					}
				}
				r.EncodeMapStart(yynn2949)
				yynn2949 = 0
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2949[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2951 := z.DecBinary()
	_ = yym2951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2952 := r.ContainerType()
		if yyct2952 == codecSelferValueTypeMap1234 {
			yyl2952 := r.ReadMapStart()
			if yyl2952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2952, d)
			}
		} else if yyct2952 == codecSelferValueTypeArray1234 {
			yyl2952 := r.ReadArrayStart()
			if yyl2952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2953Slc
	var yyhl2953 bool = l >= 0
	for yyj2953 := 0; ; yyj2953++ {
		if yyhl2953 {
			if yyj2953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2953Slc = r.DecodeBytes(yys2953Slc, true, true)
		yys2953 := string(yys2953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2953 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2953)
		} // end switch yys2953
	} // end for yyj2953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2955 int
	var yyb2955 bool
	var yyhl2955 bool = l >= 0
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2955++
		if yyhl2955 {
			yyb2955 = yyj2955 > l
		} else {
			yyb2955 = r.CheckBreak()
		}
		if yyb2955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2957 := z.EncBinary()
		_ = yym2957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2958 := !z.EncBinary()
			yy2arr2958 := z.EncBasicHandle().StructToArray
			var yyq2958 [2]bool
			_, _, _ = yysep2958, yyq2958, yy2arr2958
			const yyr2958 bool = false
			yyq2958[1] = x.SizeBytes != 0
			var yynn2958 int
			if yyr2958 || yy2arr2958 {
				r.EncodeArrayStart(2)
			} else {
				yynn2958 = 1
				for _, b := range yyq2958 {
					if b {
						yynn2958++
					}
				}
				r.EncodeMapStart(yynn2958)
				yynn2958 = 0
			}
			if yyr2958 || yy2arr2958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2958 || yy2arr2958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2958[1] {
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2958 || yy2arr2958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2965 := z.DecBinary()
	_ = yym2965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2966 := r.ContainerType()
		if yyct2966 == codecSelferValueTypeMap1234 {
			yyl2966 := r.ReadMapStart()
			if yyl2966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2966, d)
			}
		} else if yyct2966 == codecSelferValueTypeArray1234 {
			yyl2966 := r.ReadArrayStart()
			if yyl2966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2967Slc
	var yyhl2967 bool = l >= 0
	for yyj2967 := 0; ; yyj2967++ {
		if yyhl2967 {
			if yyj2967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2967Slc = r.DecodeBytes(yys2967Slc, true, true)
		yys2967 := string(yys2967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2967 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv2968 := &x.Names
				yym2969 := z.DecBinary()
				_ = yym2969
				if false {
				} else {
					z.F.DecSliceStringX(yyv2968, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2967)
		} // end switch yys2967
	} // end for yyj2967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2971 int
	var yyb2971 bool
	var yyhl2971 bool = l >= 0
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv2972 := &x.Names
		yym2973 := z.DecBinary()
		_ = yym2973
		if false {
		} else {
			z.F.DecSliceStringX(yyv2972, false, d)
		}
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj2971++
		if yyhl2971 {
			yyb2971 = yyj2971 > l
		} else {
			yyb2971 = r.CheckBreak()
		}
		if yyb2971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2975 := z.EncBinary()
	_ = yym2975
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2976 := z.DecBinary()
	_ = yym2976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2977 := z.EncBinary()
	_ = yym2977
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2978 := z.DecBinary()
	_ = yym2978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2979 := z.EncBinary()
		_ = yym2979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2980 := !z.EncBinary()
			yy2arr2980 := z.EncBasicHandle().StructToArray
			var yyq2980 [6]bool
			_, _, _ = yysep2980, yyq2980, yy2arr2980
			const yyr2980 bool = false
			yyq2980[2] = true
			yyq2980[3] = true
			yyq2980[4] = x.Reason != ""
			yyq2980[5] = x.Message != ""
			var yynn2980 int
			if yyr2980 || yy2arr2980 {
				r.EncodeArrayStart(6)
			} else {
				yynn2980 = 2
				for _, b := range yyq2980 {
					if b {
						yynn2980++
					}
				}
				r.EncodeMapStart(yynn2980)
				yynn2980 = 0
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[2] {
					yy2984 := &x.LastHeartbeatTime
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2984) {
					} else if yym2985 {
						z.EncBinaryMarshal(yy2984)
					} else if !yym2985 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2984)
					} else {
						z.EncFallback(yy2984)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2980[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2986 := &x.LastHeartbeatTime
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2986) {
					} else if yym2987 {
						z.EncBinaryMarshal(yy2986)
					} else if !yym2987 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2986)
					} else {
						z.EncFallback(yy2986)
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[3] {
					yy2989 := &x.LastTransitionTime
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2989) {
					} else if yym2990 {
						z.EncBinaryMarshal(yy2989)
					} else if !yym2990 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2989)
					} else {
						z.EncFallback(yy2989)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2980[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2991 := &x.LastTransitionTime
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2991) {
					} else if yym2992 {
						z.EncBinaryMarshal(yy2991)
					} else if !yym2992 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2991)
					} else {
						z.EncFallback(yy2991)
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[4] {
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2980[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2980[5] {
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2980[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2980 || yy2arr2980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2999 := z.DecBinary()
	_ = yym2999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3000 := r.ContainerType()
		if yyct3000 == codecSelferValueTypeMap1234 {
			yyl3000 := r.ReadMapStart()
			if yyl3000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3000, d)
			}
		} else if yyct3000 == codecSelferValueTypeArray1234 {
			yyl3000 := r.ReadArrayStart()
			if yyl3000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3001Slc
	var yyhl3001 bool = l >= 0
	for yyj3001 := 0; ; yyj3001++ {
		if yyhl3001 {
			if yyj3001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3001Slc = r.DecodeBytes(yys3001Slc, true, true)
		yys3001 := string(yys3001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3001 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3004 := &x.LastHeartbeatTime
				yym3005 := z.DecBinary()
				_ = yym3005
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3004) {
				} else if yym3005 {
					z.DecBinaryUnmarshal(yyv3004)
				} else if !yym3005 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3004)
				} else {
					z.DecFallback(yyv3004, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3006 := &x.LastTransitionTime
				yym3007 := z.DecBinary()
				_ = yym3007
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3006) {
				} else if yym3007 {
					z.DecBinaryUnmarshal(yyv3006)
				} else if !yym3007 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3006)
				} else {
					z.DecFallback(yyv3006, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3001)
		} // end switch yys3001
	} // end for yyj3001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3010 int
	var yyb3010 bool
	var yyhl3010 bool = l >= 0
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3013 := &x.LastHeartbeatTime
		yym3014 := z.DecBinary()
		_ = yym3014
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3013) {
		} else if yym3014 {
			z.DecBinaryUnmarshal(yyv3013)
		} else if !yym3014 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3013)
		} else {
			z.DecFallback(yyv3013, false)
		}
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3015 := &x.LastTransitionTime
		yym3016 := z.DecBinary()
		_ = yym3016
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3015) {
		} else if yym3016 {
			z.DecBinaryUnmarshal(yyv3015)
		} else if !yym3016 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3015)
		} else {
			z.DecFallback(yyv3015, false)
		}
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3010++
		if yyhl3010 {
			yyb3010 = yyj3010 > l
		} else {
			yyb3010 = r.CheckBreak()
		}
		if yyb3010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3019 := z.EncBinary()
	_ = yym3019
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3020 := z.DecBinary()
	_ = yym3020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3021 := z.EncBinary()
		_ = yym3021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3022 := !z.EncBinary()
			yy2arr3022 := z.EncBasicHandle().StructToArray
			var yyq3022 [2]bool
			_, _, _ = yysep3022, yyq3022, yy2arr3022
			const yyr3022 bool = false
			var yynn3022 int
			if yyr3022 || yy2arr3022 {
				r.EncodeArrayStart(2)
			} else {
				yynn3022 = 2
				for _, b := range yyq3022 {
					if b {
						yynn3022++
					}
				}
				r.EncodeMapStart(yynn3022)
				yynn3022 = 0
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3026 := z.EncBinary()
				_ = yym3026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3027 := z.DecBinary()
	_ = yym3027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3028 := r.ContainerType()
		if yyct3028 == codecSelferValueTypeMap1234 {
			yyl3028 := r.ReadMapStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3028, d)
			}
		} else if yyct3028 == codecSelferValueTypeArray1234 {
			yyl3028 := r.ReadArrayStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3029Slc
	var yyhl3029 bool = l >= 0
	for yyj3029 := 0; ; yyj3029++ {
		if yyhl3029 {
			if yyj3029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3029Slc = r.DecodeBytes(yys3029Slc, true, true)
		yys3029 := string(yys3029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3029 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3029)
		} // end switch yys3029
	} // end for yyj3029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3032 int
	var yyb3032 bool
	var yyhl3032 bool = l >= 0
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3032++
	if yyhl3032 {
		yyb3032 = yyj3032 > l
	} else {
		yyb3032 = r.CheckBreak()
	}
	if yyb3032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3032++
		if yyhl3032 {
			yyb3032 = yyj3032 > l
		} else {
			yyb3032 = r.CheckBreak()
		}
		if yyb3032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3035 := z.EncBinary()
	_ = yym3035
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3036 := z.DecBinary()
	_ = yym3036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3037 := z.EncBinary()
		_ = yym3037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3038 := z.DecBinary()
	_ = yym3038
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3039 := z.EncBinary()
		_ = yym3039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3040 := !z.EncBinary()
			yy2arr3040 := z.EncBasicHandle().StructToArray
			var yyq3040 [5]bool
			_, _, _ = yysep3040, yyq3040, yy2arr3040
			const yyr3040 bool = false
			yyq3040[0] = x.Kind != ""
			yyq3040[1] = x.APIVersion != ""
			yyq3040[2] = true
			yyq3040[3] = true
			yyq3040[4] = true
			var yynn3040 int
			if yyr3040 || yy2arr3040 {
				r.EncodeArrayStart(5)
			} else {
				yynn3040 = 0
				for _, b := range yyq3040 {
					if b {
						yynn3040++
					}
				}
				r.EncodeMapStart(yynn3040)
				yynn3040 = 0
			}
			if yyr3040 || yy2arr3040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3040[0] {
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3040[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3040[1] {
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3040[2] {
					yy3048 := &x.ObjectMeta
					yy3048.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3049 := &x.ObjectMeta
					yy3049.CodecEncodeSelf(e)
				}
			}
			if yyr3040 || yy2arr3040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3040[3] {
					yy3051 := &x.Spec
					yy3051.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3052 := &x.Spec
					yy3052.CodecEncodeSelf(e)
				}
			}
			if yyr3040 || yy2arr3040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3040[4] {
					yy3054 := &x.Status
					yy3054.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3055 := &x.Status
					yy3055.CodecEncodeSelf(e)
				}
			}
			if yyr3040 || yy2arr3040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3056 := z.DecBinary()
	_ = yym3056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3057 := r.ContainerType()
		if yyct3057 == codecSelferValueTypeMap1234 {
			yyl3057 := r.ReadMapStart()
			if yyl3057 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3057, d)
			}
		} else if yyct3057 == codecSelferValueTypeArray1234 {
			yyl3057 := r.ReadArrayStart()
			if yyl3057 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3058Slc
	var yyhl3058 bool = l >= 0
	for yyj3058 := 0; ; yyj3058++ {
		if yyhl3058 {
			if yyj3058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3058Slc = r.DecodeBytes(yys3058Slc, true, true)
		yys3058 := string(yys3058Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3058 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3061 := &x.ObjectMeta
				yyv3061.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3062 := &x.Spec
				yyv3062.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3063 := &x.Status
				yyv3063.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3058)
		} // end switch yys3058
	} // end for yyj3058
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3064 int
	var yyb3064 bool
	var yyhl3064 bool = l >= 0
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3067 := &x.ObjectMeta
		yyv3067.CodecDecodeSelf(d)
	}
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3068 := &x.Spec
		yyv3068.CodecDecodeSelf(d)
	}
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3069 := &x.Status
		yyv3069.CodecDecodeSelf(d)
	}
	for {
		yyj3064++
		if yyhl3064 {
			yyb3064 = yyj3064 > l
		} else {
			yyb3064 = r.CheckBreak()
		}
		if yyb3064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [4]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			yyq3071[0] = x.Kind != ""
			yyq3071[1] = x.APIVersion != ""
			yyq3071[2] = true
			var yynn3071 int
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(4)
			} else {
				yynn3071 = 1
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
				yynn3071 = 0
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[0] {
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[1] {
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3071[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[2] {
					yy3079 := &x.ListMeta
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3079) {
					} else {
						z.EncFallback(yy3079)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3081 := &x.ListMeta
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3081) {
					} else {
						z.EncFallback(yy3081)
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3086 := z.DecBinary()
	_ = yym3086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3087 := r.ContainerType()
		if yyct3087 == codecSelferValueTypeMap1234 {
			yyl3087 := r.ReadMapStart()
			if yyl3087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3087, d)
			}
		} else if yyct3087 == codecSelferValueTypeArray1234 {
			yyl3087 := r.ReadArrayStart()
			if yyl3087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3088Slc
	var yyhl3088 bool = l >= 0
	for yyj3088 := 0; ; yyj3088++ {
		if yyhl3088 {
			if yyj3088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3088Slc = r.DecodeBytes(yys3088Slc, true, true)
		yys3088 := string(yys3088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3088 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3091 := &x.ListMeta
				yym3092 := z.DecBinary()
				_ = yym3092
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3091) {
				} else {
					z.DecFallback(yyv3091, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3093 := &x.Items
				yym3094 := z.DecBinary()
				_ = yym3094
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3093), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3088)
		} // end switch yys3088
	} // end for yyj3088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3095 int
	var yyb3095 bool
	var yyhl3095 bool = l >= 0
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3098 := &x.ListMeta
		yym3099 := z.DecBinary()
		_ = yym3099
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3098) {
		} else {
			z.DecFallback(yyv3098, false)
		}
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3100 := &x.Items
		yym3101 := z.DecBinary()
		_ = yym3101
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3100), d)
		}
	}
	for {
		yyj3095++
		if yyhl3095 {
			yyb3095 = yyj3095 > l
		} else {
			yyb3095 = r.CheckBreak()
		}
		if yyb3095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3102 := z.EncBinary()
	_ = yym3102
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3103 := z.DecBinary()
	_ = yym3103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3104 := z.EncBinary()
		_ = yym3104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3105 := !z.EncBinary()
			yy2arr3105 := z.EncBasicHandle().StructToArray
			var yyq3105 [1]bool
			_, _, _ = yysep3105, yyq3105, yy2arr3105
			const yyr3105 bool = false
			yyq3105[0] = len(x.Finalizers) != 0
			var yynn3105 int
			if yyr3105 || yy2arr3105 {
				r.EncodeArrayStart(1)
			} else {
				yynn3105 = 0
				for _, b := range yyq3105 {
					if b {
						yynn3105++
					}
				}
				r.EncodeMapStart(yynn3105)
				yynn3105 = 0
			}
			if yyr3105 || yy2arr3105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3105[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3107 := z.EncBinary()
						_ = yym3107
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3105[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3108 := z.EncBinary()
						_ = yym3108
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3105 || yy2arr3105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3109 := z.DecBinary()
	_ = yym3109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3110 := r.ContainerType()
		if yyct3110 == codecSelferValueTypeMap1234 {
			yyl3110 := r.ReadMapStart()
			if yyl3110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3110, d)
			}
		} else if yyct3110 == codecSelferValueTypeArray1234 {
			yyl3110 := r.ReadArrayStart()
			if yyl3110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3111Slc
	var yyhl3111 bool = l >= 0
	for yyj3111 := 0; ; yyj3111++ {
		if yyhl3111 {
			if yyj3111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3111Slc = r.DecodeBytes(yys3111Slc, true, true)
		yys3111 := string(yys3111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3111 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3112 := &x.Finalizers
				yym3113 := z.DecBinary()
				_ = yym3113
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3112), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3111)
		} // end switch yys3111
	} // end for yyj3111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3114 int
	var yyb3114 bool
	var yyhl3114 bool = l >= 0
	yyj3114++
	if yyhl3114 {
		yyb3114 = yyj3114 > l
	} else {
		yyb3114 = r.CheckBreak()
	}
	if yyb3114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3115 := &x.Finalizers
		yym3116 := z.DecBinary()
		_ = yym3116
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3115), d)
		}
	}
	for {
		yyj3114++
		if yyhl3114 {
			yyb3114 = yyj3114 > l
		} else {
			yyb3114 = r.CheckBreak()
		}
		if yyb3114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3117 := z.EncBinary()
		_ = yym3117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3118 := !z.EncBinary()
			yy2arr3118 := z.EncBasicHandle().StructToArray
			var yyq3118 [1]bool
			_, _, _ = yysep3118, yyq3118, yy2arr3118
			const yyr3118 bool = false
			yyq3118[0] = x.Phase != ""
			var yynn3118 int
			if yyr3118 || yy2arr3118 {
				r.EncodeArrayStart(1)
			} else {
				yynn3118 = 0
				for _, b := range yyq3118 {
					if b {
						yynn3118++
					}
				}
				r.EncodeMapStart(yynn3118)
				yynn3118 = 0
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3118[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3120 := z.DecBinary()
	_ = yym3120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3121 := r.ContainerType()
		if yyct3121 == codecSelferValueTypeMap1234 {
			yyl3121 := r.ReadMapStart()
			if yyl3121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3121, d)
			}
		} else if yyct3121 == codecSelferValueTypeArray1234 {
			yyl3121 := r.ReadArrayStart()
			if yyl3121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3122Slc
	var yyhl3122 bool = l >= 0
	for yyj3122 := 0; ; yyj3122++ {
		if yyhl3122 {
			if yyj3122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3122Slc = r.DecodeBytes(yys3122Slc, true, true)
		yys3122 := string(yys3122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3122 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3122)
		} // end switch yys3122
	} // end for yyj3122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3124 int
	var yyb3124 bool
	var yyhl3124 bool = l >= 0
	yyj3124++
	if yyhl3124 {
		yyb3124 = yyj3124 > l
	} else {
		yyb3124 = r.CheckBreak()
	}
	if yyb3124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3124++
		if yyhl3124 {
			yyb3124 = yyj3124 > l
		} else {
			yyb3124 = r.CheckBreak()
		}
		if yyb3124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3126 := z.EncBinary()
	_ = yym3126
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3128 := z.EncBinary()
		_ = yym3128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3129 := !z.EncBinary()
			yy2arr3129 := z.EncBasicHandle().StructToArray
			var yyq3129 [5]bool
			_, _, _ = yysep3129, yyq3129, yy2arr3129
			const yyr3129 bool = false
			yyq3129[0] = x.Kind != ""
			yyq3129[1] = x.APIVersion != ""
			yyq3129[2] = true
			yyq3129[3] = true
			yyq3129[4] = true
			var yynn3129 int
			if yyr3129 || yy2arr3129 {
				r.EncodeArrayStart(5)
			} else {
				yynn3129 = 0
				for _, b := range yyq3129 {
					if b {
						yynn3129++
					}
				}
				r.EncodeMapStart(yynn3129)
				yynn3129 = 0
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[0] {
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3132 := z.EncBinary()
					_ = yym3132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[1] {
					yym3134 := z.EncBinary()
					_ = yym3134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3129[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3135 := z.EncBinary()
					_ = yym3135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[2] {
					yy3137 := &x.ObjectMeta
					yy3137.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3129[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3138 := &x.ObjectMeta
					yy3138.CodecEncodeSelf(e)
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[3] {
					yy3140 := &x.Spec
					yy3140.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3129[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3141 := &x.Spec
					yy3141.CodecEncodeSelf(e)
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[4] {
					yy3143 := &x.Status
					yy3143.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3129[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3144 := &x.Status
					yy3144.CodecEncodeSelf(e)
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3145 := z.DecBinary()
	_ = yym3145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3146 := r.ContainerType()
		if yyct3146 == codecSelferValueTypeMap1234 {
			yyl3146 := r.ReadMapStart()
			if yyl3146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3146, d)
			}
		} else if yyct3146 == codecSelferValueTypeArray1234 {
			yyl3146 := r.ReadArrayStart()
			if yyl3146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3147Slc
	var yyhl3147 bool = l >= 0
	for yyj3147 := 0; ; yyj3147++ {
		if yyhl3147 {
			if yyj3147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3147Slc = r.DecodeBytes(yys3147Slc, true, true)
		yys3147 := string(yys3147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3147 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3150 := &x.ObjectMeta
				yyv3150.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3151 := &x.Spec
				yyv3151.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3152 := &x.Status
				yyv3152.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3147)
		} // end switch yys3147
	} // end for yyj3147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3153 int
	var yyb3153 bool
	var yyhl3153 bool = l >= 0
	yyj3153++
	if yyhl3153 {
		yyb3153 = yyj3153 > l
	} else {
		yyb3153 = r.CheckBreak()
	}
	if yyb3153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3153++
	if yyhl3153 {
		yyb3153 = yyj3153 > l
	} else {
		yyb3153 = r.CheckBreak()
	}
	if yyb3153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3153++
	if yyhl3153 {
		yyb3153 = yyj3153 > l
	} else {
		yyb3153 = r.CheckBreak()
	}
	if yyb3153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3156 := &x.ObjectMeta
		yyv3156.CodecDecodeSelf(d)
	}
	yyj3153++
	if yyhl3153 {
		yyb3153 = yyj3153 > l
	} else {
		yyb3153 = r.CheckBreak()
	}
	if yyb3153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3157 := &x.Spec
		yyv3157.CodecDecodeSelf(d)
	}
	yyj3153++
	if yyhl3153 {
		yyb3153 = yyj3153 > l
	} else {
		yyb3153 = r.CheckBreak()
	}
	if yyb3153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3158 := &x.Status
		yyv3158.CodecDecodeSelf(d)
	}
	for {
		yyj3153++
		if yyhl3153 {
			yyb3153 = yyj3153 > l
		} else {
			yyb3153 = r.CheckBreak()
		}
		if yyb3153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3159 := z.EncBinary()
		_ = yym3159
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3160 := !z.EncBinary()
			yy2arr3160 := z.EncBasicHandle().StructToArray
			var yyq3160 [4]bool
			_, _, _ = yysep3160, yyq3160, yy2arr3160
			const yyr3160 bool = false
			yyq3160[0] = x.Kind != ""
			yyq3160[1] = x.APIVersion != ""
			yyq3160[2] = true
			var yynn3160 int
			if yyr3160 || yy2arr3160 {
				r.EncodeArrayStart(4)
			} else {
				yynn3160 = 1
				for _, b := range yyq3160 {
					if b {
						yynn3160++
					}
				}
				r.EncodeMapStart(yynn3160)
				yynn3160 = 0
			}
			if yyr3160 || yy2arr3160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3160[0] {
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3160[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3160 || yy2arr3160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3160[1] {
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3160[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3160 || yy2arr3160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3160[2] {
					yy3168 := &x.ListMeta
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3168) {
					} else {
						z.EncFallback(yy3168)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3160[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3170 := &x.ListMeta
					yym3171 := z.EncBinary()
					_ = yym3171
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3170) {
					} else {
						z.EncFallback(yy3170)
					}
				}
			}
			if yyr3160 || yy2arr3160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3174 := z.EncBinary()
					_ = yym3174
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3160 || yy2arr3160 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3175 := z.DecBinary()
	_ = yym3175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3176 := r.ContainerType()
		if yyct3176 == codecSelferValueTypeMap1234 {
			yyl3176 := r.ReadMapStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3176, d)
			}
		} else if yyct3176 == codecSelferValueTypeArray1234 {
			yyl3176 := r.ReadArrayStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3177Slc
	var yyhl3177 bool = l >= 0
	for yyj3177 := 0; ; yyj3177++ {
		if yyhl3177 {
			if yyj3177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3177Slc = r.DecodeBytes(yys3177Slc, true, true)
		yys3177 := string(yys3177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3177 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3180 := &x.ListMeta
				yym3181 := z.DecBinary()
				_ = yym3181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3180) {
				} else {
					z.DecFallback(yyv3180, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3182 := &x.Items
				yym3183 := z.DecBinary()
				_ = yym3183
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3182), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3177)
		} // end switch yys3177
	} // end for yyj3177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3184 int
	var yyb3184 bool
	var yyhl3184 bool = l >= 0
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3187 := &x.ListMeta
		yym3188 := z.DecBinary()
		_ = yym3188
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3187) {
		} else {
			z.DecFallback(yyv3187, false)
		}
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3189 := &x.Items
		yym3190 := z.DecBinary()
		_ = yym3190
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3189), d)
		}
	}
	for {
		yyj3184++
		if yyhl3184 {
			yyb3184 = yyj3184 > l
		} else {
			yyb3184 = r.CheckBreak()
		}
		if yyb3184 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3184-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3191 := z.EncBinary()
		_ = yym3191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3192 := !z.EncBinary()
			yy2arr3192 := z.EncBasicHandle().StructToArray
			var yyq3192 [4]bool
			_, _, _ = yysep3192, yyq3192, yy2arr3192
			const yyr3192 bool = false
			yyq3192[0] = x.Kind != ""
			yyq3192[1] = x.APIVersion != ""
			yyq3192[2] = true
			var yynn3192 int
			if yyr3192 || yy2arr3192 {
				r.EncodeArrayStart(4)
			} else {
				yynn3192 = 1
				for _, b := range yyq3192 {
					if b {
						yynn3192++
					}
				}
				r.EncodeMapStart(yynn3192)
				yynn3192 = 0
			}
			if yyr3192 || yy2arr3192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3192[0] {
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3192[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3192 || yy2arr3192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3192[1] {
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3192[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3192 || yy2arr3192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3192[2] {
					yy3200 := &x.ObjectMeta
					yy3200.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3192[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3201 := &x.ObjectMeta
					yy3201.CodecEncodeSelf(e)
				}
			}
			if yyr3192 || yy2arr3192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3203 := &x.Target
				yy3203.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3204 := &x.Target
				yy3204.CodecEncodeSelf(e)
			}
			if yyr3192 || yy2arr3192 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3205 := z.DecBinary()
	_ = yym3205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3206 := r.ContainerType()
		if yyct3206 == codecSelferValueTypeMap1234 {
			yyl3206 := r.ReadMapStart()
			if yyl3206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3206, d)
			}
		} else if yyct3206 == codecSelferValueTypeArray1234 {
			yyl3206 := r.ReadArrayStart()
			if yyl3206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3207Slc
	var yyhl3207 bool = l >= 0
	for yyj3207 := 0; ; yyj3207++ {
		if yyhl3207 {
			if yyj3207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3207Slc = r.DecodeBytes(yys3207Slc, true, true)
		yys3207 := string(yys3207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3207 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3210 := &x.ObjectMeta
				yyv3210.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3211 := &x.Target
				yyv3211.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3207)
		} // end switch yys3207
	} // end for yyj3207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3212 int
	var yyb3212 bool
	var yyhl3212 bool = l >= 0
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3215 := &x.ObjectMeta
		yyv3215.CodecDecodeSelf(d)
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3216 := &x.Target
		yyv3216.CodecDecodeSelf(d)
	}
	for {
		yyj3212++
		if yyhl3212 {
			yyb3212 = yyj3212 > l
		} else {
			yyb3212 = r.CheckBreak()
		}
		if yyb3212 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3212-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3217 := z.EncBinary()
		_ = yym3217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3218 := !z.EncBinary()
			yy2arr3218 := z.EncBasicHandle().StructToArray
			var yyq3218 [1]bool
			_, _, _ = yysep3218, yyq3218, yy2arr3218
			const yyr3218 bool = false
			yyq3218[0] = x.UID != nil
			var yynn3218 int
			if yyr3218 || yy2arr3218 {
				r.EncodeArrayStart(1)
			} else {
				yynn3218 = 0
				for _, b := range yyq3218 {
					if b {
						yynn3218++
					}
				}
				r.EncodeMapStart(yynn3218)
				yynn3218 = 0
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3218[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3220 := *x.UID
						yym3221 := z.EncBinary()
						_ = yym3221
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3220) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3220))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3222 := *x.UID
						yym3223 := z.EncBinary()
						_ = yym3223
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3222) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3222))
						}
					}
				}
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3224 := z.DecBinary()
	_ = yym3224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3225 := r.ContainerType()
		if yyct3225 == codecSelferValueTypeMap1234 {
			yyl3225 := r.ReadMapStart()
			if yyl3225 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3225, d)
			}
		} else if yyct3225 == codecSelferValueTypeArray1234 {
			yyl3225 := r.ReadArrayStart()
			if yyl3225 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3225, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3226Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3226Slc
	var yyhl3226 bool = l >= 0
	for yyj3226 := 0; ; yyj3226++ {
		if yyhl3226 {
			if yyj3226 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3226Slc = r.DecodeBytes(yys3226Slc, true, true)
		yys3226 := string(yys3226Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3226 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3228 := z.DecBinary()
				_ = yym3228
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3226)
		} // end switch yys3226
	} // end for yyj3226
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3229 int
	var yyb3229 bool
	var yyhl3229 bool = l >= 0
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3231 := z.DecBinary()
		_ = yym3231
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3229++
		if yyhl3229 {
			yyb3229 = yyj3229 > l
		} else {
			yyb3229 = r.CheckBreak()
		}
		if yyb3229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3232 := z.EncBinary()
		_ = yym3232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3233 := !z.EncBinary()
			yy2arr3233 := z.EncBasicHandle().StructToArray
			var yyq3233 [5]bool
			_, _, _ = yysep3233, yyq3233, yy2arr3233
			const yyr3233 bool = false
			yyq3233[0] = x.Kind != ""
			yyq3233[1] = x.APIVersion != ""
			yyq3233[2] = x.GracePeriodSeconds != nil
			yyq3233[3] = x.Preconditions != nil
			yyq3233[4] = x.OrphanDependents != nil
			var yynn3233 int
			if yyr3233 || yy2arr3233 {
				r.EncodeArrayStart(5)
			} else {
				yynn3233 = 0
				for _, b := range yyq3233 {
					if b {
						yynn3233++
					}
				}
				r.EncodeMapStart(yynn3233)
				yynn3233 = 0
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[0] {
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[1] {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3241 := *x.GracePeriodSeconds
						yym3242 := z.EncBinary()
						_ = yym3242
						if false {
						} else {
							r.EncodeInt(int64(yy3241))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3243 := *x.GracePeriodSeconds
						yym3244 := z.EncBinary()
						_ = yym3244
						if false {
						} else {
							r.EncodeInt(int64(yy3243))
						}
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3233[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3247 := *x.OrphanDependents
						yym3248 := z.EncBinary()
						_ = yym3248
						if false {
						} else {
							r.EncodeBool(bool(yy3247))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3233[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3249 := *x.OrphanDependents
						yym3250 := z.EncBinary()
						_ = yym3250
						if false {
						} else {
							r.EncodeBool(bool(yy3249))
						}
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3252 := r.ContainerType()
		if yyct3252 == codecSelferValueTypeMap1234 {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if yyct3252 == codecSelferValueTypeArray1234 {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3253 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3257 := z.DecBinary()
				_ = yym3257
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3260 := z.DecBinary()
				_ = yym3260
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3261 int
	var yyb3261 bool
	var yyhl3261 bool = l >= 0
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3265 := z.DecBinary()
		_ = yym3265
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3268 := z.DecBinary()
		_ = yym3268
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3261++
		if yyhl3261 {
			yyb3261 = yyj3261 > l
		} else {
			yyb3261 = r.CheckBreak()
		}
		if yyb3261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3269 := z.EncBinary()
		_ = yym3269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3270 := !z.EncBinary()
			yy2arr3270 := z.EncBasicHandle().StructToArray
			var yyq3270 [4]bool
			_, _, _ = yysep3270, yyq3270, yy2arr3270
			const yyr3270 bool = false
			yyq3270[0] = x.Kind != ""
			yyq3270[1] = x.APIVersion != ""
			var yynn3270 int
			if yyr3270 || yy2arr3270 {
				r.EncodeArrayStart(4)
			} else {
				yynn3270 = 2
				for _, b := range yyq3270 {
					if b {
						yynn3270++
					}
				}
				r.EncodeMapStart(yynn3270)
				yynn3270 = 0
			}
			if yyr3270 || yy2arr3270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3270[0] {
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3270[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3270[1] {
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3270[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3278 := z.EncBinary()
				_ = yym3278
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3279 := z.EncBinary()
				_ = yym3279
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3270 || yy2arr3270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3281 := z.EncBinary()
				_ = yym3281
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3282 := z.EncBinary()
				_ = yym3282
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3270 || yy2arr3270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3283 := z.DecBinary()
	_ = yym3283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3284 := r.ContainerType()
		if yyct3284 == codecSelferValueTypeMap1234 {
			yyl3284 := r.ReadMapStart()
			if yyl3284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3284, d)
			}
		} else if yyct3284 == codecSelferValueTypeArray1234 {
			yyl3284 := r.ReadArrayStart()
			if yyl3284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3285Slc
	var yyhl3285 bool = l >= 0
	for yyj3285 := 0; ; yyj3285++ {
		if yyhl3285 {
			if yyj3285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3285Slc = r.DecodeBytes(yys3285Slc, true, true)
		yys3285 := string(yys3285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3285 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3285)
		} // end switch yys3285
	} // end for yyj3285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3290 int
	var yyb3290 bool
	var yyhl3290 bool = l >= 0
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3290++
		if yyhl3290 {
			yyb3290 = yyj3290 > l
		} else {
			yyb3290 = r.CheckBreak()
		}
		if yyb3290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3295 := z.EncBinary()
		_ = yym3295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3296 := !z.EncBinary()
			yy2arr3296 := z.EncBasicHandle().StructToArray
			var yyq3296 [7]bool
			_, _, _ = yysep3296, yyq3296, yy2arr3296
			const yyr3296 bool = false
			yyq3296[0] = x.Kind != ""
			yyq3296[1] = x.APIVersion != ""
			yyq3296[2] = x.LabelSelector != ""
			yyq3296[3] = x.FieldSelector != ""
			yyq3296[4] = x.Watch != false
			yyq3296[5] = x.ResourceVersion != ""
			yyq3296[6] = x.TimeoutSeconds != nil
			var yynn3296 int
			if yyr3296 || yy2arr3296 {
				r.EncodeArrayStart(7)
			} else {
				yynn3296 = 0
				for _, b := range yyq3296 {
					if b {
						yynn3296++
					}
				}
				r.EncodeMapStart(yynn3296)
				yynn3296 = 0
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[0] {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[1] {
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[2] {
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[3] {
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3296[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[4] {
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3296[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[5] {
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3296[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3316 := *x.TimeoutSeconds
						yym3317 := z.EncBinary()
						_ = yym3317
						if false {
						} else {
							r.EncodeInt(int64(yy3316))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3296[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3318 := *x.TimeoutSeconds
						yym3319 := z.EncBinary()
						_ = yym3319
						if false {
						} else {
							r.EncodeInt(int64(yy3318))
						}
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3320 := z.DecBinary()
	_ = yym3320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3321 := r.ContainerType()
		if yyct3321 == codecSelferValueTypeMap1234 {
			yyl3321 := r.ReadMapStart()
			if yyl3321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3321, d)
			}
		} else if yyct3321 == codecSelferValueTypeArray1234 {
			yyl3321 := r.ReadArrayStart()
			if yyl3321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3322Slc
	var yyhl3322 bool = l >= 0
	for yyj3322 := 0; ; yyj3322++ {
		if yyhl3322 {
			if yyj3322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3322Slc = r.DecodeBytes(yys3322Slc, true, true)
		yys3322 := string(yys3322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3322 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3330 := z.DecBinary()
				_ = yym3330
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3322)
		} // end switch yys3322
	} // end for yyj3322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3331 int
	var yyb3331 bool
	var yyhl3331 bool = l >= 0
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3331++
	if yyhl3331 {
		yyb3331 = yyj3331 > l
	} else {
		yyb3331 = r.CheckBreak()
	}
	if yyb3331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3339 := z.DecBinary()
		_ = yym3339
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3331++
		if yyhl3331 {
			yyb3331 = yyj3331 > l
		} else {
			yyb3331 = r.CheckBreak()
		}
		if yyb3331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3340 := z.EncBinary()
		_ = yym3340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3341 := !z.EncBinary()
			yy2arr3341 := z.EncBasicHandle().StructToArray
			var yyq3341 [10]bool
			_, _, _ = yysep3341, yyq3341, yy2arr3341
			const yyr3341 bool = false
			yyq3341[0] = x.Kind != ""
			yyq3341[1] = x.APIVersion != ""
			yyq3341[2] = x.Container != ""
			yyq3341[3] = x.Follow != false
			yyq3341[4] = x.Previous != false
			yyq3341[5] = x.SinceSeconds != nil
			yyq3341[6] = x.SinceTime != nil
			yyq3341[7] = x.Timestamps != false
			yyq3341[8] = x.TailLines != nil
			yyq3341[9] = x.LimitBytes != nil
			var yynn3341 int
			if yyr3341 || yy2arr3341 {
				r.EncodeArrayStart(10)
			} else {
				yynn3341 = 0
				for _, b := range yyq3341 {
					if b {
						yynn3341++
					}
				}
				r.EncodeMapStart(yynn3341)
				yynn3341 = 0
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[0] {
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3341[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3344 := z.EncBinary()
					_ = yym3344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[1] {
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3341[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[2] {
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3341[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3350 := z.EncBinary()
					_ = yym3350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[3] {
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3341[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[4] {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3341[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3358 := *x.SinceSeconds
						yym3359 := z.EncBinary()
						_ = yym3359
						if false {
						} else {
							r.EncodeInt(int64(yy3358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3341[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3360 := *x.SinceSeconds
						yym3361 := z.EncBinary()
						_ = yym3361
						if false {
						} else {
							r.EncodeInt(int64(yy3360))
						}
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3363 := z.EncBinary()
						_ = yym3363
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3363 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3363 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3341[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3364 := z.EncBinary()
						_ = yym3364
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3364 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3364 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[7] {
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3341[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3369 := *x.TailLines
						yym3370 := z.EncBinary()
						_ = yym3370
						if false {
						} else {
							r.EncodeInt(int64(yy3369))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3341[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3371 := *x.TailLines
						yym3372 := z.EncBinary()
						_ = yym3372
						if false {
						} else {
							r.EncodeInt(int64(yy3371))
						}
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3341[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3374 := *x.LimitBytes
						yym3375 := z.EncBinary()
						_ = yym3375
						if false {
						} else {
							r.EncodeInt(int64(yy3374))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3341[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3376 := *x.LimitBytes
						yym3377 := z.EncBinary()
						_ = yym3377
						if false {
						} else {
							r.EncodeInt(int64(yy3376))
						}
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3378 := z.DecBinary()
	_ = yym3378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3379 := r.ContainerType()
		if yyct3379 == codecSelferValueTypeMap1234 {
			yyl3379 := r.ReadMapStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3379, d)
			}
		} else if yyct3379 == codecSelferValueTypeArray1234 {
			yyl3379 := r.ReadArrayStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3380Slc
	var yyhl3380 bool = l >= 0
	for yyj3380 := 0; ; yyj3380++ {
		if yyhl3380 {
			if yyj3380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3380Slc = r.DecodeBytes(yys3380Slc, true, true)
		yys3380 := string(yys3380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3387 := z.DecBinary()
				_ = yym3387
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3389 := z.DecBinary()
				_ = yym3389
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3389 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3389 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3392 := z.DecBinary()
				_ = yym3392
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3394 := z.DecBinary()
				_ = yym3394
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3380)
		} // end switch yys3380
	} // end for yyj3380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3395 int
	var yyb3395 bool
	var yyhl3395 bool = l >= 0
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3402 := z.DecBinary()
		_ = yym3402
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3404 := z.DecBinary()
		_ = yym3404
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3404 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3404 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3407 := z.DecBinary()
		_ = yym3407
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3395++
	if yyhl3395 {
		yyb3395 = yyj3395 > l
	} else {
		yyb3395 = r.CheckBreak()
	}
	if yyb3395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3409 := z.DecBinary()
		_ = yym3409
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3395++
		if yyhl3395 {
			yyb3395 = yyj3395 > l
		} else {
			yyb3395 = r.CheckBreak()
		}
		if yyb3395 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3395-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3410 := z.EncBinary()
		_ = yym3410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3411 := !z.EncBinary()
			yy2arr3411 := z.EncBasicHandle().StructToArray
			var yyq3411 [7]bool
			_, _, _ = yysep3411, yyq3411, yy2arr3411
			const yyr3411 bool = false
			yyq3411[0] = x.Kind != ""
			yyq3411[1] = x.APIVersion != ""
			yyq3411[2] = x.Stdin != false
			yyq3411[3] = x.Stdout != false
			yyq3411[4] = x.Stderr != false
			yyq3411[5] = x.TTY != false
			yyq3411[6] = x.Container != ""
			var yynn3411 int
			if yyr3411 || yy2arr3411 {
				r.EncodeArrayStart(7)
			} else {
				yynn3411 = 0
				for _, b := range yyq3411 {
					if b {
						yynn3411++
					}
				}
				r.EncodeMapStart(yynn3411)
				yynn3411 = 0
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[0] {
					yym3413 := z.EncBinary()
					_ = yym3413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[1] {
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[2] {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[3] {
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3411[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[4] {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3411[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[5] {
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3411[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3411[6] {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3411[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3411 || yy2arr3411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3433 := z.DecBinary()
	_ = yym3433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3434 := r.ContainerType()
		if yyct3434 == codecSelferValueTypeMap1234 {
			yyl3434 := r.ReadMapStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3434, d)
			}
		} else if yyct3434 == codecSelferValueTypeArray1234 {
			yyl3434 := r.ReadArrayStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3435Slc
	var yyhl3435 bool = l >= 0
	for yyj3435 := 0; ; yyj3435++ {
		if yyhl3435 {
			if yyj3435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3435Slc = r.DecodeBytes(yys3435Slc, true, true)
		yys3435 := string(yys3435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3435 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3435)
		} // end switch yys3435
	} // end for yyj3435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3443 int
	var yyb3443 bool
	var yyhl3443 bool = l >= 0
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3443++
		if yyhl3443 {
			yyb3443 = yyj3443 > l
		} else {
			yyb3443 = r.CheckBreak()
		}
		if yyb3443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3451 := z.EncBinary()
		_ = yym3451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3452 := !z.EncBinary()
			yy2arr3452 := z.EncBasicHandle().StructToArray
			var yyq3452 [8]bool
			_, _, _ = yysep3452, yyq3452, yy2arr3452
			const yyr3452 bool = false
			yyq3452[0] = x.Kind != ""
			yyq3452[1] = x.APIVersion != ""
			yyq3452[2] = x.Stdin != false
			yyq3452[3] = x.Stdout != false
			yyq3452[4] = x.Stderr != false
			yyq3452[5] = x.TTY != false
			yyq3452[6] = x.Container != ""
			var yynn3452 int
			if yyr3452 || yy2arr3452 {
				r.EncodeArrayStart(8)
			} else {
				yynn3452 = 1
				for _, b := range yyq3452 {
					if b {
						yynn3452++
					}
				}
				r.EncodeMapStart(yynn3452)
				yynn3452 = 0
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[0] {
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[1] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[2] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[3] {
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3452[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[4] {
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3452[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[5] {
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3452[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3452[6] {
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3452[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3452 || yy2arr3452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3477 := z.DecBinary()
	_ = yym3477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3478 := r.ContainerType()
		if yyct3478 == codecSelferValueTypeMap1234 {
			yyl3478 := r.ReadMapStart()
			if yyl3478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3478, d)
			}
		} else if yyct3478 == codecSelferValueTypeArray1234 {
			yyl3478 := r.ReadArrayStart()
			if yyl3478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3479Slc
	var yyhl3479 bool = l >= 0
	for yyj3479 := 0; ; yyj3479++ {
		if yyhl3479 {
			if yyj3479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3479Slc = r.DecodeBytes(yys3479Slc, true, true)
		yys3479 := string(yys3479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3479 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3487 := &x.Command
				yym3488 := z.DecBinary()
				_ = yym3488
				if false {
				} else {
					z.F.DecSliceStringX(yyv3487, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3479)
		} // end switch yys3479
	} // end for yyj3479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3489 int
	var yyb3489 bool
	var yyhl3489 bool = l >= 0
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3489++
	if yyhl3489 {
		yyb3489 = yyj3489 > l
	} else {
		yyb3489 = r.CheckBreak()
	}
	if yyb3489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3497 := &x.Command
		yym3498 := z.DecBinary()
		_ = yym3498
		if false {
		} else {
			z.F.DecSliceStringX(yyv3497, false, d)
		}
	}
	for {
		yyj3489++
		if yyhl3489 {
			yyb3489 = yyj3489 > l
		} else {
			yyb3489 = r.CheckBreak()
		}
		if yyb3489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3499 := z.EncBinary()
		_ = yym3499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3500 := !z.EncBinary()
			yy2arr3500 := z.EncBasicHandle().StructToArray
			var yyq3500 [3]bool
			_, _, _ = yysep3500, yyq3500, yy2arr3500
			const yyr3500 bool = false
			yyq3500[0] = x.Kind != ""
			yyq3500[1] = x.APIVersion != ""
			yyq3500[2] = x.Path != ""
			var yynn3500 int
			if yyr3500 || yy2arr3500 {
				r.EncodeArrayStart(3)
			} else {
				yynn3500 = 0
				for _, b := range yyq3500 {
					if b {
						yynn3500++
					}
				}
				r.EncodeMapStart(yynn3500)
				yynn3500 = 0
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3500[0] {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3500[1] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3500[2] {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3500[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3510 := z.DecBinary()
	_ = yym3510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3511 := r.ContainerType()
		if yyct3511 == codecSelferValueTypeMap1234 {
			yyl3511 := r.ReadMapStart()
			if yyl3511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3511, d)
			}
		} else if yyct3511 == codecSelferValueTypeArray1234 {
			yyl3511 := r.ReadArrayStart()
			if yyl3511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3512Slc
	var yyhl3512 bool = l >= 0
	for yyj3512 := 0; ; yyj3512++ {
		if yyhl3512 {
			if yyj3512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3512Slc = r.DecodeBytes(yys3512Slc, true, true)
		yys3512 := string(yys3512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3512 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3512)
		} // end switch yys3512
	} // end for yyj3512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3516 int
	var yyb3516 bool
	var yyhl3516 bool = l >= 0
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3516++
		if yyhl3516 {
			yyb3516 = yyj3516 > l
		} else {
			yyb3516 = r.CheckBreak()
		}
		if yyb3516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3520 := z.EncBinary()
		_ = yym3520
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3521 := !z.EncBinary()
			yy2arr3521 := z.EncBasicHandle().StructToArray
			var yyq3521 [3]bool
			_, _, _ = yysep3521, yyq3521, yy2arr3521
			const yyr3521 bool = false
			yyq3521[0] = x.Kind != ""
			yyq3521[1] = x.APIVersion != ""
			yyq3521[2] = x.Path != ""
			var yynn3521 int
			if yyr3521 || yy2arr3521 {
				r.EncodeArrayStart(3)
			} else {
				yynn3521 = 0
				for _, b := range yyq3521 {
					if b {
						yynn3521++
					}
				}
				r.EncodeMapStart(yynn3521)
				yynn3521 = 0
			}
			if yyr3521 || yy2arr3521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3521[0] {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3521[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3521 || yy2arr3521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3521[1] {
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3521[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3521 || yy2arr3521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3521[2] {
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3521[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3530 := z.EncBinary()
					_ = yym3530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3521 || yy2arr3521 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3531 := z.DecBinary()
	_ = yym3531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3532 := r.ContainerType()
		if yyct3532 == codecSelferValueTypeMap1234 {
			yyl3532 := r.ReadMapStart()
			if yyl3532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3532, d)
			}
		} else if yyct3532 == codecSelferValueTypeArray1234 {
			yyl3532 := r.ReadArrayStart()
			if yyl3532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3533Slc
	var yyhl3533 bool = l >= 0
	for yyj3533 := 0; ; yyj3533++ {
		if yyhl3533 {
			if yyj3533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3533Slc = r.DecodeBytes(yys3533Slc, true, true)
		yys3533 := string(yys3533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3533 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3533)
		} // end switch yys3533
	} // end for yyj3533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3537 int
	var yyb3537 bool
	var yyhl3537 bool = l >= 0
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3537++
		if yyhl3537 {
			yyb3537 = yyj3537 > l
		} else {
			yyb3537 = r.CheckBreak()
		}
		if yyb3537 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3537-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3541 := z.EncBinary()
		_ = yym3541
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3542 := !z.EncBinary()
			yy2arr3542 := z.EncBasicHandle().StructToArray
			var yyq3542 [3]bool
			_, _, _ = yysep3542, yyq3542, yy2arr3542
			const yyr3542 bool = false
			yyq3542[0] = x.Kind != ""
			yyq3542[1] = x.APIVersion != ""
			yyq3542[2] = x.Path != ""
			var yynn3542 int
			if yyr3542 || yy2arr3542 {
				r.EncodeArrayStart(3)
			} else {
				yynn3542 = 0
				for _, b := range yyq3542 {
					if b {
						yynn3542++
					}
				}
				r.EncodeMapStart(yynn3542)
				yynn3542 = 0
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3542[0] {
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3542[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3545 := z.EncBinary()
					_ = yym3545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3542[1] {
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3542[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3542[2] {
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3542[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3552 := z.DecBinary()
	_ = yym3552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3553 := r.ContainerType()
		if yyct3553 == codecSelferValueTypeMap1234 {
			yyl3553 := r.ReadMapStart()
			if yyl3553 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3553, d)
			}
		} else if yyct3553 == codecSelferValueTypeArray1234 {
			yyl3553 := r.ReadArrayStart()
			if yyl3553 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3554Slc
	var yyhl3554 bool = l >= 0
	for yyj3554 := 0; ; yyj3554++ {
		if yyhl3554 {
			if yyj3554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3554Slc = r.DecodeBytes(yys3554Slc, true, true)
		yys3554 := string(yys3554Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3554 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3554)
		} // end switch yys3554
	} // end for yyj3554
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3558 int
	var yyb3558 bool
	var yyhl3558 bool = l >= 0
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3558++
		if yyhl3558 {
			yyb3558 = yyj3558 > l
		} else {
			yyb3558 = r.CheckBreak()
		}
		if yyb3558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3562 := z.EncBinary()
		_ = yym3562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3563 := !z.EncBinary()
			yy2arr3563 := z.EncBasicHandle().StructToArray
			var yyq3563 [5]bool
			_, _, _ = yysep3563, yyq3563, yy2arr3563
			const yyr3563 bool = false
			yyq3563[4] = x.Controller != nil
			var yynn3563 int
			if yyr3563 || yy2arr3563 {
				r.EncodeArrayStart(5)
			} else {
				yynn3563 = 4
				for _, b := range yyq3563 {
					if b {
						yynn3563++
					}
				}
				r.EncodeMapStart(yynn3563)
				yynn3563 = 0
			}
			if yyr3563 || yy2arr3563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3565 := z.EncBinary()
				_ = yym3565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3566 := z.EncBinary()
				_ = yym3566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3563 || yy2arr3563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3568 := z.EncBinary()
				_ = yym3568
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3569 := z.EncBinary()
				_ = yym3569
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3563 || yy2arr3563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3571 := z.EncBinary()
				_ = yym3571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3572 := z.EncBinary()
				_ = yym3572
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3563 || yy2arr3563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3574 := z.EncBinary()
				_ = yym3574
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3575 := z.EncBinary()
				_ = yym3575
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3563 || yy2arr3563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3563[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3577 := *x.Controller
						yym3578 := z.EncBinary()
						_ = yym3578
						if false {
						} else {
							r.EncodeBool(bool(yy3577))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3563[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3579 := *x.Controller
						yym3580 := z.EncBinary()
						_ = yym3580
						if false {
						} else {
							r.EncodeBool(bool(yy3579))
						}
					}
				}
			}
			if yyr3563 || yy2arr3563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3581 := z.DecBinary()
	_ = yym3581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3582 := r.ContainerType()
		if yyct3582 == codecSelferValueTypeMap1234 {
			yyl3582 := r.ReadMapStart()
			if yyl3582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3582, d)
			}
		} else if yyct3582 == codecSelferValueTypeArray1234 {
			yyl3582 := r.ReadArrayStart()
			if yyl3582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3583Slc
	var yyhl3583 bool = l >= 0
	for yyj3583 := 0; ; yyj3583++ {
		if yyhl3583 {
			if yyj3583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3583Slc = r.DecodeBytes(yys3583Slc, true, true)
		yys3583 := string(yys3583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3583 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3589 := z.DecBinary()
				_ = yym3589
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3583)
		} // end switch yys3583
	} // end for yyj3583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3590 int
	var yyb3590 bool
	var yyhl3590 bool = l >= 0
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3596 := z.DecBinary()
		_ = yym3596
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3590++
		if yyhl3590 {
			yyb3590 = yyj3590 > l
		} else {
			yyb3590 = r.CheckBreak()
		}
		if yyb3590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3597 := z.EncBinary()
		_ = yym3597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3598 := !z.EncBinary()
			yy2arr3598 := z.EncBasicHandle().StructToArray
			var yyq3598 [7]bool
			_, _, _ = yysep3598, yyq3598, yy2arr3598
			const yyr3598 bool = false
			yyq3598[0] = x.Kind != ""
			yyq3598[1] = x.Namespace != ""
			yyq3598[2] = x.Name != ""
			yyq3598[3] = x.UID != ""
			yyq3598[4] = x.APIVersion != ""
			yyq3598[5] = x.ResourceVersion != ""
			yyq3598[6] = x.FieldPath != ""
			var yynn3598 int
			if yyr3598 || yy2arr3598 {
				r.EncodeArrayStart(7)
			} else {
				yynn3598 = 0
				for _, b := range yyq3598 {
					if b {
						yynn3598++
					}
				}
				r.EncodeMapStart(yynn3598)
				yynn3598 = 0
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[0] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[1] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[2] {
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[3] {
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[4] {
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3613 := z.EncBinary()
					_ = yym3613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[5] {
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3616 := z.EncBinary()
					_ = yym3616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[6] {
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3620 := z.DecBinary()
	_ = yym3620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3621 := r.ContainerType()
		if yyct3621 == codecSelferValueTypeMap1234 {
			yyl3621 := r.ReadMapStart()
			if yyl3621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3621, d)
			}
		} else if yyct3621 == codecSelferValueTypeArray1234 {
			yyl3621 := r.ReadArrayStart()
			if yyl3621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3622Slc
	var yyhl3622 bool = l >= 0
	for yyj3622 := 0; ; yyj3622++ {
		if yyhl3622 {
			if yyj3622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3622Slc = r.DecodeBytes(yys3622Slc, true, true)
		yys3622 := string(yys3622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3622 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3622)
		} // end switch yys3622
	} // end for yyj3622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3630 int
	var yyb3630 bool
	var yyhl3630 bool = l >= 0
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3630++
	if yyhl3630 {
		yyb3630 = yyj3630 > l
	} else {
		yyb3630 = r.CheckBreak()
	}
	if yyb3630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3630++
		if yyhl3630 {
			yyb3630 = yyj3630 > l
		} else {
			yyb3630 = r.CheckBreak()
		}
		if yyb3630 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3630-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3638 := z.EncBinary()
		_ = yym3638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3639 := !z.EncBinary()
			yy2arr3639 := z.EncBasicHandle().StructToArray
			var yyq3639 [1]bool
			_, _, _ = yysep3639, yyq3639, yy2arr3639
			const yyr3639 bool = false
			yyq3639[0] = x.Name != ""
			var yynn3639 int
			if yyr3639 || yy2arr3639 {
				r.EncodeArrayStart(1)
			} else {
				yynn3639 = 0
				for _, b := range yyq3639 {
					if b {
						yynn3639++
					}
				}
				r.EncodeMapStart(yynn3639)
				yynn3639 = 0
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3639[0] {
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3639[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3639 || yy2arr3639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3643 := z.DecBinary()
	_ = yym3643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3644 := r.ContainerType()
		if yyct3644 == codecSelferValueTypeMap1234 {
			yyl3644 := r.ReadMapStart()
			if yyl3644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3644, d)
			}
		} else if yyct3644 == codecSelferValueTypeArray1234 {
			yyl3644 := r.ReadArrayStart()
			if yyl3644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3645Slc
	var yyhl3645 bool = l >= 0
	for yyj3645 := 0; ; yyj3645++ {
		if yyhl3645 {
			if yyj3645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3645Slc = r.DecodeBytes(yys3645Slc, true, true)
		yys3645 := string(yys3645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3645 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3645)
		} // end switch yys3645
	} // end for yyj3645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3647 int
	var yyb3647 bool
	var yyhl3647 bool = l >= 0
	yyj3647++
	if yyhl3647 {
		yyb3647 = yyj3647 > l
	} else {
		yyb3647 = r.CheckBreak()
	}
	if yyb3647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3647++
		if yyhl3647 {
			yyb3647 = yyj3647 > l
		} else {
			yyb3647 = r.CheckBreak()
		}
		if yyb3647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3649 := z.EncBinary()
		_ = yym3649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3650 := !z.EncBinary()
			yy2arr3650 := z.EncBasicHandle().StructToArray
			var yyq3650 [3]bool
			_, _, _ = yysep3650, yyq3650, yy2arr3650
			const yyr3650 bool = false
			yyq3650[0] = x.Kind != ""
			yyq3650[1] = x.APIVersion != ""
			yyq3650[2] = true
			var yynn3650 int
			if yyr3650 || yy2arr3650 {
				r.EncodeArrayStart(3)
			} else {
				yynn3650 = 0
				for _, b := range yyq3650 {
					if b {
						yynn3650++
					}
				}
				r.EncodeMapStart(yynn3650)
				yynn3650 = 0
			}
			if yyr3650 || yy2arr3650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3650[0] {
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3650[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3650 || yy2arr3650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3650[1] {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3650[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3650 || yy2arr3650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3650[2] {
					yy3658 := &x.Reference
					yy3658.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3650[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3659 := &x.Reference
					yy3659.CodecEncodeSelf(e)
				}
			}
			if yyr3650 || yy2arr3650 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3660 := z.DecBinary()
	_ = yym3660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3661 := r.ContainerType()
		if yyct3661 == codecSelferValueTypeMap1234 {
			yyl3661 := r.ReadMapStart()
			if yyl3661 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3661, d)
			}
		} else if yyct3661 == codecSelferValueTypeArray1234 {
			yyl3661 := r.ReadArrayStart()
			if yyl3661 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3662Slc
	var yyhl3662 bool = l >= 0
	for yyj3662 := 0; ; yyj3662++ {
		if yyhl3662 {
			if yyj3662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3662Slc = r.DecodeBytes(yys3662Slc, true, true)
		yys3662 := string(yys3662Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3662 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3665 := &x.Reference
				yyv3665.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3662)
		} // end switch yys3662
	} // end for yyj3662
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3666 int
	var yyb3666 bool
	var yyhl3666 bool = l >= 0
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3669 := &x.Reference
		yyv3669.CodecDecodeSelf(d)
	}
	for {
		yyj3666++
		if yyhl3666 {
			yyb3666 = yyj3666 > l
		} else {
			yyb3666 = r.CheckBreak()
		}
		if yyb3666 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3666-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3670 := z.EncBinary()
		_ = yym3670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3671 := !z.EncBinary()
			yy2arr3671 := z.EncBasicHandle().StructToArray
			var yyq3671 [2]bool
			_, _, _ = yysep3671, yyq3671, yy2arr3671
			const yyr3671 bool = false
			yyq3671[0] = x.Component != ""
			yyq3671[1] = x.Host != ""
			var yynn3671 int
			if yyr3671 || yy2arr3671 {
				r.EncodeArrayStart(2)
			} else {
				yynn3671 = 0
				for _, b := range yyq3671 {
					if b {
						yynn3671++
					}
				}
				r.EncodeMapStart(yynn3671)
				yynn3671 = 0
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3671[0] {
					yym3673 := z.EncBinary()
					_ = yym3673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3671[1] {
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3678 := z.DecBinary()
	_ = yym3678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3679 := r.ContainerType()
		if yyct3679 == codecSelferValueTypeMap1234 {
			yyl3679 := r.ReadMapStart()
			if yyl3679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3679, d)
			}
		} else if yyct3679 == codecSelferValueTypeArray1234 {
			yyl3679 := r.ReadArrayStart()
			if yyl3679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3680Slc
	var yyhl3680 bool = l >= 0
	for yyj3680 := 0; ; yyj3680++ {
		if yyhl3680 {
			if yyj3680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3680Slc = r.DecodeBytes(yys3680Slc, true, true)
		yys3680 := string(yys3680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3680 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3680)
		} // end switch yys3680
	} // end for yyj3680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3683 int
	var yyb3683 bool
	var yyhl3683 bool = l >= 0
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3683++
		if yyhl3683 {
			yyb3683 = yyj3683 > l
		} else {
			yyb3683 = r.CheckBreak()
		}
		if yyb3683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3686 := z.EncBinary()
		_ = yym3686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3687 := !z.EncBinary()
			yy2arr3687 := z.EncBasicHandle().StructToArray
			var yyq3687 [11]bool
			_, _, _ = yysep3687, yyq3687, yy2arr3687
			const yyr3687 bool = false
			yyq3687[0] = x.Kind != ""
			yyq3687[1] = x.APIVersion != ""
			yyq3687[4] = x.Reason != ""
			yyq3687[5] = x.Message != ""
			yyq3687[6] = true
			yyq3687[7] = true
			yyq3687[8] = true
			yyq3687[9] = x.Count != 0
			yyq3687[10] = x.Type != ""
			var yynn3687 int
			if yyr3687 || yy2arr3687 {
				r.EncodeArrayStart(11)
			} else {
				yynn3687 = 2
				for _, b := range yyq3687 {
					if b {
						yynn3687++
					}
				}
				r.EncodeMapStart(yynn3687)
				yynn3687 = 0
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[0] {
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[1] {
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3695 := &x.ObjectMeta
				yy3695.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3696 := &x.ObjectMeta
				yy3696.CodecEncodeSelf(e)
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3698 := &x.InvolvedObject
				yy3698.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3699 := &x.InvolvedObject
				yy3699.CodecEncodeSelf(e)
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[4] {
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3702 := z.EncBinary()
					_ = yym3702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[5] {
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[6] {
					yy3707 := &x.Source
					yy3707.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3687[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3708 := &x.Source
					yy3708.CodecEncodeSelf(e)
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[7] {
					yy3710 := &x.FirstTimestamp
					yym3711 := z.EncBinary()
					_ = yym3711
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3710) {
					} else if yym3711 {
						z.EncBinaryMarshal(yy3710)
					} else if !yym3711 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3710)
					} else {
						z.EncFallback(yy3710)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3687[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3712 := &x.FirstTimestamp
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3712) {
					} else if yym3713 {
						z.EncBinaryMarshal(yy3712)
					} else if !yym3713 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3712)
					} else {
						z.EncFallback(yy3712)
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[8] {
					yy3715 := &x.LastTimestamp
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3715) {
					} else if yym3716 {
						z.EncBinaryMarshal(yy3715)
					} else if !yym3716 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3715)
					} else {
						z.EncFallback(yy3715)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3687[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3717 := &x.LastTimestamp
					yym3718 := z.EncBinary()
					_ = yym3718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3717) {
					} else if yym3718 {
						z.EncBinaryMarshal(yy3717)
					} else if !yym3718 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3717)
					} else {
						z.EncFallback(yy3717)
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[9] {
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3687[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3687[10] {
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3687[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3725 := z.DecBinary()
	_ = yym3725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3726 := r.ContainerType()
		if yyct3726 == codecSelferValueTypeMap1234 {
			yyl3726 := r.ReadMapStart()
			if yyl3726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3726, d)
			}
		} else if yyct3726 == codecSelferValueTypeArray1234 {
			yyl3726 := r.ReadArrayStart()
			if yyl3726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3727Slc
	var yyhl3727 bool = l >= 0
	for yyj3727 := 0; ; yyj3727++ {
		if yyhl3727 {
			if yyj3727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3727Slc = r.DecodeBytes(yys3727Slc, true, true)
		yys3727 := string(yys3727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3727 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3730 := &x.ObjectMeta
				yyv3730.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3731 := &x.InvolvedObject
				yyv3731.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3734 := &x.Source
				yyv3734.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3735 := &x.FirstTimestamp
				yym3736 := z.DecBinary()
				_ = yym3736
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3735) {
				} else if yym3736 {
					z.DecBinaryUnmarshal(yyv3735)
				} else if !yym3736 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3735)
				} else {
					z.DecFallback(yyv3735, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3737 := &x.LastTimestamp
				yym3738 := z.DecBinary()
				_ = yym3738
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3737) {
				} else if yym3738 {
					z.DecBinaryUnmarshal(yyv3737)
				} else if !yym3738 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3737)
				} else {
					z.DecFallback(yyv3737, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3727)
		} // end switch yys3727
	} // end for yyj3727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3741 int
	var yyb3741 bool
	var yyhl3741 bool = l >= 0
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3744 := &x.ObjectMeta
		yyv3744.CodecDecodeSelf(d)
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3745 := &x.InvolvedObject
		yyv3745.CodecDecodeSelf(d)
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3748 := &x.Source
		yyv3748.CodecDecodeSelf(d)
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3749 := &x.FirstTimestamp
		yym3750 := z.DecBinary()
		_ = yym3750
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3749) {
		} else if yym3750 {
			z.DecBinaryUnmarshal(yyv3749)
		} else if !yym3750 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3749)
		} else {
			z.DecFallback(yyv3749, false)
		}
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3751 := &x.LastTimestamp
		yym3752 := z.DecBinary()
		_ = yym3752
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3751) {
		} else if yym3752 {
			z.DecBinaryUnmarshal(yyv3751)
		} else if !yym3752 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3751)
		} else {
			z.DecFallback(yyv3751, false)
		}
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3741++
	if yyhl3741 {
		yyb3741 = yyj3741 > l
	} else {
		yyb3741 = r.CheckBreak()
	}
	if yyb3741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3741++
		if yyhl3741 {
			yyb3741 = yyj3741 > l
		} else {
			yyb3741 = r.CheckBreak()
		}
		if yyb3741 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3741-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3755 := z.EncBinary()
		_ = yym3755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3756 := !z.EncBinary()
			yy2arr3756 := z.EncBasicHandle().StructToArray
			var yyq3756 [4]bool
			_, _, _ = yysep3756, yyq3756, yy2arr3756
			const yyr3756 bool = false
			yyq3756[0] = x.Kind != ""
			yyq3756[1] = x.APIVersion != ""
			yyq3756[2] = true
			var yynn3756 int
			if yyr3756 || yy2arr3756 {
				r.EncodeArrayStart(4)
			} else {
				yynn3756 = 1
				for _, b := range yyq3756 {
					if b {
						yynn3756++
					}
				}
				r.EncodeMapStart(yynn3756)
				yynn3756 = 0
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3756[0] {
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3756[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3756[1] {
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3756[2] {
					yy3764 := &x.ListMeta
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3764) {
					} else {
						z.EncFallback(yy3764)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3756[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3766 := &x.ListMeta
					yym3767 := z.EncBinary()
					_ = yym3767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3766) {
					} else {
						z.EncFallback(yy3766)
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3770 := z.EncBinary()
					_ = yym3770
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3756 || yy2arr3756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3771 := z.DecBinary()
	_ = yym3771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3772 := r.ContainerType()
		if yyct3772 == codecSelferValueTypeMap1234 {
			yyl3772 := r.ReadMapStart()
			if yyl3772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3772, d)
			}
		} else if yyct3772 == codecSelferValueTypeArray1234 {
			yyl3772 := r.ReadArrayStart()
			if yyl3772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3773Slc
	var yyhl3773 bool = l >= 0
	for yyj3773 := 0; ; yyj3773++ {
		if yyhl3773 {
			if yyj3773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3773Slc = r.DecodeBytes(yys3773Slc, true, true)
		yys3773 := string(yys3773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3773 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3776 := &x.ListMeta
				yym3777 := z.DecBinary()
				_ = yym3777
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3776) {
				} else {
					z.DecFallback(yyv3776, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3778 := &x.Items
				yym3779 := z.DecBinary()
				_ = yym3779
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3778), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3773)
		} // end switch yys3773
	} // end for yyj3773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3780 int
	var yyb3780 bool
	var yyhl3780 bool = l >= 0
	yyj3780++
	if yyhl3780 {
		yyb3780 = yyj3780 > l
	} else {
		yyb3780 = r.CheckBreak()
	}
	if yyb3780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3780++
	if yyhl3780 {
		yyb3780 = yyj3780 > l
	} else {
		yyb3780 = r.CheckBreak()
	}
	if yyb3780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3780++
	if yyhl3780 {
		yyb3780 = yyj3780 > l
	} else {
		yyb3780 = r.CheckBreak()
	}
	if yyb3780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3783 := &x.ListMeta
		yym3784 := z.DecBinary()
		_ = yym3784
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3783) {
		} else {
			z.DecFallback(yyv3783, false)
		}
	}
	yyj3780++
	if yyhl3780 {
		yyb3780 = yyj3780 > l
	} else {
		yyb3780 = r.CheckBreak()
	}
	if yyb3780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3785 := &x.Items
		yym3786 := z.DecBinary()
		_ = yym3786
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3785), d)
		}
	}
	for {
		yyj3780++
		if yyhl3780 {
			yyb3780 = yyj3780 > l
		} else {
			yyb3780 = r.CheckBreak()
		}
		if yyb3780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3787 := z.EncBinary()
		_ = yym3787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3788 := !z.EncBinary()
			yy2arr3788 := z.EncBasicHandle().StructToArray
			var yyq3788 [4]bool
			_, _, _ = yysep3788, yyq3788, yy2arr3788
			const yyr3788 bool = false
			yyq3788[0] = x.Kind != ""
			yyq3788[1] = x.APIVersion != ""
			yyq3788[2] = true
			var yynn3788 int
			if yyr3788 || yy2arr3788 {
				r.EncodeArrayStart(4)
			} else {
				yynn3788 = 1
				for _, b := range yyq3788 {
					if b {
						yynn3788++
					}
				}
				r.EncodeMapStart(yynn3788)
				yynn3788 = 0
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3788[0] {
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3788[1] {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3788[2] {
					yy3796 := &x.ListMeta
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3796) {
					} else {
						z.EncFallback(yy3796)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3798 := &x.ListMeta
					yym3799 := z.EncBinary()
					_ = yym3799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3798) {
					} else {
						z.EncFallback(yy3798)
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3801 := z.EncBinary()
					_ = yym3801
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3802 := z.EncBinary()
					_ = yym3802
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3803 := z.DecBinary()
	_ = yym3803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3804 := r.ContainerType()
		if yyct3804 == codecSelferValueTypeMap1234 {
			yyl3804 := r.ReadMapStart()
			if yyl3804 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3804, d)
			}
		} else if yyct3804 == codecSelferValueTypeArray1234 {
			yyl3804 := r.ReadArrayStart()
			if yyl3804 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3805Slc
	var yyhl3805 bool = l >= 0
	for yyj3805 := 0; ; yyj3805++ {
		if yyhl3805 {
			if yyj3805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3805Slc = r.DecodeBytes(yys3805Slc, true, true)
		yys3805 := string(yys3805Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3808 := &x.ListMeta
				yym3809 := z.DecBinary()
				_ = yym3809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3808) {
				} else {
					z.DecFallback(yyv3808, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3810 := &x.Items
				yym3811 := z.DecBinary()
				_ = yym3811
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3810), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3805)
		} // end switch yys3805
	} // end for yyj3805
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3812 int
	var yyb3812 bool
	var yyhl3812 bool = l >= 0
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3815 := &x.ListMeta
		yym3816 := z.DecBinary()
		_ = yym3816
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3815) {
		} else {
			z.DecFallback(yyv3815, false)
		}
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3817 := &x.Items
		yym3818 := z.DecBinary()
		_ = yym3818
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3817), d)
		}
	}
	for {
		yyj3812++
		if yyhl3812 {
			yyb3812 = yyj3812 > l
		} else {
			yyb3812 = r.CheckBreak()
		}
		if yyb3812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3819 := z.EncBinary()
	_ = yym3819
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3820 := z.DecBinary()
	_ = yym3820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3821 := z.EncBinary()
		_ = yym3821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3822 := !z.EncBinary()
			yy2arr3822 := z.EncBasicHandle().StructToArray
			var yyq3822 [6]bool
			_, _, _ = yysep3822, yyq3822, yy2arr3822
			const yyr3822 bool = false
			yyq3822[0] = x.Type != ""
			yyq3822[1] = len(x.Max) != 0
			yyq3822[2] = len(x.Min) != 0
			yyq3822[3] = len(x.Default) != 0
			yyq3822[4] = len(x.DefaultRequest) != 0
			yyq3822[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3822 int
			if yyr3822 || yy2arr3822 {
				r.EncodeArrayStart(6)
			} else {
				yynn3822 = 0
				for _, b := range yyq3822 {
					if b {
						yynn3822++
					}
				}
				r.EncodeMapStart(yynn3822)
				yynn3822 = 0
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3822[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3822[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3822[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3822[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3822 || yy2arr3822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3829 := z.DecBinary()
	_ = yym3829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3830 := r.ContainerType()
		if yyct3830 == codecSelferValueTypeMap1234 {
			yyl3830 := r.ReadMapStart()
			if yyl3830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3830, d)
			}
		} else if yyct3830 == codecSelferValueTypeArray1234 {
			yyl3830 := r.ReadArrayStart()
			if yyl3830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3831Slc
	var yyhl3831 bool = l >= 0
	for yyj3831 := 0; ; yyj3831++ {
		if yyhl3831 {
			if yyj3831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3831Slc = r.DecodeBytes(yys3831Slc, true, true)
		yys3831 := string(yys3831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3831 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3833 := &x.Max
				yyv3833.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3834 := &x.Min
				yyv3834.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3835 := &x.Default
				yyv3835.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3836 := &x.DefaultRequest
				yyv3836.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3837 := &x.MaxLimitRequestRatio
				yyv3837.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3831)
		} // end switch yys3831
	} // end for yyj3831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3838 int
	var yyb3838 bool
	var yyhl3838 bool = l >= 0
	yyj3838++
	if yyhl3838 {
		yyb3838 = yyj3838 > l
	} else {
		yyb3838 = r.CheckBreak()
	}
	if yyb3838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3838++
	if yyhl3838 {
		yyb3838 = yyj3838 > l
	} else {
		yyb3838 = r.CheckBreak()
	}
	if yyb3838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3840 := &x.Max
		yyv3840.CodecDecodeSelf(d)
	}
	yyj3838++
	if yyhl3838 {
		yyb3838 = yyj3838 > l
	} else {
		yyb3838 = r.CheckBreak()
	}
	if yyb3838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3841 := &x.Min
		yyv3841.CodecDecodeSelf(d)
	}
	yyj3838++
	if yyhl3838 {
		yyb3838 = yyj3838 > l
	} else {
		yyb3838 = r.CheckBreak()
	}
	if yyb3838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3842 := &x.Default
		yyv3842.CodecDecodeSelf(d)
	}
	yyj3838++
	if yyhl3838 {
		yyb3838 = yyj3838 > l
	} else {
		yyb3838 = r.CheckBreak()
	}
	if yyb3838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3843 := &x.DefaultRequest
		yyv3843.CodecDecodeSelf(d)
	}
	yyj3838++
	if yyhl3838 {
		yyb3838 = yyj3838 > l
	} else {
		yyb3838 = r.CheckBreak()
	}
	if yyb3838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3844 := &x.MaxLimitRequestRatio
		yyv3844.CodecDecodeSelf(d)
	}
	for {
		yyj3838++
		if yyhl3838 {
			yyb3838 = yyj3838 > l
		} else {
			yyb3838 = r.CheckBreak()
		}
		if yyb3838 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3838-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3845 := z.EncBinary()
		_ = yym3845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3846 := !z.EncBinary()
			yy2arr3846 := z.EncBasicHandle().StructToArray
			var yyq3846 [1]bool
			_, _, _ = yysep3846, yyq3846, yy2arr3846
			const yyr3846 bool = false
			var yynn3846 int
			if yyr3846 || yy2arr3846 {
				r.EncodeArrayStart(1)
			} else {
				yynn3846 = 1
				for _, b := range yyq3846 {
					if b {
						yynn3846++
					}
				}
				r.EncodeMapStart(yynn3846)
				yynn3846 = 0
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3848 := z.EncBinary()
					_ = yym3848
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3846 || yy2arr3846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3850 := z.DecBinary()
	_ = yym3850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3851 := r.ContainerType()
		if yyct3851 == codecSelferValueTypeMap1234 {
			yyl3851 := r.ReadMapStart()
			if yyl3851 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3851, d)
			}
		} else if yyct3851 == codecSelferValueTypeArray1234 {
			yyl3851 := r.ReadArrayStart()
			if yyl3851 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3851, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3852Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3852Slc
	var yyhl3852 bool = l >= 0
	for yyj3852 := 0; ; yyj3852++ {
		if yyhl3852 {
			if yyj3852 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3852Slc = r.DecodeBytes(yys3852Slc, true, true)
		yys3852 := string(yys3852Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3852 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3853 := &x.Limits
				yym3854 := z.DecBinary()
				_ = yym3854
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3853), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3852)
		} // end switch yys3852
	} // end for yyj3852
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3855 int
	var yyb3855 bool
	var yyhl3855 bool = l >= 0
	yyj3855++
	if yyhl3855 {
		yyb3855 = yyj3855 > l
	} else {
		yyb3855 = r.CheckBreak()
	}
	if yyb3855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3856 := &x.Limits
		yym3857 := z.DecBinary()
		_ = yym3857
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3856), d)
		}
	}
	for {
		yyj3855++
		if yyhl3855 {
			yyb3855 = yyj3855 > l
		} else {
			yyb3855 = r.CheckBreak()
		}
		if yyb3855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3858 := z.EncBinary()
		_ = yym3858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3859 := !z.EncBinary()
			yy2arr3859 := z.EncBasicHandle().StructToArray
			var yyq3859 [4]bool
			_, _, _ = yysep3859, yyq3859, yy2arr3859
			const yyr3859 bool = false
			yyq3859[0] = x.Kind != ""
			yyq3859[1] = x.APIVersion != ""
			yyq3859[2] = true
			yyq3859[3] = true
			var yynn3859 int
			if yyr3859 || yy2arr3859 {
				r.EncodeArrayStart(4)
			} else {
				yynn3859 = 0
				for _, b := range yyq3859 {
					if b {
						yynn3859++
					}
				}
				r.EncodeMapStart(yynn3859)
				yynn3859 = 0
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[0] {
					yym3861 := z.EncBinary()
					_ = yym3861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[1] {
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[2] {
					yy3867 := &x.ObjectMeta
					yy3867.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3868 := &x.ObjectMeta
					yy3868.CodecEncodeSelf(e)
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3859[3] {
					yy3870 := &x.Spec
					yy3870.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3859[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3871 := &x.Spec
					yy3871.CodecEncodeSelf(e)
				}
			}
			if yyr3859 || yy2arr3859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3872 := z.DecBinary()
	_ = yym3872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3873 := r.ContainerType()
		if yyct3873 == codecSelferValueTypeMap1234 {
			yyl3873 := r.ReadMapStart()
			if yyl3873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3873, d)
			}
		} else if yyct3873 == codecSelferValueTypeArray1234 {
			yyl3873 := r.ReadArrayStart()
			if yyl3873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3874Slc
	var yyhl3874 bool = l >= 0
	for yyj3874 := 0; ; yyj3874++ {
		if yyhl3874 {
			if yyj3874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3874Slc = r.DecodeBytes(yys3874Slc, true, true)
		yys3874 := string(yys3874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3874 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3877 := &x.ObjectMeta
				yyv3877.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3878 := &x.Spec
				yyv3878.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3874)
		} // end switch yys3874
	} // end for yyj3874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3879 int
	var yyb3879 bool
	var yyhl3879 bool = l >= 0
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3882 := &x.ObjectMeta
		yyv3882.CodecDecodeSelf(d)
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3883 := &x.Spec
		yyv3883.CodecDecodeSelf(d)
	}
	for {
		yyj3879++
		if yyhl3879 {
			yyb3879 = yyj3879 > l
		} else {
			yyb3879 = r.CheckBreak()
		}
		if yyb3879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3884 := z.EncBinary()
		_ = yym3884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3885 := !z.EncBinary()
			yy2arr3885 := z.EncBasicHandle().StructToArray
			var yyq3885 [4]bool
			_, _, _ = yysep3885, yyq3885, yy2arr3885
			const yyr3885 bool = false
			yyq3885[0] = x.Kind != ""
			yyq3885[1] = x.APIVersion != ""
			yyq3885[2] = true
			var yynn3885 int
			if yyr3885 || yy2arr3885 {
				r.EncodeArrayStart(4)
			} else {
				yynn3885 = 1
				for _, b := range yyq3885 {
					if b {
						yynn3885++
					}
				}
				r.EncodeMapStart(yynn3885)
				yynn3885 = 0
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3885[0] {
					yym3887 := z.EncBinary()
					_ = yym3887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3885[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3885[1] {
					yym3890 := z.EncBinary()
					_ = yym3890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3885[2] {
					yy3893 := &x.ListMeta
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3893) {
					} else {
						z.EncFallback(yy3893)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3885[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3895 := &x.ListMeta
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3895) {
					} else {
						z.EncFallback(yy3895)
					}
				}
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3885 || yy2arr3885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3900 := z.DecBinary()
	_ = yym3900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3901 := r.ContainerType()
		if yyct3901 == codecSelferValueTypeMap1234 {
			yyl3901 := r.ReadMapStart()
			if yyl3901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3901, d)
			}
		} else if yyct3901 == codecSelferValueTypeArray1234 {
			yyl3901 := r.ReadArrayStart()
			if yyl3901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3902Slc
	var yyhl3902 bool = l >= 0
	for yyj3902 := 0; ; yyj3902++ {
		if yyhl3902 {
			if yyj3902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3902Slc = r.DecodeBytes(yys3902Slc, true, true)
		yys3902 := string(yys3902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3902 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3905 := &x.ListMeta
				yym3906 := z.DecBinary()
				_ = yym3906
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3905) {
				} else {
					z.DecFallback(yyv3905, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3907 := &x.Items
				yym3908 := z.DecBinary()
				_ = yym3908
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3907), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3902)
		} // end switch yys3902
	} // end for yyj3902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3909 int
	var yyb3909 bool
	var yyhl3909 bool = l >= 0
	yyj3909++
	if yyhl3909 {
		yyb3909 = yyj3909 > l
	} else {
		yyb3909 = r.CheckBreak()
	}
	if yyb3909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3909++
	if yyhl3909 {
		yyb3909 = yyj3909 > l
	} else {
		yyb3909 = r.CheckBreak()
	}
	if yyb3909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3909++
	if yyhl3909 {
		yyb3909 = yyj3909 > l
	} else {
		yyb3909 = r.CheckBreak()
	}
	if yyb3909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3912 := &x.ListMeta
		yym3913 := z.DecBinary()
		_ = yym3913
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3912) {
		} else {
			z.DecFallback(yyv3912, false)
		}
	}
	yyj3909++
	if yyhl3909 {
		yyb3909 = yyj3909 > l
	} else {
		yyb3909 = r.CheckBreak()
	}
	if yyb3909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3914 := &x.Items
		yym3915 := z.DecBinary()
		_ = yym3915
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3914), d)
		}
	}
	for {
		yyj3909++
		if yyhl3909 {
			yyb3909 = yyj3909 > l
		} else {
			yyb3909 = r.CheckBreak()
		}
		if yyb3909 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3909-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3916 := z.EncBinary()
	_ = yym3916
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3917 := z.DecBinary()
	_ = yym3917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3918 := z.EncBinary()
		_ = yym3918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3919 := !z.EncBinary()
			yy2arr3919 := z.EncBasicHandle().StructToArray
			var yyq3919 [2]bool
			_, _, _ = yysep3919, yyq3919, yy2arr3919
			const yyr3919 bool = false
			yyq3919[0] = len(x.Hard) != 0
			yyq3919[1] = len(x.Scopes) != 0
			var yynn3919 int
			if yyr3919 || yy2arr3919 {
				r.EncodeArrayStart(2)
			} else {
				yynn3919 = 0
				for _, b := range yyq3919 {
					if b {
						yynn3919++
					}
				}
				r.EncodeMapStart(yynn3919)
				yynn3919 = 0
			}
			if yyr3919 || yy2arr3919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3919[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3919[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3919 || yy2arr3919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3919[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3922 := z.EncBinary()
						_ = yym3922
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3919[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3923 := z.EncBinary()
						_ = yym3923
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3919 || yy2arr3919 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3924 := z.DecBinary()
	_ = yym3924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3925 := r.ContainerType()
		if yyct3925 == codecSelferValueTypeMap1234 {
			yyl3925 := r.ReadMapStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3925, d)
			}
		} else if yyct3925 == codecSelferValueTypeArray1234 {
			yyl3925 := r.ReadArrayStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3926Slc
	var yyhl3926 bool = l >= 0
	for yyj3926 := 0; ; yyj3926++ {
		if yyhl3926 {
			if yyj3926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3926Slc = r.DecodeBytes(yys3926Slc, true, true)
		yys3926 := string(yys3926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3926 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3927 := &x.Hard
				yyv3927.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3928 := &x.Scopes
				yym3929 := z.DecBinary()
				_ = yym3929
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3928), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3926)
		} // end switch yys3926
	} // end for yyj3926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3930 int
	var yyb3930 bool
	var yyhl3930 bool = l >= 0
	yyj3930++
	if yyhl3930 {
		yyb3930 = yyj3930 > l
	} else {
		yyb3930 = r.CheckBreak()
	}
	if yyb3930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3931 := &x.Hard
		yyv3931.CodecDecodeSelf(d)
	}
	yyj3930++
	if yyhl3930 {
		yyb3930 = yyj3930 > l
	} else {
		yyb3930 = r.CheckBreak()
	}
	if yyb3930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3932 := &x.Scopes
		yym3933 := z.DecBinary()
		_ = yym3933
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3932), d)
		}
	}
	for {
		yyj3930++
		if yyhl3930 {
			yyb3930 = yyj3930 > l
		} else {
			yyb3930 = r.CheckBreak()
		}
		if yyb3930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3934 := z.EncBinary()
		_ = yym3934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3935 := !z.EncBinary()
			yy2arr3935 := z.EncBasicHandle().StructToArray
			var yyq3935 [2]bool
			_, _, _ = yysep3935, yyq3935, yy2arr3935
			const yyr3935 bool = false
			yyq3935[0] = len(x.Hard) != 0
			yyq3935[1] = len(x.Used) != 0
			var yynn3935 int
			if yyr3935 || yy2arr3935 {
				r.EncodeArrayStart(2)
			} else {
				yynn3935 = 0
				for _, b := range yyq3935 {
					if b {
						yynn3935++
					}
				}
				r.EncodeMapStart(yynn3935)
				yynn3935 = 0
			}
			if yyr3935 || yy2arr3935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3935[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3935[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3935 || yy2arr3935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3935[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3935[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3935 || yy2arr3935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3938 := z.DecBinary()
	_ = yym3938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3939 := r.ContainerType()
		if yyct3939 == codecSelferValueTypeMap1234 {
			yyl3939 := r.ReadMapStart()
			if yyl3939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3939, d)
			}
		} else if yyct3939 == codecSelferValueTypeArray1234 {
			yyl3939 := r.ReadArrayStart()
			if yyl3939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3940Slc
	var yyhl3940 bool = l >= 0
	for yyj3940 := 0; ; yyj3940++ {
		if yyhl3940 {
			if yyj3940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3940Slc = r.DecodeBytes(yys3940Slc, true, true)
		yys3940 := string(yys3940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3940 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3941 := &x.Hard
				yyv3941.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3942 := &x.Used
				yyv3942.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3940)
		} // end switch yys3940
	} // end for yyj3940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3943 int
	var yyb3943 bool
	var yyhl3943 bool = l >= 0
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3944 := &x.Hard
		yyv3944.CodecDecodeSelf(d)
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3945 := &x.Used
		yyv3945.CodecDecodeSelf(d)
	}
	for {
		yyj3943++
		if yyhl3943 {
			yyb3943 = yyj3943 > l
		} else {
			yyb3943 = r.CheckBreak()
		}
		if yyb3943 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3943-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3946 := z.EncBinary()
		_ = yym3946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3947 := !z.EncBinary()
			yy2arr3947 := z.EncBasicHandle().StructToArray
			var yyq3947 [5]bool
			_, _, _ = yysep3947, yyq3947, yy2arr3947
			const yyr3947 bool = false
			yyq3947[0] = x.Kind != ""
			yyq3947[1] = x.APIVersion != ""
			yyq3947[2] = true
			yyq3947[3] = true
			yyq3947[4] = true
			var yynn3947 int
			if yyr3947 || yy2arr3947 {
				r.EncodeArrayStart(5)
			} else {
				yynn3947 = 0
				for _, b := range yyq3947 {
					if b {
						yynn3947++
					}
				}
				r.EncodeMapStart(yynn3947)
				yynn3947 = 0
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[0] {
					yym3949 := z.EncBinary()
					_ = yym3949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[1] {
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3947[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3953 := z.EncBinary()
					_ = yym3953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[2] {
					yy3955 := &x.ObjectMeta
					yy3955.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3947[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3956 := &x.ObjectMeta
					yy3956.CodecEncodeSelf(e)
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[3] {
					yy3958 := &x.Spec
					yy3958.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3947[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3959 := &x.Spec
					yy3959.CodecEncodeSelf(e)
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[4] {
					yy3961 := &x.Status
					yy3961.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3947[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3962 := &x.Status
					yy3962.CodecEncodeSelf(e)
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3963 := z.DecBinary()
	_ = yym3963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3964 := r.ContainerType()
		if yyct3964 == codecSelferValueTypeMap1234 {
			yyl3964 := r.ReadMapStart()
			if yyl3964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3964, d)
			}
		} else if yyct3964 == codecSelferValueTypeArray1234 {
			yyl3964 := r.ReadArrayStart()
			if yyl3964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3965Slc
	var yyhl3965 bool = l >= 0
	for yyj3965 := 0; ; yyj3965++ {
		if yyhl3965 {
			if yyj3965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3965Slc = r.DecodeBytes(yys3965Slc, true, true)
		yys3965 := string(yys3965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3965 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3968 := &x.ObjectMeta
				yyv3968.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3969 := &x.Spec
				yyv3969.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3970 := &x.Status
				yyv3970.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3965)
		} // end switch yys3965
	} // end for yyj3965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3971 int
	var yyb3971 bool
	var yyhl3971 bool = l >= 0
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3974 := &x.ObjectMeta
		yyv3974.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3975 := &x.Spec
		yyv3975.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3976 := &x.Status
		yyv3976.CodecDecodeSelf(d)
	}
	for {
		yyj3971++
		if yyhl3971 {
			yyb3971 = yyj3971 > l
		} else {
			yyb3971 = r.CheckBreak()
		}
		if yyb3971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3977 := z.EncBinary()
		_ = yym3977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3978 := !z.EncBinary()
			yy2arr3978 := z.EncBasicHandle().StructToArray
			var yyq3978 [4]bool
			_, _, _ = yysep3978, yyq3978, yy2arr3978
			const yyr3978 bool = false
			yyq3978[0] = x.Kind != ""
			yyq3978[1] = x.APIVersion != ""
			yyq3978[2] = true
			var yynn3978 int
			if yyr3978 || yy2arr3978 {
				r.EncodeArrayStart(4)
			} else {
				yynn3978 = 1
				for _, b := range yyq3978 {
					if b {
						yynn3978++
					}
				}
				r.EncodeMapStart(yynn3978)
				yynn3978 = 0
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3978[0] {
					yym3980 := z.EncBinary()
					_ = yym3980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3981 := z.EncBinary()
					_ = yym3981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3978[1] {
					yym3983 := z.EncBinary()
					_ = yym3983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3984 := z.EncBinary()
					_ = yym3984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3978[2] {
					yy3986 := &x.ListMeta
					yym3987 := z.EncBinary()
					_ = yym3987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3986) {
					} else {
						z.EncFallback(yy3986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3978[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3988 := &x.ListMeta
					yym3989 := z.EncBinary()
					_ = yym3989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3988) {
					} else {
						z.EncFallback(yy3988)
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3991 := z.EncBinary()
					_ = yym3991
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3992 := z.EncBinary()
					_ = yym3992
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3978 || yy2arr3978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3993 := z.DecBinary()
	_ = yym3993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3994 := r.ContainerType()
		if yyct3994 == codecSelferValueTypeMap1234 {
			yyl3994 := r.ReadMapStart()
			if yyl3994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3994, d)
			}
		} else if yyct3994 == codecSelferValueTypeArray1234 {
			yyl3994 := r.ReadArrayStart()
			if yyl3994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3995Slc
	var yyhl3995 bool = l >= 0
	for yyj3995 := 0; ; yyj3995++ {
		if yyhl3995 {
			if yyj3995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3995Slc = r.DecodeBytes(yys3995Slc, true, true)
		yys3995 := string(yys3995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3995 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3998 := &x.ListMeta
				yym3999 := z.DecBinary()
				_ = yym3999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3998) {
				} else {
					z.DecFallback(yyv3998, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4000 := &x.Items
				yym4001 := z.DecBinary()
				_ = yym4001
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3995)
		} // end switch yys3995
	} // end for yyj3995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4002 int
	var yyb4002 bool
	var yyhl4002 bool = l >= 0
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4005 := &x.ListMeta
		yym4006 := z.DecBinary()
		_ = yym4006
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4005) {
		} else {
			z.DecFallback(yyv4005, false)
		}
	}
	yyj4002++
	if yyhl4002 {
		yyb4002 = yyj4002 > l
	} else {
		yyb4002 = r.CheckBreak()
	}
	if yyb4002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4007 := &x.Items
		yym4008 := z.DecBinary()
		_ = yym4008
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4007), d)
		}
	}
	for {
		yyj4002++
		if yyhl4002 {
			yyb4002 = yyj4002 > l
		} else {
			yyb4002 = r.CheckBreak()
		}
		if yyb4002 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4002-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4009 := z.EncBinary()
		_ = yym4009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4010 := !z.EncBinary()
			yy2arr4010 := z.EncBasicHandle().StructToArray
			var yyq4010 [6]bool
			_, _, _ = yysep4010, yyq4010, yy2arr4010
			const yyr4010 bool = false
			yyq4010[0] = x.Kind != ""
			yyq4010[1] = x.APIVersion != ""
			yyq4010[2] = true
			yyq4010[3] = len(x.Data) != 0
			yyq4010[4] = len(x.StringData) != 0
			yyq4010[5] = x.Type != ""
			var yynn4010 int
			if yyr4010 || yy2arr4010 {
				r.EncodeArrayStart(6)
			} else {
				yynn4010 = 0
				for _, b := range yyq4010 {
					if b {
						yynn4010++
					}
				}
				r.EncodeMapStart(yynn4010)
				yynn4010 = 0
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[0] {
					yym4012 := z.EncBinary()
					_ = yym4012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4013 := z.EncBinary()
					_ = yym4013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[1] {
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[2] {
					yy4018 := &x.ObjectMeta
					yy4018.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4010[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4019 := &x.ObjectMeta
					yy4019.CodecEncodeSelf(e)
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4021 := z.EncBinary()
						_ = yym4021
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4010[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4022 := z.EncBinary()
						_ = yym4022
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4024 := z.EncBinary()
						_ = yym4024
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4010[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4025 := z.EncBinary()
						_ = yym4025
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4027 := z.DecBinary()
	_ = yym4027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4028 := r.ContainerType()
		if yyct4028 == codecSelferValueTypeMap1234 {
			yyl4028 := r.ReadMapStart()
			if yyl4028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4028, d)
			}
		} else if yyct4028 == codecSelferValueTypeArray1234 {
			yyl4028 := r.ReadArrayStart()
			if yyl4028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4029Slc
	var yyhl4029 bool = l >= 0
	for yyj4029 := 0; ; yyj4029++ {
		if yyhl4029 {
			if yyj4029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4029Slc = r.DecodeBytes(yys4029Slc, true, true)
		yys4029 := string(yys4029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4029 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4032 := &x.ObjectMeta
				yyv4032.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4033 := &x.Data
				yym4034 := z.DecBinary()
				_ = yym4034
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4033), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4035 := &x.StringData
				yym4036 := z.DecBinary()
				_ = yym4036
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4035, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4029)
		} // end switch yys4029
	} // end for yyj4029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4038 int
	var yyb4038 bool
	var yyhl4038 bool = l >= 0
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4041 := &x.ObjectMeta
		yyv4041.CodecDecodeSelf(d)
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4042 := &x.Data
		yym4043 := z.DecBinary()
		_ = yym4043
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4042), d)
		}
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4044 := &x.StringData
		yym4045 := z.DecBinary()
		_ = yym4045
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4044, false, d)
		}
	}
	yyj4038++
	if yyhl4038 {
		yyb4038 = yyj4038 > l
	} else {
		yyb4038 = r.CheckBreak()
	}
	if yyb4038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4038++
		if yyhl4038 {
			yyb4038 = yyj4038 > l
		} else {
			yyb4038 = r.CheckBreak()
		}
		if yyb4038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4047 := z.EncBinary()
	_ = yym4047
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4048 := z.DecBinary()
	_ = yym4048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4049 := z.EncBinary()
		_ = yym4049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4050 := !z.EncBinary()
			yy2arr4050 := z.EncBasicHandle().StructToArray
			var yyq4050 [4]bool
			_, _, _ = yysep4050, yyq4050, yy2arr4050
			const yyr4050 bool = false
			yyq4050[0] = x.Kind != ""
			yyq4050[1] = x.APIVersion != ""
			yyq4050[2] = true
			var yynn4050 int
			if yyr4050 || yy2arr4050 {
				r.EncodeArrayStart(4)
			} else {
				yynn4050 = 1
				for _, b := range yyq4050 {
					if b {
						yynn4050++
					}
				}
				r.EncodeMapStart(yynn4050)
				yynn4050 = 0
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[0] {
					yym4052 := z.EncBinary()
					_ = yym4052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4050[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4053 := z.EncBinary()
					_ = yym4053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[1] {
					yym4055 := z.EncBinary()
					_ = yym4055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4050[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4056 := z.EncBinary()
					_ = yym4056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4050[2] {
					yy4058 := &x.ListMeta
					yym4059 := z.EncBinary()
					_ = yym4059
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4058) {
					} else {
						z.EncFallback(yy4058)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4050[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4060 := &x.ListMeta
					yym4061 := z.EncBinary()
					_ = yym4061
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4060) {
					} else {
						z.EncFallback(yy4060)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4063 := z.EncBinary()
					_ = yym4063
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4050 || yy2arr4050 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4065 := z.DecBinary()
	_ = yym4065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4066 := r.ContainerType()
		if yyct4066 == codecSelferValueTypeMap1234 {
			yyl4066 := r.ReadMapStart()
			if yyl4066 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4066, d)
			}
		} else if yyct4066 == codecSelferValueTypeArray1234 {
			yyl4066 := r.ReadArrayStart()
			if yyl4066 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4067Slc
	var yyhl4067 bool = l >= 0
	for yyj4067 := 0; ; yyj4067++ {
		if yyhl4067 {
			if yyj4067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4067Slc = r.DecodeBytes(yys4067Slc, true, true)
		yys4067 := string(yys4067Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4067 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4070 := &x.ListMeta
				yym4071 := z.DecBinary()
				_ = yym4071
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4070) {
				} else {
					z.DecFallback(yyv4070, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4072 := &x.Items
				yym4073 := z.DecBinary()
				_ = yym4073
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4072), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4067)
		} // end switch yys4067
	} // end for yyj4067
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4074 int
	var yyb4074 bool
	var yyhl4074 bool = l >= 0
	yyj4074++
	if yyhl4074 {
		yyb4074 = yyj4074 > l
	} else {
		yyb4074 = r.CheckBreak()
	}
	if yyb4074 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4074++
	if yyhl4074 {
		yyb4074 = yyj4074 > l
	} else {
		yyb4074 = r.CheckBreak()
	}
	if yyb4074 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4074++
	if yyhl4074 {
		yyb4074 = yyj4074 > l
	} else {
		yyb4074 = r.CheckBreak()
	}
	if yyb4074 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4077 := &x.ListMeta
		yym4078 := z.DecBinary()
		_ = yym4078
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4077) {
		} else {
			z.DecFallback(yyv4077, false)
		}
	}
	yyj4074++
	if yyhl4074 {
		yyb4074 = yyj4074 > l
	} else {
		yyb4074 = r.CheckBreak()
	}
	if yyb4074 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4079 := &x.Items
		yym4080 := z.DecBinary()
		_ = yym4080
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4079), d)
		}
	}
	for {
		yyj4074++
		if yyhl4074 {
			yyb4074 = yyj4074 > l
		} else {
			yyb4074 = r.CheckBreak()
		}
		if yyb4074 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4074-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4081 := z.EncBinary()
		_ = yym4081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4082 := !z.EncBinary()
			yy2arr4082 := z.EncBasicHandle().StructToArray
			var yyq4082 [4]bool
			_, _, _ = yysep4082, yyq4082, yy2arr4082
			const yyr4082 bool = false
			yyq4082[0] = x.Kind != ""
			yyq4082[1] = x.APIVersion != ""
			yyq4082[2] = true
			yyq4082[3] = len(x.Data) != 0
			var yynn4082 int
			if yyr4082 || yy2arr4082 {
				r.EncodeArrayStart(4)
			} else {
				yynn4082 = 0
				for _, b := range yyq4082 {
					if b {
						yynn4082++
					}
				}
				r.EncodeMapStart(yynn4082)
				yynn4082 = 0
			}
			if yyr4082 || yy2arr4082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4082[0] {
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4082 || yy2arr4082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4082[1] {
					yym4087 := z.EncBinary()
					_ = yym4087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4082[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4088 := z.EncBinary()
					_ = yym4088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4082 || yy2arr4082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4082[2] {
					yy4090 := &x.ObjectMeta
					yy4090.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4082[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4091 := &x.ObjectMeta
					yy4091.CodecEncodeSelf(e)
				}
			}
			if yyr4082 || yy2arr4082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4082[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4093 := z.EncBinary()
						_ = yym4093
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4082[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4094 := z.EncBinary()
						_ = yym4094
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4082 || yy2arr4082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4095 := z.DecBinary()
	_ = yym4095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4096 := r.ContainerType()
		if yyct4096 == codecSelferValueTypeMap1234 {
			yyl4096 := r.ReadMapStart()
			if yyl4096 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4096, d)
			}
		} else if yyct4096 == codecSelferValueTypeArray1234 {
			yyl4096 := r.ReadArrayStart()
			if yyl4096 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4097Slc
	var yyhl4097 bool = l >= 0
	for yyj4097 := 0; ; yyj4097++ {
		if yyhl4097 {
			if yyj4097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4097Slc = r.DecodeBytes(yys4097Slc, true, true)
		yys4097 := string(yys4097Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4097 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4100 := &x.ObjectMeta
				yyv4100.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4101 := &x.Data
				yym4102 := z.DecBinary()
				_ = yym4102
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4101, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4097)
		} // end switch yys4097
	} // end for yyj4097
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4103 int
	var yyb4103 bool
	var yyhl4103 bool = l >= 0
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4106 := &x.ObjectMeta
		yyv4106.CodecDecodeSelf(d)
	}
	yyj4103++
	if yyhl4103 {
		yyb4103 = yyj4103 > l
	} else {
		yyb4103 = r.CheckBreak()
	}
	if yyb4103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4107 := &x.Data
		yym4108 := z.DecBinary()
		_ = yym4108
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4107, false, d)
		}
	}
	for {
		yyj4103++
		if yyhl4103 {
			yyb4103 = yyj4103 > l
		} else {
			yyb4103 = r.CheckBreak()
		}
		if yyb4103 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4103-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4109 := z.EncBinary()
		_ = yym4109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4110 := !z.EncBinary()
			yy2arr4110 := z.EncBasicHandle().StructToArray
			var yyq4110 [4]bool
			_, _, _ = yysep4110, yyq4110, yy2arr4110
			const yyr4110 bool = false
			yyq4110[0] = x.Kind != ""
			yyq4110[1] = x.APIVersion != ""
			yyq4110[2] = true
			var yynn4110 int
			if yyr4110 || yy2arr4110 {
				r.EncodeArrayStart(4)
			} else {
				yynn4110 = 1
				for _, b := range yyq4110 {
					if b {
						yynn4110++
					}
				}
				r.EncodeMapStart(yynn4110)
				yynn4110 = 0
			}
			if yyr4110 || yy2arr4110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4110[0] {
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4110[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4110 || yy2arr4110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4110[1] {
					yym4115 := z.EncBinary()
					_ = yym4115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4110[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4110 || yy2arr4110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4110[2] {
					yy4118 := &x.ListMeta
					yym4119 := z.EncBinary()
					_ = yym4119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4118) {
					} else {
						z.EncFallback(yy4118)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4110[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4120 := &x.ListMeta
					yym4121 := z.EncBinary()
					_ = yym4121
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4120) {
					} else {
						z.EncFallback(yy4120)
					}
				}
			}
			if yyr4110 || yy2arr4110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4123 := z.EncBinary()
					_ = yym4123
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4124 := z.EncBinary()
					_ = yym4124
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4110 || yy2arr4110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4125 := z.DecBinary()
	_ = yym4125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4126 := r.ContainerType()
		if yyct4126 == codecSelferValueTypeMap1234 {
			yyl4126 := r.ReadMapStart()
			if yyl4126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4126, d)
			}
		} else if yyct4126 == codecSelferValueTypeArray1234 {
			yyl4126 := r.ReadArrayStart()
			if yyl4126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4127Slc
	var yyhl4127 bool = l >= 0
	for yyj4127 := 0; ; yyj4127++ {
		if yyhl4127 {
			if yyj4127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4127Slc = r.DecodeBytes(yys4127Slc, true, true)
		yys4127 := string(yys4127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4127 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4130 := &x.ListMeta
				yym4131 := z.DecBinary()
				_ = yym4131
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4130) {
				} else {
					z.DecFallback(yyv4130, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4132 := &x.Items
				yym4133 := z.DecBinary()
				_ = yym4133
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4132), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4127)
		} // end switch yys4127
	} // end for yyj4127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4134 int
	var yyb4134 bool
	var yyhl4134 bool = l >= 0
	yyj4134++
	if yyhl4134 {
		yyb4134 = yyj4134 > l
	} else {
		yyb4134 = r.CheckBreak()
	}
	if yyb4134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4134++
	if yyhl4134 {
		yyb4134 = yyj4134 > l
	} else {
		yyb4134 = r.CheckBreak()
	}
	if yyb4134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4134++
	if yyhl4134 {
		yyb4134 = yyj4134 > l
	} else {
		yyb4134 = r.CheckBreak()
	}
	if yyb4134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4137 := &x.ListMeta
		yym4138 := z.DecBinary()
		_ = yym4138
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4137) {
		} else {
			z.DecFallback(yyv4137, false)
		}
	}
	yyj4134++
	if yyhl4134 {
		yyb4134 = yyj4134 > l
	} else {
		yyb4134 = r.CheckBreak()
	}
	if yyb4134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4139 := &x.Items
		yym4140 := z.DecBinary()
		_ = yym4140
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4139), d)
		}
	}
	for {
		yyj4134++
		if yyhl4134 {
			yyb4134 = yyj4134 > l
		} else {
			yyb4134 = r.CheckBreak()
		}
		if yyb4134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4141 := z.EncBinary()
	_ = yym4141
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4142 := z.DecBinary()
	_ = yym4142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4143 := z.EncBinary()
		_ = yym4143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4144 := !z.EncBinary()
			yy2arr4144 := z.EncBasicHandle().StructToArray
			var yyq4144 [4]bool
			_, _, _ = yysep4144, yyq4144, yy2arr4144
			const yyr4144 bool = false
			yyq4144[2] = x.Message != ""
			yyq4144[3] = x.Error != ""
			var yynn4144 int
			if yyr4144 || yy2arr4144 {
				r.EncodeArrayStart(4)
			} else {
				yynn4144 = 2
				for _, b := range yyq4144 {
					if b {
						yynn4144++
					}
				}
				r.EncodeMapStart(yynn4144)
				yynn4144 = 0
			}
			if yyr4144 || yy2arr4144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4144 || yy2arr4144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4144 || yy2arr4144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4144[2] {
					yym4148 := z.EncBinary()
					_ = yym4148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4149 := z.EncBinary()
					_ = yym4149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4144 || yy2arr4144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4144[3] {
					yym4151 := z.EncBinary()
					_ = yym4151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4152 := z.EncBinary()
					_ = yym4152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4144 || yy2arr4144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4153 := z.DecBinary()
	_ = yym4153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4154 := r.ContainerType()
		if yyct4154 == codecSelferValueTypeMap1234 {
			yyl4154 := r.ReadMapStart()
			if yyl4154 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4154, d)
			}
		} else if yyct4154 == codecSelferValueTypeArray1234 {
			yyl4154 := r.ReadArrayStart()
			if yyl4154 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4154, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4155Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4155Slc
	var yyhl4155 bool = l >= 0
	for yyj4155 := 0; ; yyj4155++ {
		if yyhl4155 {
			if yyj4155 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4155Slc = r.DecodeBytes(yys4155Slc, true, true)
		yys4155 := string(yys4155Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4155 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4155)
		} // end switch yys4155
	} // end for yyj4155
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4160 int
	var yyb4160 bool
	var yyhl4160 bool = l >= 0
	yyj4160++
	if yyhl4160 {
		yyb4160 = yyj4160 > l
	} else {
		yyb4160 = r.CheckBreak()
	}
	if yyb4160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4160++
	if yyhl4160 {
		yyb4160 = yyj4160 > l
	} else {
		yyb4160 = r.CheckBreak()
	}
	if yyb4160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4160++
	if yyhl4160 {
		yyb4160 = yyj4160 > l
	} else {
		yyb4160 = r.CheckBreak()
	}
	if yyb4160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4160++
	if yyhl4160 {
		yyb4160 = yyj4160 > l
	} else {
		yyb4160 = r.CheckBreak()
	}
	if yyb4160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4160++
		if yyhl4160 {
			yyb4160 = yyj4160 > l
		} else {
			yyb4160 = r.CheckBreak()
		}
		if yyb4160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4165 := z.EncBinary()
		_ = yym4165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4166 := !z.EncBinary()
			yy2arr4166 := z.EncBasicHandle().StructToArray
			var yyq4166 [4]bool
			_, _, _ = yysep4166, yyq4166, yy2arr4166
			const yyr4166 bool = false
			yyq4166[0] = x.Kind != ""
			yyq4166[1] = x.APIVersion != ""
			yyq4166[2] = true
			yyq4166[3] = len(x.Conditions) != 0
			var yynn4166 int
			if yyr4166 || yy2arr4166 {
				r.EncodeArrayStart(4)
			} else {
				yynn4166 = 0
				for _, b := range yyq4166 {
					if b {
						yynn4166++
					}
				}
				r.EncodeMapStart(yynn4166)
				yynn4166 = 0
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4166[0] {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4169 := z.EncBinary()
					_ = yym4169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4166[1] {
					yym4171 := z.EncBinary()
					_ = yym4171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4172 := z.EncBinary()
					_ = yym4172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4166[2] {
					yy4174 := &x.ObjectMeta
					yy4174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4175 := &x.ObjectMeta
					yy4175.CodecEncodeSelf(e)
				}
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4166[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4177 := z.EncBinary()
						_ = yym4177
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4178 := z.EncBinary()
						_ = yym4178
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4179 := z.DecBinary()
	_ = yym4179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4180 := r.ContainerType()
		if yyct4180 == codecSelferValueTypeMap1234 {
			yyl4180 := r.ReadMapStart()
			if yyl4180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4180, d)
			}
		} else if yyct4180 == codecSelferValueTypeArray1234 {
			yyl4180 := r.ReadArrayStart()
			if yyl4180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4181Slc
	var yyhl4181 bool = l >= 0
	for yyj4181 := 0; ; yyj4181++ {
		if yyhl4181 {
			if yyj4181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4181Slc = r.DecodeBytes(yys4181Slc, true, true)
		yys4181 := string(yys4181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4181 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4184 := &x.ObjectMeta
				yyv4184.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4185 := &x.Conditions
				yym4186 := z.DecBinary()
				_ = yym4186
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4185), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4181)
		} // end switch yys4181
	} // end for yyj4181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4187 int
	var yyb4187 bool
	var yyhl4187 bool = l >= 0
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4190 := &x.ObjectMeta
		yyv4190.CodecDecodeSelf(d)
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4191 := &x.Conditions
		yym4192 := z.DecBinary()
		_ = yym4192
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4191), d)
		}
	}
	for {
		yyj4187++
		if yyhl4187 {
			yyb4187 = yyj4187 > l
		} else {
			yyb4187 = r.CheckBreak()
		}
		if yyb4187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4193 := z.EncBinary()
		_ = yym4193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4194 := !z.EncBinary()
			yy2arr4194 := z.EncBasicHandle().StructToArray
			var yyq4194 [4]bool
			_, _, _ = yysep4194, yyq4194, yy2arr4194
			const yyr4194 bool = false
			yyq4194[0] = x.Kind != ""
			yyq4194[1] = x.APIVersion != ""
			yyq4194[2] = true
			var yynn4194 int
			if yyr4194 || yy2arr4194 {
				r.EncodeArrayStart(4)
			} else {
				yynn4194 = 1
				for _, b := range yyq4194 {
					if b {
						yynn4194++
					}
				}
				r.EncodeMapStart(yynn4194)
				yynn4194 = 0
			}
			if yyr4194 || yy2arr4194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4194[0] {
					yym4196 := z.EncBinary()
					_ = yym4196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4194[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4194 || yy2arr4194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4194[1] {
					yym4199 := z.EncBinary()
					_ = yym4199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4200 := z.EncBinary()
					_ = yym4200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4194 || yy2arr4194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4194[2] {
					yy4202 := &x.ListMeta
					yym4203 := z.EncBinary()
					_ = yym4203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4202) {
					} else {
						z.EncFallback(yy4202)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4194[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4204 := &x.ListMeta
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4204) {
					} else {
						z.EncFallback(yy4204)
					}
				}
			}
			if yyr4194 || yy2arr4194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4207 := z.EncBinary()
					_ = yym4207
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4194 || yy2arr4194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4209 := z.DecBinary()
	_ = yym4209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4210 := r.ContainerType()
		if yyct4210 == codecSelferValueTypeMap1234 {
			yyl4210 := r.ReadMapStart()
			if yyl4210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4210, d)
			}
		} else if yyct4210 == codecSelferValueTypeArray1234 {
			yyl4210 := r.ReadArrayStart()
			if yyl4210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4211Slc
	var yyhl4211 bool = l >= 0
	for yyj4211 := 0; ; yyj4211++ {
		if yyhl4211 {
			if yyj4211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4211Slc = r.DecodeBytes(yys4211Slc, true, true)
		yys4211 := string(yys4211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4211 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4214 := &x.ListMeta
				yym4215 := z.DecBinary()
				_ = yym4215
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4214) {
				} else {
					z.DecFallback(yyv4214, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4216 := &x.Items
				yym4217 := z.DecBinary()
				_ = yym4217
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4216), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4211)
		} // end switch yys4211
	} // end for yyj4211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4218 int
	var yyb4218 bool
	var yyhl4218 bool = l >= 0
	yyj4218++
	if yyhl4218 {
		yyb4218 = yyj4218 > l
	} else {
		yyb4218 = r.CheckBreak()
	}
	if yyb4218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4218++
	if yyhl4218 {
		yyb4218 = yyj4218 > l
	} else {
		yyb4218 = r.CheckBreak()
	}
	if yyb4218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4218++
	if yyhl4218 {
		yyb4218 = yyj4218 > l
	} else {
		yyb4218 = r.CheckBreak()
	}
	if yyb4218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4221 := &x.ListMeta
		yym4222 := z.DecBinary()
		_ = yym4222
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4221) {
		} else {
			z.DecFallback(yyv4221, false)
		}
	}
	yyj4218++
	if yyhl4218 {
		yyb4218 = yyj4218 > l
	} else {
		yyb4218 = r.CheckBreak()
	}
	if yyb4218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4223 := &x.Items
		yym4224 := z.DecBinary()
		_ = yym4224
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4223), d)
		}
	}
	for {
		yyj4218++
		if yyhl4218 {
			yyb4218 = yyj4218 > l
		} else {
			yyb4218 = r.CheckBreak()
		}
		if yyb4218 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4218-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4225 := z.EncBinary()
		_ = yym4225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4226 := !z.EncBinary()
			yy2arr4226 := z.EncBasicHandle().StructToArray
			var yyq4226 [1]bool
			_, _, _ = yysep4226, yyq4226, yy2arr4226
			const yyr4226 bool = false
			yyq4226[0] = len(x.Items) != 0
			var yynn4226 int
			if yyr4226 || yy2arr4226 {
				r.EncodeArrayStart(1)
			} else {
				yynn4226 = 0
				for _, b := range yyq4226 {
					if b {
						yynn4226++
					}
				}
				r.EncodeMapStart(yynn4226)
				yynn4226 = 0
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4226[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4228 := z.EncBinary()
						_ = yym4228
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4226[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4229 := z.EncBinary()
						_ = yym4229
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4230 := z.DecBinary()
	_ = yym4230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4231 := r.ContainerType()
		if yyct4231 == codecSelferValueTypeMap1234 {
			yyl4231 := r.ReadMapStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4231, d)
			}
		} else if yyct4231 == codecSelferValueTypeArray1234 {
			yyl4231 := r.ReadArrayStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4232Slc
	var yyhl4232 bool = l >= 0
	for yyj4232 := 0; ; yyj4232++ {
		if yyhl4232 {
			if yyj4232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4232Slc = r.DecodeBytes(yys4232Slc, true, true)
		yys4232 := string(yys4232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4232 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4233 := &x.Items
				yym4234 := z.DecBinary()
				_ = yym4234
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4233), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4232)
		} // end switch yys4232
	} // end for yyj4232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4235 int
	var yyb4235 bool
	var yyhl4235 bool = l >= 0
	yyj4235++
	if yyhl4235 {
		yyb4235 = yyj4235 > l
	} else {
		yyb4235 = r.CheckBreak()
	}
	if yyb4235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4236 := &x.Items
		yym4237 := z.DecBinary()
		_ = yym4237
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4236), d)
		}
	}
	for {
		yyj4235++
		if yyhl4235 {
			yyb4235 = yyj4235 > l
		} else {
			yyb4235 = r.CheckBreak()
		}
		if yyb4235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4238 := z.EncBinary()
		_ = yym4238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4239 := !z.EncBinary()
			yy2arr4239 := z.EncBasicHandle().StructToArray
			var yyq4239 [3]bool
			_, _, _ = yysep4239, yyq4239, yy2arr4239
			const yyr4239 bool = false
			yyq4239[1] = x.FieldRef != nil
			yyq4239[2] = x.ResourceFieldRef != nil
			var yynn4239 int
			if yyr4239 || yy2arr4239 {
				r.EncodeArrayStart(3)
			} else {
				yynn4239 = 1
				for _, b := range yyq4239 {
					if b {
						yynn4239++
					}
				}
				r.EncodeMapStart(yynn4239)
				yynn4239 = 0
			}
			if yyr4239 || yy2arr4239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4241 := z.EncBinary()
				_ = yym4241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4242 := z.EncBinary()
				_ = yym4242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4239 || yy2arr4239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4239[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4239 || yy2arr4239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4239[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4239 || yy2arr4239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4245 := z.DecBinary()
	_ = yym4245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4246 := r.ContainerType()
		if yyct4246 == codecSelferValueTypeMap1234 {
			yyl4246 := r.ReadMapStart()
			if yyl4246 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4246, d)
			}
		} else if yyct4246 == codecSelferValueTypeArray1234 {
			yyl4246 := r.ReadArrayStart()
			if yyl4246 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4247Slc
	var yyhl4247 bool = l >= 0
	for yyj4247 := 0; ; yyj4247++ {
		if yyhl4247 {
			if yyj4247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4247Slc = r.DecodeBytes(yys4247Slc, true, true)
		yys4247 := string(yys4247Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4247 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4247)
		} // end switch yys4247
	} // end for yyj4247
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4251 int
	var yyb4251 bool
	var yyhl4251 bool = l >= 0
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj4251++
		if yyhl4251 {
			yyb4251 = yyj4251 > l
		} else {
			yyb4251 = r.CheckBreak()
		}
		if yyb4251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4255 := z.EncBinary()
		_ = yym4255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4256 := !z.EncBinary()
			yy2arr4256 := z.EncBasicHandle().StructToArray
			var yyq4256 [6]bool
			_, _, _ = yysep4256, yyq4256, yy2arr4256
			const yyr4256 bool = false
			yyq4256[0] = x.Capabilities != nil
			yyq4256[1] = x.Privileged != nil
			yyq4256[2] = x.SELinuxOptions != nil
			yyq4256[3] = x.RunAsUser != nil
			yyq4256[4] = x.RunAsNonRoot != nil
			yyq4256[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4256 int
			if yyr4256 || yy2arr4256 {
				r.EncodeArrayStart(6)
			} else {
				yynn4256 = 0
				for _, b := range yyq4256 {
					if b {
						yynn4256++
					}
				}
				r.EncodeMapStart(yynn4256)
				yynn4256 = 0
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4259 := *x.Privileged
						yym4260 := z.EncBinary()
						_ = yym4260
						if false {
						} else {
							r.EncodeBool(bool(yy4259))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4261 := *x.Privileged
						yym4262 := z.EncBinary()
						_ = yym4262
						if false {
						} else {
							r.EncodeBool(bool(yy4261))
						}
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4265 := *x.RunAsUser
						yym4266 := z.EncBinary()
						_ = yym4266
						if false {
						} else {
							r.EncodeInt(int64(yy4265))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4267 := *x.RunAsUser
						yym4268 := z.EncBinary()
						_ = yym4268
						if false {
						} else {
							r.EncodeInt(int64(yy4267))
						}
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4270 := *x.RunAsNonRoot
						yym4271 := z.EncBinary()
						_ = yym4271
						if false {
						} else {
							r.EncodeBool(bool(yy4270))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4272 := *x.RunAsNonRoot
						yym4273 := z.EncBinary()
						_ = yym4273
						if false {
						} else {
							r.EncodeBool(bool(yy4272))
						}
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4275 := *x.ReadOnlyRootFilesystem
						yym4276 := z.EncBinary()
						_ = yym4276
						if false {
						} else {
							r.EncodeBool(bool(yy4275))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4277 := *x.ReadOnlyRootFilesystem
						yym4278 := z.EncBinary()
						_ = yym4278
						if false {
						} else {
							r.EncodeBool(bool(yy4277))
						}
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4279 := z.DecBinary()
	_ = yym4279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4280 := r.ContainerType()
		if yyct4280 == codecSelferValueTypeMap1234 {
			yyl4280 := r.ReadMapStart()
			if yyl4280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4280, d)
			}
		} else if yyct4280 == codecSelferValueTypeArray1234 {
			yyl4280 := r.ReadArrayStart()
			if yyl4280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4281Slc
	var yyhl4281 bool = l >= 0
	for yyj4281 := 0; ; yyj4281++ {
		if yyhl4281 {
			if yyj4281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4281Slc = r.DecodeBytes(yys4281Slc, true, true)
		yys4281 := string(yys4281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4281 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4284 := z.DecBinary()
				_ = yym4284
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4287 := z.DecBinary()
				_ = yym4287
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4289 := z.DecBinary()
				_ = yym4289
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4291 := z.DecBinary()
				_ = yym4291
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4281)
		} // end switch yys4281
	} // end for yyj4281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4292 int
	var yyb4292 bool
	var yyhl4292 bool = l >= 0
	yyj4292++
	if yyhl4292 {
		yyb4292 = yyj4292 > l
	} else {
		yyb4292 = r.CheckBreak()
	}
	if yyb4292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4292++
	if yyhl4292 {
		yyb4292 = yyj4292 > l
	} else {
		yyb4292 = r.CheckBreak()
	}
	if yyb4292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4295 := z.DecBinary()
		_ = yym4295
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4292++
	if yyhl4292 {
		yyb4292 = yyj4292 > l
	} else {
		yyb4292 = r.CheckBreak()
	}
	if yyb4292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4292++
	if yyhl4292 {
		yyb4292 = yyj4292 > l
	} else {
		yyb4292 = r.CheckBreak()
	}
	if yyb4292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4298 := z.DecBinary()
		_ = yym4298
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4292++
	if yyhl4292 {
		yyb4292 = yyj4292 > l
	} else {
		yyb4292 = r.CheckBreak()
	}
	if yyb4292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4300 := z.DecBinary()
		_ = yym4300
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4292++
	if yyhl4292 {
		yyb4292 = yyj4292 > l
	} else {
		yyb4292 = r.CheckBreak()
	}
	if yyb4292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4302 := z.DecBinary()
		_ = yym4302
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4292++
		if yyhl4292 {
			yyb4292 = yyj4292 > l
		} else {
			yyb4292 = r.CheckBreak()
		}
		if yyb4292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4303 := z.EncBinary()
		_ = yym4303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4304 := !z.EncBinary()
			yy2arr4304 := z.EncBasicHandle().StructToArray
			var yyq4304 [4]bool
			_, _, _ = yysep4304, yyq4304, yy2arr4304
			const yyr4304 bool = false
			yyq4304[0] = x.User != ""
			yyq4304[1] = x.Role != ""
			yyq4304[2] = x.Type != ""
			yyq4304[3] = x.Level != ""
			var yynn4304 int
			if yyr4304 || yy2arr4304 {
				r.EncodeArrayStart(4)
			} else {
				yynn4304 = 0
				for _, b := range yyq4304 {
					if b {
						yynn4304++
					}
				}
				r.EncodeMapStart(yynn4304)
				yynn4304 = 0
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[0] {
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4307 := z.EncBinary()
					_ = yym4307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[1] {
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[2] {
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4304[3] {
					yym4315 := z.EncBinary()
					_ = yym4315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4304[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4316 := z.EncBinary()
					_ = yym4316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4304 || yy2arr4304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4317 := z.DecBinary()
	_ = yym4317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4318 := r.ContainerType()
		if yyct4318 == codecSelferValueTypeMap1234 {
			yyl4318 := r.ReadMapStart()
			if yyl4318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4318, d)
			}
		} else if yyct4318 == codecSelferValueTypeArray1234 {
			yyl4318 := r.ReadArrayStart()
			if yyl4318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4319Slc
	var yyhl4319 bool = l >= 0
	for yyj4319 := 0; ; yyj4319++ {
		if yyhl4319 {
			if yyj4319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4319Slc = r.DecodeBytes(yys4319Slc, true, true)
		yys4319 := string(yys4319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4319 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4319)
		} // end switch yys4319
	} // end for yyj4319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4324 int
	var yyb4324 bool
	var yyhl4324 bool = l >= 0
	yyj4324++
	if yyhl4324 {
		yyb4324 = yyj4324 > l
	} else {
		yyb4324 = r.CheckBreak()
	}
	if yyb4324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4324++
	if yyhl4324 {
		yyb4324 = yyj4324 > l
	} else {
		yyb4324 = r.CheckBreak()
	}
	if yyb4324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4324++
	if yyhl4324 {
		yyb4324 = yyj4324 > l
	} else {
		yyb4324 = r.CheckBreak()
	}
	if yyb4324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4324++
	if yyhl4324 {
		yyb4324 = yyj4324 > l
	} else {
		yyb4324 = r.CheckBreak()
	}
	if yyb4324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4324++
		if yyhl4324 {
			yyb4324 = yyj4324 > l
		} else {
			yyb4324 = r.CheckBreak()
		}
		if yyb4324 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4324-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4329 := z.EncBinary()
		_ = yym4329
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4330 := !z.EncBinary()
			yy2arr4330 := z.EncBasicHandle().StructToArray
			var yyq4330 [5]bool
			_, _, _ = yysep4330, yyq4330, yy2arr4330
			const yyr4330 bool = false
			yyq4330[0] = x.Kind != ""
			yyq4330[1] = x.APIVersion != ""
			yyq4330[2] = true
			var yynn4330 int
			if yyr4330 || yy2arr4330 {
				r.EncodeArrayStart(5)
			} else {
				yynn4330 = 2
				for _, b := range yyq4330 {
					if b {
						yynn4330++
					}
				}
				r.EncodeMapStart(yynn4330)
				yynn4330 = 0
			}
			if yyr4330 || yy2arr4330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4330[0] {
					yym4332 := z.EncBinary()
					_ = yym4332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4330[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4330 || yy2arr4330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4330[1] {
					yym4335 := z.EncBinary()
					_ = yym4335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4330[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4336 := z.EncBinary()
					_ = yym4336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4330 || yy2arr4330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4330[2] {
					yy4338 := &x.ObjectMeta
					yy4338.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4330[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4339 := &x.ObjectMeta
					yy4339.CodecEncodeSelf(e)
				}
			}
			if yyr4330 || yy2arr4330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4341 := z.EncBinary()
				_ = yym4341
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4342 := z.EncBinary()
				_ = yym4342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4330 || yy2arr4330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4330 || yy2arr4330 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4346 := z.DecBinary()
	_ = yym4346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4347 := r.ContainerType()
		if yyct4347 == codecSelferValueTypeMap1234 {
			yyl4347 := r.ReadMapStart()
			if yyl4347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4347, d)
			}
		} else if yyct4347 == codecSelferValueTypeArray1234 {
			yyl4347 := r.ReadArrayStart()
			if yyl4347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4348Slc
	var yyhl4348 bool = l >= 0
	for yyj4348 := 0; ; yyj4348++ {
		if yyhl4348 {
			if yyj4348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4348Slc = r.DecodeBytes(yys4348Slc, true, true)
		yys4348 := string(yys4348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4348 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4351 := &x.ObjectMeta
				yyv4351.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4353 := &x.Data
				yym4354 := z.DecBinary()
				_ = yym4354
				if false {
				} else {
					*yyv4353 = r.DecodeBytes(*(*[]byte)(yyv4353), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4348)
		} // end switch yys4348
	} // end for yyj4348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4355 int
	var yyb4355 bool
	var yyhl4355 bool = l >= 0
	yyj4355++
	if yyhl4355 {
		yyb4355 = yyj4355 > l
	} else {
		yyb4355 = r.CheckBreak()
	}
	if yyb4355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4355++
	if yyhl4355 {
		yyb4355 = yyj4355 > l
	} else {
		yyb4355 = r.CheckBreak()
	}
	if yyb4355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4355++
	if yyhl4355 {
		yyb4355 = yyj4355 > l
	} else {
		yyb4355 = r.CheckBreak()
	}
	if yyb4355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4358 := &x.ObjectMeta
		yyv4358.CodecDecodeSelf(d)
	}
	yyj4355++
	if yyhl4355 {
		yyb4355 = yyj4355 > l
	} else {
		yyb4355 = r.CheckBreak()
	}
	if yyb4355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4355++
	if yyhl4355 {
		yyb4355 = yyj4355 > l
	} else {
		yyb4355 = r.CheckBreak()
	}
	if yyb4355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4360 := &x.Data
		yym4361 := z.DecBinary()
		_ = yym4361
		if false {
		} else {
			*yyv4360 = r.DecodeBytes(*(*[]byte)(yyv4360), false, false)
		}
	}
	for {
		yyj4355++
		if yyhl4355 {
			yyb4355 = yyj4355 > l
		} else {
			yyb4355 = r.CheckBreak()
		}
		if yyb4355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4362 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4363 := &yyv4362
		yy4363.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4364 := *v
	yyh4364, yyl4364 := z.DecSliceHelperStart()
	var yyc4364 bool
	if yyl4364 == 0 {
		if yyv4364 == nil {
			yyv4364 = []OwnerReference{}
			yyc4364 = true
		} else if len(yyv4364) != 0 {
			yyv4364 = yyv4364[:0]
			yyc4364 = true
		}
	} else if yyl4364 > 0 {
		var yyrr4364, yyrl4364 int
		var yyrt4364 bool
		if yyl4364 > cap(yyv4364) {

			yyrg4364 := len(yyv4364) > 0
			yyv24364 := yyv4364
			yyrl4364, yyrt4364 = z.DecInferLen(yyl4364, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4364 {
				if yyrl4364 <= cap(yyv4364) {
					yyv4364 = yyv4364[:yyrl4364]
				} else {
					yyv4364 = make([]OwnerReference, yyrl4364)
				}
			} else {
				yyv4364 = make([]OwnerReference, yyrl4364)
			}
			yyc4364 = true
			yyrr4364 = len(yyv4364)
			if yyrg4364 {
				copy(yyv4364, yyv24364)
			}
		} else if yyl4364 != len(yyv4364) {
			yyv4364 = yyv4364[:yyl4364]
			yyc4364 = true
		}
		yyj4364 := 0
		for ; yyj4364 < yyrr4364; yyj4364++ {
			yyh4364.ElemContainerState(yyj4364)
			if r.TryDecodeAsNil() {
				yyv4364[yyj4364] = OwnerReference{}
			} else {
				yyv4365 := &yyv4364[yyj4364]
				yyv4365.CodecDecodeSelf(d)
			}

		}
		if yyrt4364 {
			for ; yyj4364 < yyl4364; yyj4364++ {
				yyv4364 = append(yyv4364, OwnerReference{})
				yyh4364.ElemContainerState(yyj4364)
				if r.TryDecodeAsNil() {
					yyv4364[yyj4364] = OwnerReference{}
				} else {
					yyv4366 := &yyv4364[yyj4364]
					yyv4366.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4364 := 0
		for ; !r.CheckBreak(); yyj4364++ {

			if yyj4364 >= len(yyv4364) {
				yyv4364 = append(yyv4364, OwnerReference{}) // var yyz4364 OwnerReference
				yyc4364 = true
			}
			yyh4364.ElemContainerState(yyj4364)
			if yyj4364 < len(yyv4364) {
				if r.TryDecodeAsNil() {
					yyv4364[yyj4364] = OwnerReference{}
				} else {
					yyv4367 := &yyv4364[yyj4364]
					yyv4367.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4364 < len(yyv4364) {
			yyv4364 = yyv4364[:yyj4364]
			yyc4364 = true
		} else if yyj4364 == 0 && yyv4364 == nil {
			yyv4364 = []OwnerReference{}
			yyc4364 = true
		}
	}
	yyh4364.End()
	if yyc4364 {
		*v = yyv4364
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4368 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4368.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4369 := *v
	yyh4369, yyl4369 := z.DecSliceHelperStart()
	var yyc4369 bool
	if yyl4369 == 0 {
		if yyv4369 == nil {
			yyv4369 = []PersistentVolumeAccessMode{}
			yyc4369 = true
		} else if len(yyv4369) != 0 {
			yyv4369 = yyv4369[:0]
			yyc4369 = true
		}
	} else if yyl4369 > 0 {
		var yyrr4369, yyrl4369 int
		var yyrt4369 bool
		if yyl4369 > cap(yyv4369) {

			yyrl4369, yyrt4369 = z.DecInferLen(yyl4369, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4369 {
				if yyrl4369 <= cap(yyv4369) {
					yyv4369 = yyv4369[:yyrl4369]
				} else {
					yyv4369 = make([]PersistentVolumeAccessMode, yyrl4369)
				}
			} else {
				yyv4369 = make([]PersistentVolumeAccessMode, yyrl4369)
			}
			yyc4369 = true
			yyrr4369 = len(yyv4369)
		} else if yyl4369 != len(yyv4369) {
			yyv4369 = yyv4369[:yyl4369]
			yyc4369 = true
		}
		yyj4369 := 0
		for ; yyj4369 < yyrr4369; yyj4369++ {
			yyh4369.ElemContainerState(yyj4369)
			if r.TryDecodeAsNil() {
				yyv4369[yyj4369] = ""
			} else {
				yyv4369[yyj4369] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4369 {
			for ; yyj4369 < yyl4369; yyj4369++ {
				yyv4369 = append(yyv4369, "")
				yyh4369.ElemContainerState(yyj4369)
				if r.TryDecodeAsNil() {
					yyv4369[yyj4369] = ""
				} else {
					yyv4369[yyj4369] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4369 := 0
		for ; !r.CheckBreak(); yyj4369++ {

			if yyj4369 >= len(yyv4369) {
				yyv4369 = append(yyv4369, "") // var yyz4369 PersistentVolumeAccessMode
				yyc4369 = true
			}
			yyh4369.ElemContainerState(yyj4369)
			if yyj4369 < len(yyv4369) {
				if r.TryDecodeAsNil() {
					yyv4369[yyj4369] = ""
				} else {
					yyv4369[yyj4369] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4369 < len(yyv4369) {
			yyv4369 = yyv4369[:yyj4369]
			yyc4369 = true
		} else if yyj4369 == 0 && yyv4369 == nil {
			yyv4369 = []PersistentVolumeAccessMode{}
			yyc4369 = true
		}
	}
	yyh4369.End()
	if yyc4369 {
		*v = yyv4369
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4373 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4374 := &yyv4373
		yy4374.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4375 := *v
	yyh4375, yyl4375 := z.DecSliceHelperStart()
	var yyc4375 bool
	if yyl4375 == 0 {
		if yyv4375 == nil {
			yyv4375 = []PersistentVolume{}
			yyc4375 = true
		} else if len(yyv4375) != 0 {
			yyv4375 = yyv4375[:0]
			yyc4375 = true
		}
	} else if yyl4375 > 0 {
		var yyrr4375, yyrl4375 int
		var yyrt4375 bool
		if yyl4375 > cap(yyv4375) {

			yyrg4375 := len(yyv4375) > 0
			yyv24375 := yyv4375
			yyrl4375, yyrt4375 = z.DecInferLen(yyl4375, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt4375 {
				if yyrl4375 <= cap(yyv4375) {
					yyv4375 = yyv4375[:yyrl4375]
				} else {
					yyv4375 = make([]PersistentVolume, yyrl4375)
				}
			} else {
				yyv4375 = make([]PersistentVolume, yyrl4375)
			}
			yyc4375 = true
			yyrr4375 = len(yyv4375)
			if yyrg4375 {
				copy(yyv4375, yyv24375)
			}
		} else if yyl4375 != len(yyv4375) {
			yyv4375 = yyv4375[:yyl4375]
			yyc4375 = true
		}
		yyj4375 := 0
		for ; yyj4375 < yyrr4375; yyj4375++ {
			yyh4375.ElemContainerState(yyj4375)
			if r.TryDecodeAsNil() {
				yyv4375[yyj4375] = PersistentVolume{}
			} else {
				yyv4376 := &yyv4375[yyj4375]
				yyv4376.CodecDecodeSelf(d)
			}

		}
		if yyrt4375 {
			for ; yyj4375 < yyl4375; yyj4375++ {
				yyv4375 = append(yyv4375, PersistentVolume{})
				yyh4375.ElemContainerState(yyj4375)
				if r.TryDecodeAsNil() {
					yyv4375[yyj4375] = PersistentVolume{}
				} else {
					yyv4377 := &yyv4375[yyj4375]
					yyv4377.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4375 := 0
		for ; !r.CheckBreak(); yyj4375++ {

			if yyj4375 >= len(yyv4375) {
				yyv4375 = append(yyv4375, PersistentVolume{}) // var yyz4375 PersistentVolume
				yyc4375 = true
			}
			yyh4375.ElemContainerState(yyj4375)
			if yyj4375 < len(yyv4375) {
				if r.TryDecodeAsNil() {
					yyv4375[yyj4375] = PersistentVolume{}
				} else {
					yyv4378 := &yyv4375[yyj4375]
					yyv4378.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4375 < len(yyv4375) {
			yyv4375 = yyv4375[:yyj4375]
			yyc4375 = true
		} else if yyj4375 == 0 && yyv4375 == nil {
			yyv4375 = []PersistentVolume{}
			yyc4375 = true
		}
	}
	yyh4375.End()
	if yyc4375 {
		*v = yyv4375
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4379 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4380 := &yyv4379
		yy4380.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4381 := *v
	yyh4381, yyl4381 := z.DecSliceHelperStart()
	var yyc4381 bool
	if yyl4381 == 0 {
		if yyv4381 == nil {
			yyv4381 = []PersistentVolumeClaim{}
			yyc4381 = true
		} else if len(yyv4381) != 0 {
			yyv4381 = yyv4381[:0]
			yyc4381 = true
		}
	} else if yyl4381 > 0 {
		var yyrr4381, yyrl4381 int
		var yyrt4381 bool
		if yyl4381 > cap(yyv4381) {

			yyrg4381 := len(yyv4381) > 0
			yyv24381 := yyv4381
			yyrl4381, yyrt4381 = z.DecInferLen(yyl4381, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4381 {
				if yyrl4381 <= cap(yyv4381) {
					yyv4381 = yyv4381[:yyrl4381]
				} else {
					yyv4381 = make([]PersistentVolumeClaim, yyrl4381)
				}
			} else {
				yyv4381 = make([]PersistentVolumeClaim, yyrl4381)
			}
			yyc4381 = true
			yyrr4381 = len(yyv4381)
			if yyrg4381 {
				copy(yyv4381, yyv24381)
			}
		} else if yyl4381 != len(yyv4381) {
			yyv4381 = yyv4381[:yyl4381]
			yyc4381 = true
		}
		yyj4381 := 0
		for ; yyj4381 < yyrr4381; yyj4381++ {
			yyh4381.ElemContainerState(yyj4381)
			if r.TryDecodeAsNil() {
				yyv4381[yyj4381] = PersistentVolumeClaim{}
			} else {
				yyv4382 := &yyv4381[yyj4381]
				yyv4382.CodecDecodeSelf(d)
			}

		}
		if yyrt4381 {
			for ; yyj4381 < yyl4381; yyj4381++ {
				yyv4381 = append(yyv4381, PersistentVolumeClaim{})
				yyh4381.ElemContainerState(yyj4381)
				if r.TryDecodeAsNil() {
					yyv4381[yyj4381] = PersistentVolumeClaim{}
				} else {
					yyv4383 := &yyv4381[yyj4381]
					yyv4383.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4381 := 0
		for ; !r.CheckBreak(); yyj4381++ {

			if yyj4381 >= len(yyv4381) {
				yyv4381 = append(yyv4381, PersistentVolumeClaim{}) // var yyz4381 PersistentVolumeClaim
				yyc4381 = true
			}
			yyh4381.ElemContainerState(yyj4381)
			if yyj4381 < len(yyv4381) {
				if r.TryDecodeAsNil() {
					yyv4381[yyj4381] = PersistentVolumeClaim{}
				} else {
					yyv4384 := &yyv4381[yyj4381]
					yyv4384.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4381 < len(yyv4381) {
			yyv4381 = yyv4381[:yyj4381]
			yyc4381 = true
		} else if yyj4381 == 0 && yyv4381 == nil {
			yyv4381 = []PersistentVolumeClaim{}
			yyc4381 = true
		}
	}
	yyh4381.End()
	if yyc4381 {
		*v = yyv4381
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4385 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4386 := &yyv4385
		yy4386.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4387 := *v
	yyh4387, yyl4387 := z.DecSliceHelperStart()
	var yyc4387 bool
	if yyl4387 == 0 {
		if yyv4387 == nil {
			yyv4387 = []KeyToPath{}
			yyc4387 = true
		} else if len(yyv4387) != 0 {
			yyv4387 = yyv4387[:0]
			yyc4387 = true
		}
	} else if yyl4387 > 0 {
		var yyrr4387, yyrl4387 int
		var yyrt4387 bool
		if yyl4387 > cap(yyv4387) {

			yyrg4387 := len(yyv4387) > 0
			yyv24387 := yyv4387
			yyrl4387, yyrt4387 = z.DecInferLen(yyl4387, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4387 {
				if yyrl4387 <= cap(yyv4387) {
					yyv4387 = yyv4387[:yyrl4387]
				} else {
					yyv4387 = make([]KeyToPath, yyrl4387)
				}
			} else {
				yyv4387 = make([]KeyToPath, yyrl4387)
			}
			yyc4387 = true
			yyrr4387 = len(yyv4387)
			if yyrg4387 {
				copy(yyv4387, yyv24387)
			}
		} else if yyl4387 != len(yyv4387) {
			yyv4387 = yyv4387[:yyl4387]
			yyc4387 = true
		}
		yyj4387 := 0
		for ; yyj4387 < yyrr4387; yyj4387++ {
			yyh4387.ElemContainerState(yyj4387)
			if r.TryDecodeAsNil() {
				yyv4387[yyj4387] = KeyToPath{}
			} else {
				yyv4388 := &yyv4387[yyj4387]
				yyv4388.CodecDecodeSelf(d)
			}

		}
		if yyrt4387 {
			for ; yyj4387 < yyl4387; yyj4387++ {
				yyv4387 = append(yyv4387, KeyToPath{})
				yyh4387.ElemContainerState(yyj4387)
				if r.TryDecodeAsNil() {
					yyv4387[yyj4387] = KeyToPath{}
				} else {
					yyv4389 := &yyv4387[yyj4387]
					yyv4389.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4387 := 0
		for ; !r.CheckBreak(); yyj4387++ {

			if yyj4387 >= len(yyv4387) {
				yyv4387 = append(yyv4387, KeyToPath{}) // var yyz4387 KeyToPath
				yyc4387 = true
			}
			yyh4387.ElemContainerState(yyj4387)
			if yyj4387 < len(yyv4387) {
				if r.TryDecodeAsNil() {
					yyv4387[yyj4387] = KeyToPath{}
				} else {
					yyv4390 := &yyv4387[yyj4387]
					yyv4390.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4387 < len(yyv4387) {
			yyv4387 = yyv4387[:yyj4387]
			yyc4387 = true
		} else if yyj4387 == 0 && yyv4387 == nil {
			yyv4387 = []KeyToPath{}
			yyc4387 = true
		}
	}
	yyh4387.End()
	if yyc4387 {
		*v = yyv4387
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4391 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4392 := &yyv4391
		yy4392.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4393 := *v
	yyh4393, yyl4393 := z.DecSliceHelperStart()
	var yyc4393 bool
	if yyl4393 == 0 {
		if yyv4393 == nil {
			yyv4393 = []HTTPHeader{}
			yyc4393 = true
		} else if len(yyv4393) != 0 {
			yyv4393 = yyv4393[:0]
			yyc4393 = true
		}
	} else if yyl4393 > 0 {
		var yyrr4393, yyrl4393 int
		var yyrt4393 bool
		if yyl4393 > cap(yyv4393) {

			yyrg4393 := len(yyv4393) > 0
			yyv24393 := yyv4393
			yyrl4393, yyrt4393 = z.DecInferLen(yyl4393, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4393 {
				if yyrl4393 <= cap(yyv4393) {
					yyv4393 = yyv4393[:yyrl4393]
				} else {
					yyv4393 = make([]HTTPHeader, yyrl4393)
				}
			} else {
				yyv4393 = make([]HTTPHeader, yyrl4393)
			}
			yyc4393 = true
			yyrr4393 = len(yyv4393)
			if yyrg4393 {
				copy(yyv4393, yyv24393)
			}
		} else if yyl4393 != len(yyv4393) {
			yyv4393 = yyv4393[:yyl4393]
			yyc4393 = true
		}
		yyj4393 := 0
		for ; yyj4393 < yyrr4393; yyj4393++ {
			yyh4393.ElemContainerState(yyj4393)
			if r.TryDecodeAsNil() {
				yyv4393[yyj4393] = HTTPHeader{}
			} else {
				yyv4394 := &yyv4393[yyj4393]
				yyv4394.CodecDecodeSelf(d)
			}

		}
		if yyrt4393 {
			for ; yyj4393 < yyl4393; yyj4393++ {
				yyv4393 = append(yyv4393, HTTPHeader{})
				yyh4393.ElemContainerState(yyj4393)
				if r.TryDecodeAsNil() {
					yyv4393[yyj4393] = HTTPHeader{}
				} else {
					yyv4395 := &yyv4393[yyj4393]
					yyv4395.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4393 := 0
		for ; !r.CheckBreak(); yyj4393++ {

			if yyj4393 >= len(yyv4393) {
				yyv4393 = append(yyv4393, HTTPHeader{}) // var yyz4393 HTTPHeader
				yyc4393 = true
			}
			yyh4393.ElemContainerState(yyj4393)
			if yyj4393 < len(yyv4393) {
				if r.TryDecodeAsNil() {
					yyv4393[yyj4393] = HTTPHeader{}
				} else {
					yyv4396 := &yyv4393[yyj4393]
					yyv4396.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4393 < len(yyv4393) {
			yyv4393 = yyv4393[:yyj4393]
			yyc4393 = true
		} else if yyj4393 == 0 && yyv4393 == nil {
			yyv4393 = []HTTPHeader{}
			yyc4393 = true
		}
	}
	yyh4393.End()
	if yyc4393 {
		*v = yyv4393
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4397 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4397.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4398 := *v
	yyh4398, yyl4398 := z.DecSliceHelperStart()
	var yyc4398 bool
	if yyl4398 == 0 {
		if yyv4398 == nil {
			yyv4398 = []Capability{}
			yyc4398 = true
		} else if len(yyv4398) != 0 {
			yyv4398 = yyv4398[:0]
			yyc4398 = true
		}
	} else if yyl4398 > 0 {
		var yyrr4398, yyrl4398 int
		var yyrt4398 bool
		if yyl4398 > cap(yyv4398) {

			yyrl4398, yyrt4398 = z.DecInferLen(yyl4398, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4398 {
				if yyrl4398 <= cap(yyv4398) {
					yyv4398 = yyv4398[:yyrl4398]
				} else {
					yyv4398 = make([]Capability, yyrl4398)
				}
			} else {
				yyv4398 = make([]Capability, yyrl4398)
			}
			yyc4398 = true
			yyrr4398 = len(yyv4398)
		} else if yyl4398 != len(yyv4398) {
			yyv4398 = yyv4398[:yyl4398]
			yyc4398 = true
		}
		yyj4398 := 0
		for ; yyj4398 < yyrr4398; yyj4398++ {
			yyh4398.ElemContainerState(yyj4398)
			if r.TryDecodeAsNil() {
				yyv4398[yyj4398] = ""
			} else {
				yyv4398[yyj4398] = Capability(r.DecodeString())
			}

		}
		if yyrt4398 {
			for ; yyj4398 < yyl4398; yyj4398++ {
				yyv4398 = append(yyv4398, "")
				yyh4398.ElemContainerState(yyj4398)
				if r.TryDecodeAsNil() {
					yyv4398[yyj4398] = ""
				} else {
					yyv4398[yyj4398] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4398 := 0
		for ; !r.CheckBreak(); yyj4398++ {

			if yyj4398 >= len(yyv4398) {
				yyv4398 = append(yyv4398, "") // var yyz4398 Capability
				yyc4398 = true
			}
			yyh4398.ElemContainerState(yyj4398)
			if yyj4398 < len(yyv4398) {
				if r.TryDecodeAsNil() {
					yyv4398[yyj4398] = ""
				} else {
					yyv4398[yyj4398] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4398 < len(yyv4398) {
			yyv4398 = yyv4398[:yyj4398]
			yyc4398 = true
		} else if yyj4398 == 0 && yyv4398 == nil {
			yyv4398 = []Capability{}
			yyc4398 = true
		}
	}
	yyh4398.End()
	if yyc4398 {
		*v = yyv4398
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4402 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4403 := &yyv4402
		yy4403.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4404 := *v
	yyh4404, yyl4404 := z.DecSliceHelperStart()
	var yyc4404 bool
	if yyl4404 == 0 {
		if yyv4404 == nil {
			yyv4404 = []ContainerPort{}
			yyc4404 = true
		} else if len(yyv4404) != 0 {
			yyv4404 = yyv4404[:0]
			yyc4404 = true
		}
	} else if yyl4404 > 0 {
		var yyrr4404, yyrl4404 int
		var yyrt4404 bool
		if yyl4404 > cap(yyv4404) {

			yyrg4404 := len(yyv4404) > 0
			yyv24404 := yyv4404
			yyrl4404, yyrt4404 = z.DecInferLen(yyl4404, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4404 {
				if yyrl4404 <= cap(yyv4404) {
					yyv4404 = yyv4404[:yyrl4404]
				} else {
					yyv4404 = make([]ContainerPort, yyrl4404)
				}
			} else {
				yyv4404 = make([]ContainerPort, yyrl4404)
			}
			yyc4404 = true
			yyrr4404 = len(yyv4404)
			if yyrg4404 {
				copy(yyv4404, yyv24404)
			}
		} else if yyl4404 != len(yyv4404) {
			yyv4404 = yyv4404[:yyl4404]
			yyc4404 = true
		}
		yyj4404 := 0
		for ; yyj4404 < yyrr4404; yyj4404++ {
			yyh4404.ElemContainerState(yyj4404)
			if r.TryDecodeAsNil() {
				yyv4404[yyj4404] = ContainerPort{}
			} else {
				yyv4405 := &yyv4404[yyj4404]
				yyv4405.CodecDecodeSelf(d)
			}

		}
		if yyrt4404 {
			for ; yyj4404 < yyl4404; yyj4404++ {
				yyv4404 = append(yyv4404, ContainerPort{})
				yyh4404.ElemContainerState(yyj4404)
				if r.TryDecodeAsNil() {
					yyv4404[yyj4404] = ContainerPort{}
				} else {
					yyv4406 := &yyv4404[yyj4404]
					yyv4406.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4404 := 0
		for ; !r.CheckBreak(); yyj4404++ {

			if yyj4404 >= len(yyv4404) {
				yyv4404 = append(yyv4404, ContainerPort{}) // var yyz4404 ContainerPort
				yyc4404 = true
			}
			yyh4404.ElemContainerState(yyj4404)
			if yyj4404 < len(yyv4404) {
				if r.TryDecodeAsNil() {
					yyv4404[yyj4404] = ContainerPort{}
				} else {
					yyv4407 := &yyv4404[yyj4404]
					yyv4407.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4404 < len(yyv4404) {
			yyv4404 = yyv4404[:yyj4404]
			yyc4404 = true
		} else if yyj4404 == 0 && yyv4404 == nil {
			yyv4404 = []ContainerPort{}
			yyc4404 = true
		}
	}
	yyh4404.End()
	if yyc4404 {
		*v = yyv4404
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4408 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4409 := &yyv4408
		yy4409.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4410 := *v
	yyh4410, yyl4410 := z.DecSliceHelperStart()
	var yyc4410 bool
	if yyl4410 == 0 {
		if yyv4410 == nil {
			yyv4410 = []EnvVar{}
			yyc4410 = true
		} else if len(yyv4410) != 0 {
			yyv4410 = yyv4410[:0]
			yyc4410 = true
		}
	} else if yyl4410 > 0 {
		var yyrr4410, yyrl4410 int
		var yyrt4410 bool
		if yyl4410 > cap(yyv4410) {

			yyrg4410 := len(yyv4410) > 0
			yyv24410 := yyv4410
			yyrl4410, yyrt4410 = z.DecInferLen(yyl4410, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4410 {
				if yyrl4410 <= cap(yyv4410) {
					yyv4410 = yyv4410[:yyrl4410]
				} else {
					yyv4410 = make([]EnvVar, yyrl4410)
				}
			} else {
				yyv4410 = make([]EnvVar, yyrl4410)
			}
			yyc4410 = true
			yyrr4410 = len(yyv4410)
			if yyrg4410 {
				copy(yyv4410, yyv24410)
			}
		} else if yyl4410 != len(yyv4410) {
			yyv4410 = yyv4410[:yyl4410]
			yyc4410 = true
		}
		yyj4410 := 0
		for ; yyj4410 < yyrr4410; yyj4410++ {
			yyh4410.ElemContainerState(yyj4410)
			if r.TryDecodeAsNil() {
				yyv4410[yyj4410] = EnvVar{}
			} else {
				yyv4411 := &yyv4410[yyj4410]
				yyv4411.CodecDecodeSelf(d)
			}

		}
		if yyrt4410 {
			for ; yyj4410 < yyl4410; yyj4410++ {
				yyv4410 = append(yyv4410, EnvVar{})
				yyh4410.ElemContainerState(yyj4410)
				if r.TryDecodeAsNil() {
					yyv4410[yyj4410] = EnvVar{}
				} else {
					yyv4412 := &yyv4410[yyj4410]
					yyv4412.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4410 := 0
		for ; !r.CheckBreak(); yyj4410++ {

			if yyj4410 >= len(yyv4410) {
				yyv4410 = append(yyv4410, EnvVar{}) // var yyz4410 EnvVar
				yyc4410 = true
			}
			yyh4410.ElemContainerState(yyj4410)
			if yyj4410 < len(yyv4410) {
				if r.TryDecodeAsNil() {
					yyv4410[yyj4410] = EnvVar{}
				} else {
					yyv4413 := &yyv4410[yyj4410]
					yyv4413.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4410 < len(yyv4410) {
			yyv4410 = yyv4410[:yyj4410]
			yyc4410 = true
		} else if yyj4410 == 0 && yyv4410 == nil {
			yyv4410 = []EnvVar{}
			yyc4410 = true
		}
	}
	yyh4410.End()
	if yyc4410 {
		*v = yyv4410
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4414 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4415 := &yyv4414
		yy4415.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4416 := *v
	yyh4416, yyl4416 := z.DecSliceHelperStart()
	var yyc4416 bool
	if yyl4416 == 0 {
		if yyv4416 == nil {
			yyv4416 = []VolumeMount{}
			yyc4416 = true
		} else if len(yyv4416) != 0 {
			yyv4416 = yyv4416[:0]
			yyc4416 = true
		}
	} else if yyl4416 > 0 {
		var yyrr4416, yyrl4416 int
		var yyrt4416 bool
		if yyl4416 > cap(yyv4416) {

			yyrg4416 := len(yyv4416) > 0
			yyv24416 := yyv4416
			yyrl4416, yyrt4416 = z.DecInferLen(yyl4416, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4416 {
				if yyrl4416 <= cap(yyv4416) {
					yyv4416 = yyv4416[:yyrl4416]
				} else {
					yyv4416 = make([]VolumeMount, yyrl4416)
				}
			} else {
				yyv4416 = make([]VolumeMount, yyrl4416)
			}
			yyc4416 = true
			yyrr4416 = len(yyv4416)
			if yyrg4416 {
				copy(yyv4416, yyv24416)
			}
		} else if yyl4416 != len(yyv4416) {
			yyv4416 = yyv4416[:yyl4416]
			yyc4416 = true
		}
		yyj4416 := 0
		for ; yyj4416 < yyrr4416; yyj4416++ {
			yyh4416.ElemContainerState(yyj4416)
			if r.TryDecodeAsNil() {
				yyv4416[yyj4416] = VolumeMount{}
			} else {
				yyv4417 := &yyv4416[yyj4416]
				yyv4417.CodecDecodeSelf(d)
			}

		}
		if yyrt4416 {
			for ; yyj4416 < yyl4416; yyj4416++ {
				yyv4416 = append(yyv4416, VolumeMount{})
				yyh4416.ElemContainerState(yyj4416)
				if r.TryDecodeAsNil() {
					yyv4416[yyj4416] = VolumeMount{}
				} else {
					yyv4418 := &yyv4416[yyj4416]
					yyv4418.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4416 := 0
		for ; !r.CheckBreak(); yyj4416++ {

			if yyj4416 >= len(yyv4416) {
				yyv4416 = append(yyv4416, VolumeMount{}) // var yyz4416 VolumeMount
				yyc4416 = true
			}
			yyh4416.ElemContainerState(yyj4416)
			if yyj4416 < len(yyv4416) {
				if r.TryDecodeAsNil() {
					yyv4416[yyj4416] = VolumeMount{}
				} else {
					yyv4419 := &yyv4416[yyj4416]
					yyv4419.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4416 < len(yyv4416) {
			yyv4416 = yyv4416[:yyj4416]
			yyc4416 = true
		} else if yyj4416 == 0 && yyv4416 == nil {
			yyv4416 = []VolumeMount{}
			yyc4416 = true
		}
	}
	yyh4416.End()
	if yyc4416 {
		*v = yyv4416
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4420 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4421 := &yyv4420
		yy4421.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4422 := *v
	yyh4422, yyl4422 := z.DecSliceHelperStart()
	var yyc4422 bool
	if yyl4422 == 0 {
		if yyv4422 == nil {
			yyv4422 = []NodeSelectorTerm{}
			yyc4422 = true
		} else if len(yyv4422) != 0 {
			yyv4422 = yyv4422[:0]
			yyc4422 = true
		}
	} else if yyl4422 > 0 {
		var yyrr4422, yyrl4422 int
		var yyrt4422 bool
		if yyl4422 > cap(yyv4422) {

			yyrg4422 := len(yyv4422) > 0
			yyv24422 := yyv4422
			yyrl4422, yyrt4422 = z.DecInferLen(yyl4422, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4422 {
				if yyrl4422 <= cap(yyv4422) {
					yyv4422 = yyv4422[:yyrl4422]
				} else {
					yyv4422 = make([]NodeSelectorTerm, yyrl4422)
				}
			} else {
				yyv4422 = make([]NodeSelectorTerm, yyrl4422)
			}
			yyc4422 = true
			yyrr4422 = len(yyv4422)
			if yyrg4422 {
				copy(yyv4422, yyv24422)
			}
		} else if yyl4422 != len(yyv4422) {
			yyv4422 = yyv4422[:yyl4422]
			yyc4422 = true
		}
		yyj4422 := 0
		for ; yyj4422 < yyrr4422; yyj4422++ {
			yyh4422.ElemContainerState(yyj4422)
			if r.TryDecodeAsNil() {
				yyv4422[yyj4422] = NodeSelectorTerm{}
			} else {
				yyv4423 := &yyv4422[yyj4422]
				yyv4423.CodecDecodeSelf(d)
			}

		}
		if yyrt4422 {
			for ; yyj4422 < yyl4422; yyj4422++ {
				yyv4422 = append(yyv4422, NodeSelectorTerm{})
				yyh4422.ElemContainerState(yyj4422)
				if r.TryDecodeAsNil() {
					yyv4422[yyj4422] = NodeSelectorTerm{}
				} else {
					yyv4424 := &yyv4422[yyj4422]
					yyv4424.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4422 := 0
		for ; !r.CheckBreak(); yyj4422++ {

			if yyj4422 >= len(yyv4422) {
				yyv4422 = append(yyv4422, NodeSelectorTerm{}) // var yyz4422 NodeSelectorTerm
				yyc4422 = true
			}
			yyh4422.ElemContainerState(yyj4422)
			if yyj4422 < len(yyv4422) {
				if r.TryDecodeAsNil() {
					yyv4422[yyj4422] = NodeSelectorTerm{}
				} else {
					yyv4425 := &yyv4422[yyj4422]
					yyv4425.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4422 < len(yyv4422) {
			yyv4422 = yyv4422[:yyj4422]
			yyc4422 = true
		} else if yyj4422 == 0 && yyv4422 == nil {
			yyv4422 = []NodeSelectorTerm{}
			yyc4422 = true
		}
	}
	yyh4422.End()
	if yyc4422 {
		*v = yyv4422
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4426 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4427 := &yyv4426
		yy4427.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4428 := *v
	yyh4428, yyl4428 := z.DecSliceHelperStart()
	var yyc4428 bool
	if yyl4428 == 0 {
		if yyv4428 == nil {
			yyv4428 = []NodeSelectorRequirement{}
			yyc4428 = true
		} else if len(yyv4428) != 0 {
			yyv4428 = yyv4428[:0]
			yyc4428 = true
		}
	} else if yyl4428 > 0 {
		var yyrr4428, yyrl4428 int
		var yyrt4428 bool
		if yyl4428 > cap(yyv4428) {

			yyrg4428 := len(yyv4428) > 0
			yyv24428 := yyv4428
			yyrl4428, yyrt4428 = z.DecInferLen(yyl4428, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4428 {
				if yyrl4428 <= cap(yyv4428) {
					yyv4428 = yyv4428[:yyrl4428]
				} else {
					yyv4428 = make([]NodeSelectorRequirement, yyrl4428)
				}
			} else {
				yyv4428 = make([]NodeSelectorRequirement, yyrl4428)
			}
			yyc4428 = true
			yyrr4428 = len(yyv4428)
			if yyrg4428 {
				copy(yyv4428, yyv24428)
			}
		} else if yyl4428 != len(yyv4428) {
			yyv4428 = yyv4428[:yyl4428]
			yyc4428 = true
		}
		yyj4428 := 0
		for ; yyj4428 < yyrr4428; yyj4428++ {
			yyh4428.ElemContainerState(yyj4428)
			if r.TryDecodeAsNil() {
				yyv4428[yyj4428] = NodeSelectorRequirement{}
			} else {
				yyv4429 := &yyv4428[yyj4428]
				yyv4429.CodecDecodeSelf(d)
			}

		}
		if yyrt4428 {
			for ; yyj4428 < yyl4428; yyj4428++ {
				yyv4428 = append(yyv4428, NodeSelectorRequirement{})
				yyh4428.ElemContainerState(yyj4428)
				if r.TryDecodeAsNil() {
					yyv4428[yyj4428] = NodeSelectorRequirement{}
				} else {
					yyv4430 := &yyv4428[yyj4428]
					yyv4430.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4428 := 0
		for ; !r.CheckBreak(); yyj4428++ {

			if yyj4428 >= len(yyv4428) {
				yyv4428 = append(yyv4428, NodeSelectorRequirement{}) // var yyz4428 NodeSelectorRequirement
				yyc4428 = true
			}
			yyh4428.ElemContainerState(yyj4428)
			if yyj4428 < len(yyv4428) {
				if r.TryDecodeAsNil() {
					yyv4428[yyj4428] = NodeSelectorRequirement{}
				} else {
					yyv4431 := &yyv4428[yyj4428]
					yyv4431.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4428 < len(yyv4428) {
			yyv4428 = yyv4428[:yyj4428]
			yyc4428 = true
		} else if yyj4428 == 0 && yyv4428 == nil {
			yyv4428 = []NodeSelectorRequirement{}
			yyc4428 = true
		}
	}
	yyh4428.End()
	if yyc4428 {
		*v = yyv4428
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4432 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4433 := &yyv4432
		yy4433.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4434 := *v
	yyh4434, yyl4434 := z.DecSliceHelperStart()
	var yyc4434 bool
	if yyl4434 == 0 {
		if yyv4434 == nil {
			yyv4434 = []PodAffinityTerm{}
			yyc4434 = true
		} else if len(yyv4434) != 0 {
			yyv4434 = yyv4434[:0]
			yyc4434 = true
		}
	} else if yyl4434 > 0 {
		var yyrr4434, yyrl4434 int
		var yyrt4434 bool
		if yyl4434 > cap(yyv4434) {

			yyrg4434 := len(yyv4434) > 0
			yyv24434 := yyv4434
			yyrl4434, yyrt4434 = z.DecInferLen(yyl4434, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4434 {
				if yyrl4434 <= cap(yyv4434) {
					yyv4434 = yyv4434[:yyrl4434]
				} else {
					yyv4434 = make([]PodAffinityTerm, yyrl4434)
				}
			} else {
				yyv4434 = make([]PodAffinityTerm, yyrl4434)
			}
			yyc4434 = true
			yyrr4434 = len(yyv4434)
			if yyrg4434 {
				copy(yyv4434, yyv24434)
			}
		} else if yyl4434 != len(yyv4434) {
			yyv4434 = yyv4434[:yyl4434]
			yyc4434 = true
		}
		yyj4434 := 0
		for ; yyj4434 < yyrr4434; yyj4434++ {
			yyh4434.ElemContainerState(yyj4434)
			if r.TryDecodeAsNil() {
				yyv4434[yyj4434] = PodAffinityTerm{}
			} else {
				yyv4435 := &yyv4434[yyj4434]
				yyv4435.CodecDecodeSelf(d)
			}

		}
		if yyrt4434 {
			for ; yyj4434 < yyl4434; yyj4434++ {
				yyv4434 = append(yyv4434, PodAffinityTerm{})
				yyh4434.ElemContainerState(yyj4434)
				if r.TryDecodeAsNil() {
					yyv4434[yyj4434] = PodAffinityTerm{}
				} else {
					yyv4436 := &yyv4434[yyj4434]
					yyv4436.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4434 := 0
		for ; !r.CheckBreak(); yyj4434++ {

			if yyj4434 >= len(yyv4434) {
				yyv4434 = append(yyv4434, PodAffinityTerm{}) // var yyz4434 PodAffinityTerm
				yyc4434 = true
			}
			yyh4434.ElemContainerState(yyj4434)
			if yyj4434 < len(yyv4434) {
				if r.TryDecodeAsNil() {
					yyv4434[yyj4434] = PodAffinityTerm{}
				} else {
					yyv4437 := &yyv4434[yyj4434]
					yyv4437.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4434 < len(yyv4434) {
			yyv4434 = yyv4434[:yyj4434]
			yyc4434 = true
		} else if yyj4434 == 0 && yyv4434 == nil {
			yyv4434 = []PodAffinityTerm{}
			yyc4434 = true
		}
	}
	yyh4434.End()
	if yyc4434 {
		*v = yyv4434
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4438 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4439 := &yyv4438
		yy4439.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4440 := *v
	yyh4440, yyl4440 := z.DecSliceHelperStart()
	var yyc4440 bool
	if yyl4440 == 0 {
		if yyv4440 == nil {
			yyv4440 = []WeightedPodAffinityTerm{}
			yyc4440 = true
		} else if len(yyv4440) != 0 {
			yyv4440 = yyv4440[:0]
			yyc4440 = true
		}
	} else if yyl4440 > 0 {
		var yyrr4440, yyrl4440 int
		var yyrt4440 bool
		if yyl4440 > cap(yyv4440) {

			yyrg4440 := len(yyv4440) > 0
			yyv24440 := yyv4440
			yyrl4440, yyrt4440 = z.DecInferLen(yyl4440, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4440 {
				if yyrl4440 <= cap(yyv4440) {
					yyv4440 = yyv4440[:yyrl4440]
				} else {
					yyv4440 = make([]WeightedPodAffinityTerm, yyrl4440)
				}
			} else {
				yyv4440 = make([]WeightedPodAffinityTerm, yyrl4440)
			}
			yyc4440 = true
			yyrr4440 = len(yyv4440)
			if yyrg4440 {
				copy(yyv4440, yyv24440)
			}
		} else if yyl4440 != len(yyv4440) {
			yyv4440 = yyv4440[:yyl4440]
			yyc4440 = true
		}
		yyj4440 := 0
		for ; yyj4440 < yyrr4440; yyj4440++ {
			yyh4440.ElemContainerState(yyj4440)
			if r.TryDecodeAsNil() {
				yyv4440[yyj4440] = WeightedPodAffinityTerm{}
			} else {
				yyv4441 := &yyv4440[yyj4440]
				yyv4441.CodecDecodeSelf(d)
			}

		}
		if yyrt4440 {
			for ; yyj4440 < yyl4440; yyj4440++ {
				yyv4440 = append(yyv4440, WeightedPodAffinityTerm{})
				yyh4440.ElemContainerState(yyj4440)
				if r.TryDecodeAsNil() {
					yyv4440[yyj4440] = WeightedPodAffinityTerm{}
				} else {
					yyv4442 := &yyv4440[yyj4440]
					yyv4442.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4440 := 0
		for ; !r.CheckBreak(); yyj4440++ {

			if yyj4440 >= len(yyv4440) {
				yyv4440 = append(yyv4440, WeightedPodAffinityTerm{}) // var yyz4440 WeightedPodAffinityTerm
				yyc4440 = true
			}
			yyh4440.ElemContainerState(yyj4440)
			if yyj4440 < len(yyv4440) {
				if r.TryDecodeAsNil() {
					yyv4440[yyj4440] = WeightedPodAffinityTerm{}
				} else {
					yyv4443 := &yyv4440[yyj4440]
					yyv4443.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4440 < len(yyv4440) {
			yyv4440 = yyv4440[:yyj4440]
			yyc4440 = true
		} else if yyj4440 == 0 && yyv4440 == nil {
			yyv4440 = []WeightedPodAffinityTerm{}
			yyc4440 = true
		}
	}
	yyh4440.End()
	if yyc4440 {
		*v = yyv4440
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4444 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4445 := &yyv4444
		yy4445.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4446 := *v
	yyh4446, yyl4446 := z.DecSliceHelperStart()
	var yyc4446 bool
	if yyl4446 == 0 {
		if yyv4446 == nil {
			yyv4446 = []PreferredSchedulingTerm{}
			yyc4446 = true
		} else if len(yyv4446) != 0 {
			yyv4446 = yyv4446[:0]
			yyc4446 = true
		}
	} else if yyl4446 > 0 {
		var yyrr4446, yyrl4446 int
		var yyrt4446 bool
		if yyl4446 > cap(yyv4446) {

			yyrg4446 := len(yyv4446) > 0
			yyv24446 := yyv4446
			yyrl4446, yyrt4446 = z.DecInferLen(yyl4446, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4446 {
				if yyrl4446 <= cap(yyv4446) {
					yyv4446 = yyv4446[:yyrl4446]
				} else {
					yyv4446 = make([]PreferredSchedulingTerm, yyrl4446)
				}
			} else {
				yyv4446 = make([]PreferredSchedulingTerm, yyrl4446)
			}
			yyc4446 = true
			yyrr4446 = len(yyv4446)
			if yyrg4446 {
				copy(yyv4446, yyv24446)
			}
		} else if yyl4446 != len(yyv4446) {
			yyv4446 = yyv4446[:yyl4446]
			yyc4446 = true
		}
		yyj4446 := 0
		for ; yyj4446 < yyrr4446; yyj4446++ {
			yyh4446.ElemContainerState(yyj4446)
			if r.TryDecodeAsNil() {
				yyv4446[yyj4446] = PreferredSchedulingTerm{}
			} else {
				yyv4447 := &yyv4446[yyj4446]
				yyv4447.CodecDecodeSelf(d)
			}

		}
		if yyrt4446 {
			for ; yyj4446 < yyl4446; yyj4446++ {
				yyv4446 = append(yyv4446, PreferredSchedulingTerm{})
				yyh4446.ElemContainerState(yyj4446)
				if r.TryDecodeAsNil() {
					yyv4446[yyj4446] = PreferredSchedulingTerm{}
				} else {
					yyv4448 := &yyv4446[yyj4446]
					yyv4448.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4446 := 0
		for ; !r.CheckBreak(); yyj4446++ {

			if yyj4446 >= len(yyv4446) {
				yyv4446 = append(yyv4446, PreferredSchedulingTerm{}) // var yyz4446 PreferredSchedulingTerm
				yyc4446 = true
			}
			yyh4446.ElemContainerState(yyj4446)
			if yyj4446 < len(yyv4446) {
				if r.TryDecodeAsNil() {
					yyv4446[yyj4446] = PreferredSchedulingTerm{}
				} else {
					yyv4449 := &yyv4446[yyj4446]
					yyv4449.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4446 < len(yyv4446) {
			yyv4446 = yyv4446[:yyj4446]
			yyc4446 = true
		} else if yyj4446 == 0 && yyv4446 == nil {
			yyv4446 = []PreferredSchedulingTerm{}
			yyc4446 = true
		}
	}
	yyh4446.End()
	if yyc4446 {
		*v = yyv4446
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4450 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4451 := &yyv4450
		yy4451.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4452 := *v
	yyh4452, yyl4452 := z.DecSliceHelperStart()
	var yyc4452 bool
	if yyl4452 == 0 {
		if yyv4452 == nil {
			yyv4452 = []Volume{}
			yyc4452 = true
		} else if len(yyv4452) != 0 {
			yyv4452 = yyv4452[:0]
			yyc4452 = true
		}
	} else if yyl4452 > 0 {
		var yyrr4452, yyrl4452 int
		var yyrt4452 bool
		if yyl4452 > cap(yyv4452) {

			yyrg4452 := len(yyv4452) > 0
			yyv24452 := yyv4452
			yyrl4452, yyrt4452 = z.DecInferLen(yyl4452, z.DecBasicHandle().MaxInitLen, 176)
			if yyrt4452 {
				if yyrl4452 <= cap(yyv4452) {
					yyv4452 = yyv4452[:yyrl4452]
				} else {
					yyv4452 = make([]Volume, yyrl4452)
				}
			} else {
				yyv4452 = make([]Volume, yyrl4452)
			}
			yyc4452 = true
			yyrr4452 = len(yyv4452)
			if yyrg4452 {
				copy(yyv4452, yyv24452)
			}
		} else if yyl4452 != len(yyv4452) {
			yyv4452 = yyv4452[:yyl4452]
			yyc4452 = true
		}
		yyj4452 := 0
		for ; yyj4452 < yyrr4452; yyj4452++ {
			yyh4452.ElemContainerState(yyj4452)
			if r.TryDecodeAsNil() {
				yyv4452[yyj4452] = Volume{}
			} else {
				yyv4453 := &yyv4452[yyj4452]
				yyv4453.CodecDecodeSelf(d)
			}

		}
		if yyrt4452 {
			for ; yyj4452 < yyl4452; yyj4452++ {
				yyv4452 = append(yyv4452, Volume{})
				yyh4452.ElemContainerState(yyj4452)
				if r.TryDecodeAsNil() {
					yyv4452[yyj4452] = Volume{}
				} else {
					yyv4454 := &yyv4452[yyj4452]
					yyv4454.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4452 := 0
		for ; !r.CheckBreak(); yyj4452++ {

			if yyj4452 >= len(yyv4452) {
				yyv4452 = append(yyv4452, Volume{}) // var yyz4452 Volume
				yyc4452 = true
			}
			yyh4452.ElemContainerState(yyj4452)
			if yyj4452 < len(yyv4452) {
				if r.TryDecodeAsNil() {
					yyv4452[yyj4452] = Volume{}
				} else {
					yyv4455 := &yyv4452[yyj4452]
					yyv4455.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4452 < len(yyv4452) {
			yyv4452 = yyv4452[:yyj4452]
			yyc4452 = true
		} else if yyj4452 == 0 && yyv4452 == nil {
			yyv4452 = []Volume{}
			yyc4452 = true
		}
	}
	yyh4452.End()
	if yyc4452 {
		*v = yyv4452
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4456 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4457 := &yyv4456
		yy4457.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4458 := *v
	yyh4458, yyl4458 := z.DecSliceHelperStart()
	var yyc4458 bool
	if yyl4458 == 0 {
		if yyv4458 == nil {
			yyv4458 = []Container{}
			yyc4458 = true
		} else if len(yyv4458) != 0 {
			yyv4458 = yyv4458[:0]
			yyc4458 = true
		}
	} else if yyl4458 > 0 {
		var yyrr4458, yyrl4458 int
		var yyrt4458 bool
		if yyl4458 > cap(yyv4458) {

			yyrg4458 := len(yyv4458) > 0
			yyv24458 := yyv4458
			yyrl4458, yyrt4458 = z.DecInferLen(yyl4458, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4458 {
				if yyrl4458 <= cap(yyv4458) {
					yyv4458 = yyv4458[:yyrl4458]
				} else {
					yyv4458 = make([]Container, yyrl4458)
				}
			} else {
				yyv4458 = make([]Container, yyrl4458)
			}
			yyc4458 = true
			yyrr4458 = len(yyv4458)
			if yyrg4458 {
				copy(yyv4458, yyv24458)
			}
		} else if yyl4458 != len(yyv4458) {
			yyv4458 = yyv4458[:yyl4458]
			yyc4458 = true
		}
		yyj4458 := 0
		for ; yyj4458 < yyrr4458; yyj4458++ {
			yyh4458.ElemContainerState(yyj4458)
			if r.TryDecodeAsNil() {
				yyv4458[yyj4458] = Container{}
			} else {
				yyv4459 := &yyv4458[yyj4458]
				yyv4459.CodecDecodeSelf(d)
			}

		}
		if yyrt4458 {
			for ; yyj4458 < yyl4458; yyj4458++ {
				yyv4458 = append(yyv4458, Container{})
				yyh4458.ElemContainerState(yyj4458)
				if r.TryDecodeAsNil() {
					yyv4458[yyj4458] = Container{}
				} else {
					yyv4460 := &yyv4458[yyj4458]
					yyv4460.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4458 := 0
		for ; !r.CheckBreak(); yyj4458++ {

			if yyj4458 >= len(yyv4458) {
				yyv4458 = append(yyv4458, Container{}) // var yyz4458 Container
				yyc4458 = true
			}
			yyh4458.ElemContainerState(yyj4458)
			if yyj4458 < len(yyv4458) {
				if r.TryDecodeAsNil() {
					yyv4458[yyj4458] = Container{}
				} else {
					yyv4461 := &yyv4458[yyj4458]
					yyv4461.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4458 < len(yyv4458) {
			yyv4458 = yyv4458[:yyj4458]
			yyc4458 = true
		} else if yyj4458 == 0 && yyv4458 == nil {
			yyv4458 = []Container{}
			yyc4458 = true
		}
	}
	yyh4458.End()
	if yyc4458 {
		*v = yyv4458
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4462 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4463 := &yyv4462
		yy4463.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4464 := *v
	yyh4464, yyl4464 := z.DecSliceHelperStart()
	var yyc4464 bool
	if yyl4464 == 0 {
		if yyv4464 == nil {
			yyv4464 = []LocalObjectReference{}
			yyc4464 = true
		} else if len(yyv4464) != 0 {
			yyv4464 = yyv4464[:0]
			yyc4464 = true
		}
	} else if yyl4464 > 0 {
		var yyrr4464, yyrl4464 int
		var yyrt4464 bool
		if yyl4464 > cap(yyv4464) {

			yyrg4464 := len(yyv4464) > 0
			yyv24464 := yyv4464
			yyrl4464, yyrt4464 = z.DecInferLen(yyl4464, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4464 {
				if yyrl4464 <= cap(yyv4464) {
					yyv4464 = yyv4464[:yyrl4464]
				} else {
					yyv4464 = make([]LocalObjectReference, yyrl4464)
				}
			} else {
				yyv4464 = make([]LocalObjectReference, yyrl4464)
			}
			yyc4464 = true
			yyrr4464 = len(yyv4464)
			if yyrg4464 {
				copy(yyv4464, yyv24464)
			}
		} else if yyl4464 != len(yyv4464) {
			yyv4464 = yyv4464[:yyl4464]
			yyc4464 = true
		}
		yyj4464 := 0
		for ; yyj4464 < yyrr4464; yyj4464++ {
			yyh4464.ElemContainerState(yyj4464)
			if r.TryDecodeAsNil() {
				yyv4464[yyj4464] = LocalObjectReference{}
			} else {
				yyv4465 := &yyv4464[yyj4464]
				yyv4465.CodecDecodeSelf(d)
			}

		}
		if yyrt4464 {
			for ; yyj4464 < yyl4464; yyj4464++ {
				yyv4464 = append(yyv4464, LocalObjectReference{})
				yyh4464.ElemContainerState(yyj4464)
				if r.TryDecodeAsNil() {
					yyv4464[yyj4464] = LocalObjectReference{}
				} else {
					yyv4466 := &yyv4464[yyj4464]
					yyv4466.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4464 := 0
		for ; !r.CheckBreak(); yyj4464++ {

			if yyj4464 >= len(yyv4464) {
				yyv4464 = append(yyv4464, LocalObjectReference{}) // var yyz4464 LocalObjectReference
				yyc4464 = true
			}
			yyh4464.ElemContainerState(yyj4464)
			if yyj4464 < len(yyv4464) {
				if r.TryDecodeAsNil() {
					yyv4464[yyj4464] = LocalObjectReference{}
				} else {
					yyv4467 := &yyv4464[yyj4464]
					yyv4467.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4464 < len(yyv4464) {
			yyv4464 = yyv4464[:yyj4464]
			yyc4464 = true
		} else if yyj4464 == 0 && yyv4464 == nil {
			yyv4464 = []LocalObjectReference{}
			yyc4464 = true
		}
	}
	yyh4464.End()
	if yyc4464 {
		*v = yyv4464
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4468 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4469 := &yyv4468
		yy4469.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4470 := *v
	yyh4470, yyl4470 := z.DecSliceHelperStart()
	var yyc4470 bool
	if yyl4470 == 0 {
		if yyv4470 == nil {
			yyv4470 = []PodCondition{}
			yyc4470 = true
		} else if len(yyv4470) != 0 {
			yyv4470 = yyv4470[:0]
			yyc4470 = true
		}
	} else if yyl4470 > 0 {
		var yyrr4470, yyrl4470 int
		var yyrt4470 bool
		if yyl4470 > cap(yyv4470) {

			yyrg4470 := len(yyv4470) > 0
			yyv24470 := yyv4470
			yyrl4470, yyrt4470 = z.DecInferLen(yyl4470, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4470 {
				if yyrl4470 <= cap(yyv4470) {
					yyv4470 = yyv4470[:yyrl4470]
				} else {
					yyv4470 = make([]PodCondition, yyrl4470)
				}
			} else {
				yyv4470 = make([]PodCondition, yyrl4470)
			}
			yyc4470 = true
			yyrr4470 = len(yyv4470)
			if yyrg4470 {
				copy(yyv4470, yyv24470)
			}
		} else if yyl4470 != len(yyv4470) {
			yyv4470 = yyv4470[:yyl4470]
			yyc4470 = true
		}
		yyj4470 := 0
		for ; yyj4470 < yyrr4470; yyj4470++ {
			yyh4470.ElemContainerState(yyj4470)
			if r.TryDecodeAsNil() {
				yyv4470[yyj4470] = PodCondition{}
			} else {
				yyv4471 := &yyv4470[yyj4470]
				yyv4471.CodecDecodeSelf(d)
			}

		}
		if yyrt4470 {
			for ; yyj4470 < yyl4470; yyj4470++ {
				yyv4470 = append(yyv4470, PodCondition{})
				yyh4470.ElemContainerState(yyj4470)
				if r.TryDecodeAsNil() {
					yyv4470[yyj4470] = PodCondition{}
				} else {
					yyv4472 := &yyv4470[yyj4470]
					yyv4472.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4470 := 0
		for ; !r.CheckBreak(); yyj4470++ {

			if yyj4470 >= len(yyv4470) {
				yyv4470 = append(yyv4470, PodCondition{}) // var yyz4470 PodCondition
				yyc4470 = true
			}
			yyh4470.ElemContainerState(yyj4470)
			if yyj4470 < len(yyv4470) {
				if r.TryDecodeAsNil() {
					yyv4470[yyj4470] = PodCondition{}
				} else {
					yyv4473 := &yyv4470[yyj4470]
					yyv4473.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4470 < len(yyv4470) {
			yyv4470 = yyv4470[:yyj4470]
			yyc4470 = true
		} else if yyj4470 == 0 && yyv4470 == nil {
			yyv4470 = []PodCondition{}
			yyc4470 = true
		}
	}
	yyh4470.End()
	if yyc4470 {
		*v = yyv4470
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4474 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4475 := &yyv4474
		yy4475.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4476 := *v
	yyh4476, yyl4476 := z.DecSliceHelperStart()
	var yyc4476 bool
	if yyl4476 == 0 {
		if yyv4476 == nil {
			yyv4476 = []ContainerStatus{}
			yyc4476 = true
		} else if len(yyv4476) != 0 {
			yyv4476 = yyv4476[:0]
			yyc4476 = true
		}
	} else if yyl4476 > 0 {
		var yyrr4476, yyrl4476 int
		var yyrt4476 bool
		if yyl4476 > cap(yyv4476) {

			yyrg4476 := len(yyv4476) > 0
			yyv24476 := yyv4476
			yyrl4476, yyrt4476 = z.DecInferLen(yyl4476, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4476 {
				if yyrl4476 <= cap(yyv4476) {
					yyv4476 = yyv4476[:yyrl4476]
				} else {
					yyv4476 = make([]ContainerStatus, yyrl4476)
				}
			} else {
				yyv4476 = make([]ContainerStatus, yyrl4476)
			}
			yyc4476 = true
			yyrr4476 = len(yyv4476)
			if yyrg4476 {
				copy(yyv4476, yyv24476)
			}
		} else if yyl4476 != len(yyv4476) {
			yyv4476 = yyv4476[:yyl4476]
			yyc4476 = true
		}
		yyj4476 := 0
		for ; yyj4476 < yyrr4476; yyj4476++ {
			yyh4476.ElemContainerState(yyj4476)
			if r.TryDecodeAsNil() {
				yyv4476[yyj4476] = ContainerStatus{}
			} else {
				yyv4477 := &yyv4476[yyj4476]
				yyv4477.CodecDecodeSelf(d)
			}

		}
		if yyrt4476 {
			for ; yyj4476 < yyl4476; yyj4476++ {
				yyv4476 = append(yyv4476, ContainerStatus{})
				yyh4476.ElemContainerState(yyj4476)
				if r.TryDecodeAsNil() {
					yyv4476[yyj4476] = ContainerStatus{}
				} else {
					yyv4478 := &yyv4476[yyj4476]
					yyv4478.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4476 := 0
		for ; !r.CheckBreak(); yyj4476++ {

			if yyj4476 >= len(yyv4476) {
				yyv4476 = append(yyv4476, ContainerStatus{}) // var yyz4476 ContainerStatus
				yyc4476 = true
			}
			yyh4476.ElemContainerState(yyj4476)
			if yyj4476 < len(yyv4476) {
				if r.TryDecodeAsNil() {
					yyv4476[yyj4476] = ContainerStatus{}
				} else {
					yyv4479 := &yyv4476[yyj4476]
					yyv4479.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4476 < len(yyv4476) {
			yyv4476 = yyv4476[:yyj4476]
			yyc4476 = true
		} else if yyj4476 == 0 && yyv4476 == nil {
			yyv4476 = []ContainerStatus{}
			yyc4476 = true
		}
	}
	yyh4476.End()
	if yyc4476 {
		*v = yyv4476
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4481 := &yyv4480
		yy4481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4482 := *v
	yyh4482, yyl4482 := z.DecSliceHelperStart()
	var yyc4482 bool
	if yyl4482 == 0 {
		if yyv4482 == nil {
			yyv4482 = []Pod{}
			yyc4482 = true
		} else if len(yyv4482) != 0 {
			yyv4482 = yyv4482[:0]
			yyc4482 = true
		}
	} else if yyl4482 > 0 {
		var yyrr4482, yyrl4482 int
		var yyrt4482 bool
		if yyl4482 > cap(yyv4482) {

			yyrg4482 := len(yyv4482) > 0
			yyv24482 := yyv4482
			yyrl4482, yyrt4482 = z.DecInferLen(yyl4482, z.DecBasicHandle().MaxInitLen, 648)
			if yyrt4482 {
				if yyrl4482 <= cap(yyv4482) {
					yyv4482 = yyv4482[:yyrl4482]
				} else {
					yyv4482 = make([]Pod, yyrl4482)
				}
			} else {
				yyv4482 = make([]Pod, yyrl4482)
			}
			yyc4482 = true
			yyrr4482 = len(yyv4482)
			if yyrg4482 {
				copy(yyv4482, yyv24482)
			}
		} else if yyl4482 != len(yyv4482) {
			yyv4482 = yyv4482[:yyl4482]
			yyc4482 = true
		}
		yyj4482 := 0
		for ; yyj4482 < yyrr4482; yyj4482++ {
			yyh4482.ElemContainerState(yyj4482)
			if r.TryDecodeAsNil() {
				yyv4482[yyj4482] = Pod{}
			} else {
				yyv4483 := &yyv4482[yyj4482]
				yyv4483.CodecDecodeSelf(d)
			}

		}
		if yyrt4482 {
			for ; yyj4482 < yyl4482; yyj4482++ {
				yyv4482 = append(yyv4482, Pod{})
				yyh4482.ElemContainerState(yyj4482)
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = Pod{}
				} else {
					yyv4484 := &yyv4482[yyj4482]
					yyv4484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4482 := 0
		for ; !r.CheckBreak(); yyj4482++ {

			if yyj4482 >= len(yyv4482) {
				yyv4482 = append(yyv4482, Pod{}) // var yyz4482 Pod
				yyc4482 = true
			}
			yyh4482.ElemContainerState(yyj4482)
			if yyj4482 < len(yyv4482) {
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = Pod{}
				} else {
					yyv4485 := &yyv4482[yyj4482]
					yyv4485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4482 < len(yyv4482) {
			yyv4482 = yyv4482[:yyj4482]
			yyc4482 = true
		} else if yyj4482 == 0 && yyv4482 == nil {
			yyv4482 = []Pod{}
			yyc4482 = true
		}
	}
	yyh4482.End()
	if yyc4482 {
		*v = yyv4482
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4487 := &yyv4486
		yy4487.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4488 := *v
	yyh4488, yyl4488 := z.DecSliceHelperStart()
	var yyc4488 bool
	if yyl4488 == 0 {
		if yyv4488 == nil {
			yyv4488 = []PodTemplate{}
			yyc4488 = true
		} else if len(yyv4488) != 0 {
			yyv4488 = yyv4488[:0]
			yyc4488 = true
		}
	} else if yyl4488 > 0 {
		var yyrr4488, yyrl4488 int
		var yyrt4488 bool
		if yyl4488 > cap(yyv4488) {

			yyrg4488 := len(yyv4488) > 0
			yyv24488 := yyv4488
			yyrl4488, yyrt4488 = z.DecInferLen(yyl4488, z.DecBasicHandle().MaxInitLen, 696)
			if yyrt4488 {
				if yyrl4488 <= cap(yyv4488) {
					yyv4488 = yyv4488[:yyrl4488]
				} else {
					yyv4488 = make([]PodTemplate, yyrl4488)
				}
			} else {
				yyv4488 = make([]PodTemplate, yyrl4488)
			}
			yyc4488 = true
			yyrr4488 = len(yyv4488)
			if yyrg4488 {
				copy(yyv4488, yyv24488)
			}
		} else if yyl4488 != len(yyv4488) {
			yyv4488 = yyv4488[:yyl4488]
			yyc4488 = true
		}
		yyj4488 := 0
		for ; yyj4488 < yyrr4488; yyj4488++ {
			yyh4488.ElemContainerState(yyj4488)
			if r.TryDecodeAsNil() {
				yyv4488[yyj4488] = PodTemplate{}
			} else {
				yyv4489 := &yyv4488[yyj4488]
				yyv4489.CodecDecodeSelf(d)
			}

		}
		if yyrt4488 {
			for ; yyj4488 < yyl4488; yyj4488++ {
				yyv4488 = append(yyv4488, PodTemplate{})
				yyh4488.ElemContainerState(yyj4488)
				if r.TryDecodeAsNil() {
					yyv4488[yyj4488] = PodTemplate{}
				} else {
					yyv4490 := &yyv4488[yyj4488]
					yyv4490.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4488 := 0
		for ; !r.CheckBreak(); yyj4488++ {

			if yyj4488 >= len(yyv4488) {
				yyv4488 = append(yyv4488, PodTemplate{}) // var yyz4488 PodTemplate
				yyc4488 = true
			}
			yyh4488.ElemContainerState(yyj4488)
			if yyj4488 < len(yyv4488) {
				if r.TryDecodeAsNil() {
					yyv4488[yyj4488] = PodTemplate{}
				} else {
					yyv4491 := &yyv4488[yyj4488]
					yyv4491.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4488 < len(yyv4488) {
			yyv4488 = yyv4488[:yyj4488]
			yyc4488 = true
		} else if yyj4488 == 0 && yyv4488 == nil {
			yyv4488 = []PodTemplate{}
			yyc4488 = true
		}
	}
	yyh4488.End()
	if yyc4488 {
		*v = yyv4488
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4492 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4493 := &yyv4492
		yy4493.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4494 := *v
	yyh4494, yyl4494 := z.DecSliceHelperStart()
	var yyc4494 bool
	if yyl4494 == 0 {
		if yyv4494 == nil {
			yyv4494 = []ReplicationController{}
			yyc4494 = true
		} else if len(yyv4494) != 0 {
			yyv4494 = yyv4494[:0]
			yyc4494 = true
		}
	} else if yyl4494 > 0 {
		var yyrr4494, yyrl4494 int
		var yyrt4494 bool
		if yyl4494 > cap(yyv4494) {

			yyrg4494 := len(yyv4494) > 0
			yyv24494 := yyv4494
			yyrl4494, yyrt4494 = z.DecInferLen(yyl4494, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4494 {
				if yyrl4494 <= cap(yyv4494) {
					yyv4494 = yyv4494[:yyrl4494]
				} else {
					yyv4494 = make([]ReplicationController, yyrl4494)
				}
			} else {
				yyv4494 = make([]ReplicationController, yyrl4494)
			}
			yyc4494 = true
			yyrr4494 = len(yyv4494)
			if yyrg4494 {
				copy(yyv4494, yyv24494)
			}
		} else if yyl4494 != len(yyv4494) {
			yyv4494 = yyv4494[:yyl4494]
			yyc4494 = true
		}
		yyj4494 := 0
		for ; yyj4494 < yyrr4494; yyj4494++ {
			yyh4494.ElemContainerState(yyj4494)
			if r.TryDecodeAsNil() {
				yyv4494[yyj4494] = ReplicationController{}
			} else {
				yyv4495 := &yyv4494[yyj4494]
				yyv4495.CodecDecodeSelf(d)
			}

		}
		if yyrt4494 {
			for ; yyj4494 < yyl4494; yyj4494++ {
				yyv4494 = append(yyv4494, ReplicationController{})
				yyh4494.ElemContainerState(yyj4494)
				if r.TryDecodeAsNil() {
					yyv4494[yyj4494] = ReplicationController{}
				} else {
					yyv4496 := &yyv4494[yyj4494]
					yyv4496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4494 := 0
		for ; !r.CheckBreak(); yyj4494++ {

			if yyj4494 >= len(yyv4494) {
				yyv4494 = append(yyv4494, ReplicationController{}) // var yyz4494 ReplicationController
				yyc4494 = true
			}
			yyh4494.ElemContainerState(yyj4494)
			if yyj4494 < len(yyv4494) {
				if r.TryDecodeAsNil() {
					yyv4494[yyj4494] = ReplicationController{}
				} else {
					yyv4497 := &yyv4494[yyj4494]
					yyv4497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4494 < len(yyv4494) {
			yyv4494 = yyv4494[:yyj4494]
			yyc4494 = true
		} else if yyj4494 == 0 && yyv4494 == nil {
			yyv4494 = []ReplicationController{}
			yyc4494 = true
		}
	}
	yyh4494.End()
	if yyc4494 {
		*v = yyv4494
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4498 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4499 := &yyv4498
		yy4499.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4500 := *v
	yyh4500, yyl4500 := z.DecSliceHelperStart()
	var yyc4500 bool
	if yyl4500 == 0 {
		if yyv4500 == nil {
			yyv4500 = []LoadBalancerIngress{}
			yyc4500 = true
		} else if len(yyv4500) != 0 {
			yyv4500 = yyv4500[:0]
			yyc4500 = true
		}
	} else if yyl4500 > 0 {
		var yyrr4500, yyrl4500 int
		var yyrt4500 bool
		if yyl4500 > cap(yyv4500) {

			yyrg4500 := len(yyv4500) > 0
			yyv24500 := yyv4500
			yyrl4500, yyrt4500 = z.DecInferLen(yyl4500, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4500 {
				if yyrl4500 <= cap(yyv4500) {
					yyv4500 = yyv4500[:yyrl4500]
				} else {
					yyv4500 = make([]LoadBalancerIngress, yyrl4500)
				}
			} else {
				yyv4500 = make([]LoadBalancerIngress, yyrl4500)
			}
			yyc4500 = true
			yyrr4500 = len(yyv4500)
			if yyrg4500 {
				copy(yyv4500, yyv24500)
			}
		} else if yyl4500 != len(yyv4500) {
			yyv4500 = yyv4500[:yyl4500]
			yyc4500 = true
		}
		yyj4500 := 0
		for ; yyj4500 < yyrr4500; yyj4500++ {
			yyh4500.ElemContainerState(yyj4500)
			if r.TryDecodeAsNil() {
				yyv4500[yyj4500] = LoadBalancerIngress{}
			} else {
				yyv4501 := &yyv4500[yyj4500]
				yyv4501.CodecDecodeSelf(d)
			}

		}
		if yyrt4500 {
			for ; yyj4500 < yyl4500; yyj4500++ {
				yyv4500 = append(yyv4500, LoadBalancerIngress{})
				yyh4500.ElemContainerState(yyj4500)
				if r.TryDecodeAsNil() {
					yyv4500[yyj4500] = LoadBalancerIngress{}
				} else {
					yyv4502 := &yyv4500[yyj4500]
					yyv4502.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4500 := 0
		for ; !r.CheckBreak(); yyj4500++ {

			if yyj4500 >= len(yyv4500) {
				yyv4500 = append(yyv4500, LoadBalancerIngress{}) // var yyz4500 LoadBalancerIngress
				yyc4500 = true
			}
			yyh4500.ElemContainerState(yyj4500)
			if yyj4500 < len(yyv4500) {
				if r.TryDecodeAsNil() {
					yyv4500[yyj4500] = LoadBalancerIngress{}
				} else {
					yyv4503 := &yyv4500[yyj4500]
					yyv4503.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4500 < len(yyv4500) {
			yyv4500 = yyv4500[:yyj4500]
			yyc4500 = true
		} else if yyj4500 == 0 && yyv4500 == nil {
			yyv4500 = []LoadBalancerIngress{}
			yyc4500 = true
		}
	}
	yyh4500.End()
	if yyc4500 {
		*v = yyv4500
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4504 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4505 := &yyv4504
		yy4505.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4506 := *v
	yyh4506, yyl4506 := z.DecSliceHelperStart()
	var yyc4506 bool
	if yyl4506 == 0 {
		if yyv4506 == nil {
			yyv4506 = []ServicePort{}
			yyc4506 = true
		} else if len(yyv4506) != 0 {
			yyv4506 = yyv4506[:0]
			yyc4506 = true
		}
	} else if yyl4506 > 0 {
		var yyrr4506, yyrl4506 int
		var yyrt4506 bool
		if yyl4506 > cap(yyv4506) {

			yyrg4506 := len(yyv4506) > 0
			yyv24506 := yyv4506
			yyrl4506, yyrt4506 = z.DecInferLen(yyl4506, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4506 {
				if yyrl4506 <= cap(yyv4506) {
					yyv4506 = yyv4506[:yyrl4506]
				} else {
					yyv4506 = make([]ServicePort, yyrl4506)
				}
			} else {
				yyv4506 = make([]ServicePort, yyrl4506)
			}
			yyc4506 = true
			yyrr4506 = len(yyv4506)
			if yyrg4506 {
				copy(yyv4506, yyv24506)
			}
		} else if yyl4506 != len(yyv4506) {
			yyv4506 = yyv4506[:yyl4506]
			yyc4506 = true
		}
		yyj4506 := 0
		for ; yyj4506 < yyrr4506; yyj4506++ {
			yyh4506.ElemContainerState(yyj4506)
			if r.TryDecodeAsNil() {
				yyv4506[yyj4506] = ServicePort{}
			} else {
				yyv4507 := &yyv4506[yyj4506]
				yyv4507.CodecDecodeSelf(d)
			}

		}
		if yyrt4506 {
			for ; yyj4506 < yyl4506; yyj4506++ {
				yyv4506 = append(yyv4506, ServicePort{})
				yyh4506.ElemContainerState(yyj4506)
				if r.TryDecodeAsNil() {
					yyv4506[yyj4506] = ServicePort{}
				} else {
					yyv4508 := &yyv4506[yyj4506]
					yyv4508.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4506 := 0
		for ; !r.CheckBreak(); yyj4506++ {

			if yyj4506 >= len(yyv4506) {
				yyv4506 = append(yyv4506, ServicePort{}) // var yyz4506 ServicePort
				yyc4506 = true
			}
			yyh4506.ElemContainerState(yyj4506)
			if yyj4506 < len(yyv4506) {
				if r.TryDecodeAsNil() {
					yyv4506[yyj4506] = ServicePort{}
				} else {
					yyv4509 := &yyv4506[yyj4506]
					yyv4509.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4506 < len(yyv4506) {
			yyv4506 = yyv4506[:yyj4506]
			yyc4506 = true
		} else if yyj4506 == 0 && yyv4506 == nil {
			yyv4506 = []ServicePort{}
			yyc4506 = true
		}
	}
	yyh4506.End()
	if yyc4506 {
		*v = yyv4506
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4510 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4511 := &yyv4510
		yy4511.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4512 := *v
	yyh4512, yyl4512 := z.DecSliceHelperStart()
	var yyc4512 bool
	if yyl4512 == 0 {
		if yyv4512 == nil {
			yyv4512 = []Service{}
			yyc4512 = true
		} else if len(yyv4512) != 0 {
			yyv4512 = yyv4512[:0]
			yyc4512 = true
		}
	} else if yyl4512 > 0 {
		var yyrr4512, yyrl4512 int
		var yyrt4512 bool
		if yyl4512 > cap(yyv4512) {

			yyrg4512 := len(yyv4512) > 0
			yyv24512 := yyv4512
			yyrl4512, yyrt4512 = z.DecInferLen(yyl4512, z.DecBasicHandle().MaxInitLen, 432)
			if yyrt4512 {
				if yyrl4512 <= cap(yyv4512) {
					yyv4512 = yyv4512[:yyrl4512]
				} else {
					yyv4512 = make([]Service, yyrl4512)
				}
			} else {
				yyv4512 = make([]Service, yyrl4512)
			}
			yyc4512 = true
			yyrr4512 = len(yyv4512)
			if yyrg4512 {
				copy(yyv4512, yyv24512)
			}
		} else if yyl4512 != len(yyv4512) {
			yyv4512 = yyv4512[:yyl4512]
			yyc4512 = true
		}
		yyj4512 := 0
		for ; yyj4512 < yyrr4512; yyj4512++ {
			yyh4512.ElemContainerState(yyj4512)
			if r.TryDecodeAsNil() {
				yyv4512[yyj4512] = Service{}
			} else {
				yyv4513 := &yyv4512[yyj4512]
				yyv4513.CodecDecodeSelf(d)
			}

		}
		if yyrt4512 {
			for ; yyj4512 < yyl4512; yyj4512++ {
				yyv4512 = append(yyv4512, Service{})
				yyh4512.ElemContainerState(yyj4512)
				if r.TryDecodeAsNil() {
					yyv4512[yyj4512] = Service{}
				} else {
					yyv4514 := &yyv4512[yyj4512]
					yyv4514.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4512 := 0
		for ; !r.CheckBreak(); yyj4512++ {

			if yyj4512 >= len(yyv4512) {
				yyv4512 = append(yyv4512, Service{}) // var yyz4512 Service
				yyc4512 = true
			}
			yyh4512.ElemContainerState(yyj4512)
			if yyj4512 < len(yyv4512) {
				if r.TryDecodeAsNil() {
					yyv4512[yyj4512] = Service{}
				} else {
					yyv4515 := &yyv4512[yyj4512]
					yyv4515.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4512 < len(yyv4512) {
			yyv4512 = yyv4512[:yyj4512]
			yyc4512 = true
		} else if yyj4512 == 0 && yyv4512 == nil {
			yyv4512 = []Service{}
			yyc4512 = true
		}
	}
	yyh4512.End()
	if yyc4512 {
		*v = yyv4512
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4516 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4517 := &yyv4516
		yy4517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4518 := *v
	yyh4518, yyl4518 := z.DecSliceHelperStart()
	var yyc4518 bool
	if yyl4518 == 0 {
		if yyv4518 == nil {
			yyv4518 = []ObjectReference{}
			yyc4518 = true
		} else if len(yyv4518) != 0 {
			yyv4518 = yyv4518[:0]
			yyc4518 = true
		}
	} else if yyl4518 > 0 {
		var yyrr4518, yyrl4518 int
		var yyrt4518 bool
		if yyl4518 > cap(yyv4518) {

			yyrg4518 := len(yyv4518) > 0
			yyv24518 := yyv4518
			yyrl4518, yyrt4518 = z.DecInferLen(yyl4518, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4518 {
				if yyrl4518 <= cap(yyv4518) {
					yyv4518 = yyv4518[:yyrl4518]
				} else {
					yyv4518 = make([]ObjectReference, yyrl4518)
				}
			} else {
				yyv4518 = make([]ObjectReference, yyrl4518)
			}
			yyc4518 = true
			yyrr4518 = len(yyv4518)
			if yyrg4518 {
				copy(yyv4518, yyv24518)
			}
		} else if yyl4518 != len(yyv4518) {
			yyv4518 = yyv4518[:yyl4518]
			yyc4518 = true
		}
		yyj4518 := 0
		for ; yyj4518 < yyrr4518; yyj4518++ {
			yyh4518.ElemContainerState(yyj4518)
			if r.TryDecodeAsNil() {
				yyv4518[yyj4518] = ObjectReference{}
			} else {
				yyv4519 := &yyv4518[yyj4518]
				yyv4519.CodecDecodeSelf(d)
			}

		}
		if yyrt4518 {
			for ; yyj4518 < yyl4518; yyj4518++ {
				yyv4518 = append(yyv4518, ObjectReference{})
				yyh4518.ElemContainerState(yyj4518)
				if r.TryDecodeAsNil() {
					yyv4518[yyj4518] = ObjectReference{}
				} else {
					yyv4520 := &yyv4518[yyj4518]
					yyv4520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4518 := 0
		for ; !r.CheckBreak(); yyj4518++ {

			if yyj4518 >= len(yyv4518) {
				yyv4518 = append(yyv4518, ObjectReference{}) // var yyz4518 ObjectReference
				yyc4518 = true
			}
			yyh4518.ElemContainerState(yyj4518)
			if yyj4518 < len(yyv4518) {
				if r.TryDecodeAsNil() {
					yyv4518[yyj4518] = ObjectReference{}
				} else {
					yyv4521 := &yyv4518[yyj4518]
					yyv4521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4518 < len(yyv4518) {
			yyv4518 = yyv4518[:yyj4518]
			yyc4518 = true
		} else if yyj4518 == 0 && yyv4518 == nil {
			yyv4518 = []ObjectReference{}
			yyc4518 = true
		}
	}
	yyh4518.End()
	if yyc4518 {
		*v = yyv4518
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4523 := &yyv4522
		yy4523.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4524 := *v
	yyh4524, yyl4524 := z.DecSliceHelperStart()
	var yyc4524 bool
	if yyl4524 == 0 {
		if yyv4524 == nil {
			yyv4524 = []ServiceAccount{}
			yyc4524 = true
		} else if len(yyv4524) != 0 {
			yyv4524 = yyv4524[:0]
			yyc4524 = true
		}
	} else if yyl4524 > 0 {
		var yyrr4524, yyrl4524 int
		var yyrt4524 bool
		if yyl4524 > cap(yyv4524) {

			yyrg4524 := len(yyv4524) > 0
			yyv24524 := yyv4524
			yyrl4524, yyrt4524 = z.DecInferLen(yyl4524, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4524 {
				if yyrl4524 <= cap(yyv4524) {
					yyv4524 = yyv4524[:yyrl4524]
				} else {
					yyv4524 = make([]ServiceAccount, yyrl4524)
				}
			} else {
				yyv4524 = make([]ServiceAccount, yyrl4524)
			}
			yyc4524 = true
			yyrr4524 = len(yyv4524)
			if yyrg4524 {
				copy(yyv4524, yyv24524)
			}
		} else if yyl4524 != len(yyv4524) {
			yyv4524 = yyv4524[:yyl4524]
			yyc4524 = true
		}
		yyj4524 := 0
		for ; yyj4524 < yyrr4524; yyj4524++ {
			yyh4524.ElemContainerState(yyj4524)
			if r.TryDecodeAsNil() {
				yyv4524[yyj4524] = ServiceAccount{}
			} else {
				yyv4525 := &yyv4524[yyj4524]
				yyv4525.CodecDecodeSelf(d)
			}

		}
		if yyrt4524 {
			for ; yyj4524 < yyl4524; yyj4524++ {
				yyv4524 = append(yyv4524, ServiceAccount{})
				yyh4524.ElemContainerState(yyj4524)
				if r.TryDecodeAsNil() {
					yyv4524[yyj4524] = ServiceAccount{}
				} else {
					yyv4526 := &yyv4524[yyj4524]
					yyv4526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4524 := 0
		for ; !r.CheckBreak(); yyj4524++ {

			if yyj4524 >= len(yyv4524) {
				yyv4524 = append(yyv4524, ServiceAccount{}) // var yyz4524 ServiceAccount
				yyc4524 = true
			}
			yyh4524.ElemContainerState(yyj4524)
			if yyj4524 < len(yyv4524) {
				if r.TryDecodeAsNil() {
					yyv4524[yyj4524] = ServiceAccount{}
				} else {
					yyv4527 := &yyv4524[yyj4524]
					yyv4527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4524 < len(yyv4524) {
			yyv4524 = yyv4524[:yyj4524]
			yyc4524 = true
		} else if yyj4524 == 0 && yyv4524 == nil {
			yyv4524 = []ServiceAccount{}
			yyc4524 = true
		}
	}
	yyh4524.End()
	if yyc4524 {
		*v = yyv4524
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4528 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4529 := &yyv4528
		yy4529.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4530 := *v
	yyh4530, yyl4530 := z.DecSliceHelperStart()
	var yyc4530 bool
	if yyl4530 == 0 {
		if yyv4530 == nil {
			yyv4530 = []EndpointSubset{}
			yyc4530 = true
		} else if len(yyv4530) != 0 {
			yyv4530 = yyv4530[:0]
			yyc4530 = true
		}
	} else if yyl4530 > 0 {
		var yyrr4530, yyrl4530 int
		var yyrt4530 bool
		if yyl4530 > cap(yyv4530) {

			yyrg4530 := len(yyv4530) > 0
			yyv24530 := yyv4530
			yyrl4530, yyrt4530 = z.DecInferLen(yyl4530, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4530 {
				if yyrl4530 <= cap(yyv4530) {
					yyv4530 = yyv4530[:yyrl4530]
				} else {
					yyv4530 = make([]EndpointSubset, yyrl4530)
				}
			} else {
				yyv4530 = make([]EndpointSubset, yyrl4530)
			}
			yyc4530 = true
			yyrr4530 = len(yyv4530)
			if yyrg4530 {
				copy(yyv4530, yyv24530)
			}
		} else if yyl4530 != len(yyv4530) {
			yyv4530 = yyv4530[:yyl4530]
			yyc4530 = true
		}
		yyj4530 := 0
		for ; yyj4530 < yyrr4530; yyj4530++ {
			yyh4530.ElemContainerState(yyj4530)
			if r.TryDecodeAsNil() {
				yyv4530[yyj4530] = EndpointSubset{}
			} else {
				yyv4531 := &yyv4530[yyj4530]
				yyv4531.CodecDecodeSelf(d)
			}

		}
		if yyrt4530 {
			for ; yyj4530 < yyl4530; yyj4530++ {
				yyv4530 = append(yyv4530, EndpointSubset{})
				yyh4530.ElemContainerState(yyj4530)
				if r.TryDecodeAsNil() {
					yyv4530[yyj4530] = EndpointSubset{}
				} else {
					yyv4532 := &yyv4530[yyj4530]
					yyv4532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4530 := 0
		for ; !r.CheckBreak(); yyj4530++ {

			if yyj4530 >= len(yyv4530) {
				yyv4530 = append(yyv4530, EndpointSubset{}) // var yyz4530 EndpointSubset
				yyc4530 = true
			}
			yyh4530.ElemContainerState(yyj4530)
			if yyj4530 < len(yyv4530) {
				if r.TryDecodeAsNil() {
					yyv4530[yyj4530] = EndpointSubset{}
				} else {
					yyv4533 := &yyv4530[yyj4530]
					yyv4533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4530 < len(yyv4530) {
			yyv4530 = yyv4530[:yyj4530]
			yyc4530 = true
		} else if yyj4530 == 0 && yyv4530 == nil {
			yyv4530 = []EndpointSubset{}
			yyc4530 = true
		}
	}
	yyh4530.End()
	if yyc4530 {
		*v = yyv4530
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4534 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4535 := &yyv4534
		yy4535.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4536 := *v
	yyh4536, yyl4536 := z.DecSliceHelperStart()
	var yyc4536 bool
	if yyl4536 == 0 {
		if yyv4536 == nil {
			yyv4536 = []EndpointAddress{}
			yyc4536 = true
		} else if len(yyv4536) != 0 {
			yyv4536 = yyv4536[:0]
			yyc4536 = true
		}
	} else if yyl4536 > 0 {
		var yyrr4536, yyrl4536 int
		var yyrt4536 bool
		if yyl4536 > cap(yyv4536) {

			yyrg4536 := len(yyv4536) > 0
			yyv24536 := yyv4536
			yyrl4536, yyrt4536 = z.DecInferLen(yyl4536, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4536 {
				if yyrl4536 <= cap(yyv4536) {
					yyv4536 = yyv4536[:yyrl4536]
				} else {
					yyv4536 = make([]EndpointAddress, yyrl4536)
				}
			} else {
				yyv4536 = make([]EndpointAddress, yyrl4536)
			}
			yyc4536 = true
			yyrr4536 = len(yyv4536)
			if yyrg4536 {
				copy(yyv4536, yyv24536)
			}
		} else if yyl4536 != len(yyv4536) {
			yyv4536 = yyv4536[:yyl4536]
			yyc4536 = true
		}
		yyj4536 := 0
		for ; yyj4536 < yyrr4536; yyj4536++ {
			yyh4536.ElemContainerState(yyj4536)
			if r.TryDecodeAsNil() {
				yyv4536[yyj4536] = EndpointAddress{}
			} else {
				yyv4537 := &yyv4536[yyj4536]
				yyv4537.CodecDecodeSelf(d)
			}

		}
		if yyrt4536 {
			for ; yyj4536 < yyl4536; yyj4536++ {
				yyv4536 = append(yyv4536, EndpointAddress{})
				yyh4536.ElemContainerState(yyj4536)
				if r.TryDecodeAsNil() {
					yyv4536[yyj4536] = EndpointAddress{}
				} else {
					yyv4538 := &yyv4536[yyj4536]
					yyv4538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4536 := 0
		for ; !r.CheckBreak(); yyj4536++ {

			if yyj4536 >= len(yyv4536) {
				yyv4536 = append(yyv4536, EndpointAddress{}) // var yyz4536 EndpointAddress
				yyc4536 = true
			}
			yyh4536.ElemContainerState(yyj4536)
			if yyj4536 < len(yyv4536) {
				if r.TryDecodeAsNil() {
					yyv4536[yyj4536] = EndpointAddress{}
				} else {
					yyv4539 := &yyv4536[yyj4536]
					yyv4539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4536 < len(yyv4536) {
			yyv4536 = yyv4536[:yyj4536]
			yyc4536 = true
		} else if yyj4536 == 0 && yyv4536 == nil {
			yyv4536 = []EndpointAddress{}
			yyc4536 = true
		}
	}
	yyh4536.End()
	if yyc4536 {
		*v = yyv4536
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4540 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4541 := &yyv4540
		yy4541.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4542 := *v
	yyh4542, yyl4542 := z.DecSliceHelperStart()
	var yyc4542 bool
	if yyl4542 == 0 {
		if yyv4542 == nil {
			yyv4542 = []EndpointPort{}
			yyc4542 = true
		} else if len(yyv4542) != 0 {
			yyv4542 = yyv4542[:0]
			yyc4542 = true
		}
	} else if yyl4542 > 0 {
		var yyrr4542, yyrl4542 int
		var yyrt4542 bool
		if yyl4542 > cap(yyv4542) {

			yyrg4542 := len(yyv4542) > 0
			yyv24542 := yyv4542
			yyrl4542, yyrt4542 = z.DecInferLen(yyl4542, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4542 {
				if yyrl4542 <= cap(yyv4542) {
					yyv4542 = yyv4542[:yyrl4542]
				} else {
					yyv4542 = make([]EndpointPort, yyrl4542)
				}
			} else {
				yyv4542 = make([]EndpointPort, yyrl4542)
			}
			yyc4542 = true
			yyrr4542 = len(yyv4542)
			if yyrg4542 {
				copy(yyv4542, yyv24542)
			}
		} else if yyl4542 != len(yyv4542) {
			yyv4542 = yyv4542[:yyl4542]
			yyc4542 = true
		}
		yyj4542 := 0
		for ; yyj4542 < yyrr4542; yyj4542++ {
			yyh4542.ElemContainerState(yyj4542)
			if r.TryDecodeAsNil() {
				yyv4542[yyj4542] = EndpointPort{}
			} else {
				yyv4543 := &yyv4542[yyj4542]
				yyv4543.CodecDecodeSelf(d)
			}

		}
		if yyrt4542 {
			for ; yyj4542 < yyl4542; yyj4542++ {
				yyv4542 = append(yyv4542, EndpointPort{})
				yyh4542.ElemContainerState(yyj4542)
				if r.TryDecodeAsNil() {
					yyv4542[yyj4542] = EndpointPort{}
				} else {
					yyv4544 := &yyv4542[yyj4542]
					yyv4544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4542 := 0
		for ; !r.CheckBreak(); yyj4542++ {

			if yyj4542 >= len(yyv4542) {
				yyv4542 = append(yyv4542, EndpointPort{}) // var yyz4542 EndpointPort
				yyc4542 = true
			}
			yyh4542.ElemContainerState(yyj4542)
			if yyj4542 < len(yyv4542) {
				if r.TryDecodeAsNil() {
					yyv4542[yyj4542] = EndpointPort{}
				} else {
					yyv4545 := &yyv4542[yyj4542]
					yyv4545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4542 < len(yyv4542) {
			yyv4542 = yyv4542[:yyj4542]
			yyc4542 = true
		} else if yyj4542 == 0 && yyv4542 == nil {
			yyv4542 = []EndpointPort{}
			yyc4542 = true
		}
	}
	yyh4542.End()
	if yyc4542 {
		*v = yyv4542
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4546 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4547 := &yyv4546
		yy4547.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4548 := *v
	yyh4548, yyl4548 := z.DecSliceHelperStart()
	var yyc4548 bool
	if yyl4548 == 0 {
		if yyv4548 == nil {
			yyv4548 = []Endpoints{}
			yyc4548 = true
		} else if len(yyv4548) != 0 {
			yyv4548 = yyv4548[:0]
			yyc4548 = true
		}
	} else if yyl4548 > 0 {
		var yyrr4548, yyrl4548 int
		var yyrt4548 bool
		if yyl4548 > cap(yyv4548) {

			yyrg4548 := len(yyv4548) > 0
			yyv24548 := yyv4548
			yyrl4548, yyrt4548 = z.DecInferLen(yyl4548, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4548 {
				if yyrl4548 <= cap(yyv4548) {
					yyv4548 = yyv4548[:yyrl4548]
				} else {
					yyv4548 = make([]Endpoints, yyrl4548)
				}
			} else {
				yyv4548 = make([]Endpoints, yyrl4548)
			}
			yyc4548 = true
			yyrr4548 = len(yyv4548)
			if yyrg4548 {
				copy(yyv4548, yyv24548)
			}
		} else if yyl4548 != len(yyv4548) {
			yyv4548 = yyv4548[:yyl4548]
			yyc4548 = true
		}
		yyj4548 := 0
		for ; yyj4548 < yyrr4548; yyj4548++ {
			yyh4548.ElemContainerState(yyj4548)
			if r.TryDecodeAsNil() {
				yyv4548[yyj4548] = Endpoints{}
			} else {
				yyv4549 := &yyv4548[yyj4548]
				yyv4549.CodecDecodeSelf(d)
			}

		}
		if yyrt4548 {
			for ; yyj4548 < yyl4548; yyj4548++ {
				yyv4548 = append(yyv4548, Endpoints{})
				yyh4548.ElemContainerState(yyj4548)
				if r.TryDecodeAsNil() {
					yyv4548[yyj4548] = Endpoints{}
				} else {
					yyv4550 := &yyv4548[yyj4548]
					yyv4550.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4548 := 0
		for ; !r.CheckBreak(); yyj4548++ {

			if yyj4548 >= len(yyv4548) {
				yyv4548 = append(yyv4548, Endpoints{}) // var yyz4548 Endpoints
				yyc4548 = true
			}
			yyh4548.ElemContainerState(yyj4548)
			if yyj4548 < len(yyv4548) {
				if r.TryDecodeAsNil() {
					yyv4548[yyj4548] = Endpoints{}
				} else {
					yyv4551 := &yyv4548[yyj4548]
					yyv4551.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4548 < len(yyv4548) {
			yyv4548 = yyv4548[:yyj4548]
			yyc4548 = true
		} else if yyj4548 == 0 && yyv4548 == nil {
			yyv4548 = []Endpoints{}
			yyc4548 = true
		}
	}
	yyh4548.End()
	if yyc4548 {
		*v = yyv4548
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4552 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4553 := &yyv4552
		yy4553.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4554 := *v
	yyh4554, yyl4554 := z.DecSliceHelperStart()
	var yyc4554 bool
	if yyl4554 == 0 {
		if yyv4554 == nil {
			yyv4554 = []NodeCondition{}
			yyc4554 = true
		} else if len(yyv4554) != 0 {
			yyv4554 = yyv4554[:0]
			yyc4554 = true
		}
	} else if yyl4554 > 0 {
		var yyrr4554, yyrl4554 int
		var yyrt4554 bool
		if yyl4554 > cap(yyv4554) {

			yyrg4554 := len(yyv4554) > 0
			yyv24554 := yyv4554
			yyrl4554, yyrt4554 = z.DecInferLen(yyl4554, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4554 {
				if yyrl4554 <= cap(yyv4554) {
					yyv4554 = yyv4554[:yyrl4554]
				} else {
					yyv4554 = make([]NodeCondition, yyrl4554)
				}
			} else {
				yyv4554 = make([]NodeCondition, yyrl4554)
			}
			yyc4554 = true
			yyrr4554 = len(yyv4554)
			if yyrg4554 {
				copy(yyv4554, yyv24554)
			}
		} else if yyl4554 != len(yyv4554) {
			yyv4554 = yyv4554[:yyl4554]
			yyc4554 = true
		}
		yyj4554 := 0
		for ; yyj4554 < yyrr4554; yyj4554++ {
			yyh4554.ElemContainerState(yyj4554)
			if r.TryDecodeAsNil() {
				yyv4554[yyj4554] = NodeCondition{}
			} else {
				yyv4555 := &yyv4554[yyj4554]
				yyv4555.CodecDecodeSelf(d)
			}

		}
		if yyrt4554 {
			for ; yyj4554 < yyl4554; yyj4554++ {
				yyv4554 = append(yyv4554, NodeCondition{})
				yyh4554.ElemContainerState(yyj4554)
				if r.TryDecodeAsNil() {
					yyv4554[yyj4554] = NodeCondition{}
				} else {
					yyv4556 := &yyv4554[yyj4554]
					yyv4556.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4554 := 0
		for ; !r.CheckBreak(); yyj4554++ {

			if yyj4554 >= len(yyv4554) {
				yyv4554 = append(yyv4554, NodeCondition{}) // var yyz4554 NodeCondition
				yyc4554 = true
			}
			yyh4554.ElemContainerState(yyj4554)
			if yyj4554 < len(yyv4554) {
				if r.TryDecodeAsNil() {
					yyv4554[yyj4554] = NodeCondition{}
				} else {
					yyv4557 := &yyv4554[yyj4554]
					yyv4557.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4554 < len(yyv4554) {
			yyv4554 = yyv4554[:yyj4554]
			yyc4554 = true
		} else if yyj4554 == 0 && yyv4554 == nil {
			yyv4554 = []NodeCondition{}
			yyc4554 = true
		}
	}
	yyh4554.End()
	if yyc4554 {
		*v = yyv4554
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4558 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4559 := &yyv4558
		yy4559.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4560 := *v
	yyh4560, yyl4560 := z.DecSliceHelperStart()
	var yyc4560 bool
	if yyl4560 == 0 {
		if yyv4560 == nil {
			yyv4560 = []NodeAddress{}
			yyc4560 = true
		} else if len(yyv4560) != 0 {
			yyv4560 = yyv4560[:0]
			yyc4560 = true
		}
	} else if yyl4560 > 0 {
		var yyrr4560, yyrl4560 int
		var yyrt4560 bool
		if yyl4560 > cap(yyv4560) {

			yyrg4560 := len(yyv4560) > 0
			yyv24560 := yyv4560
			yyrl4560, yyrt4560 = z.DecInferLen(yyl4560, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4560 {
				if yyrl4560 <= cap(yyv4560) {
					yyv4560 = yyv4560[:yyrl4560]
				} else {
					yyv4560 = make([]NodeAddress, yyrl4560)
				}
			} else {
				yyv4560 = make([]NodeAddress, yyrl4560)
			}
			yyc4560 = true
			yyrr4560 = len(yyv4560)
			if yyrg4560 {
				copy(yyv4560, yyv24560)
			}
		} else if yyl4560 != len(yyv4560) {
			yyv4560 = yyv4560[:yyl4560]
			yyc4560 = true
		}
		yyj4560 := 0
		for ; yyj4560 < yyrr4560; yyj4560++ {
			yyh4560.ElemContainerState(yyj4560)
			if r.TryDecodeAsNil() {
				yyv4560[yyj4560] = NodeAddress{}
			} else {
				yyv4561 := &yyv4560[yyj4560]
				yyv4561.CodecDecodeSelf(d)
			}

		}
		if yyrt4560 {
			for ; yyj4560 < yyl4560; yyj4560++ {
				yyv4560 = append(yyv4560, NodeAddress{})
				yyh4560.ElemContainerState(yyj4560)
				if r.TryDecodeAsNil() {
					yyv4560[yyj4560] = NodeAddress{}
				} else {
					yyv4562 := &yyv4560[yyj4560]
					yyv4562.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4560 := 0
		for ; !r.CheckBreak(); yyj4560++ {

			if yyj4560 >= len(yyv4560) {
				yyv4560 = append(yyv4560, NodeAddress{}) // var yyz4560 NodeAddress
				yyc4560 = true
			}
			yyh4560.ElemContainerState(yyj4560)
			if yyj4560 < len(yyv4560) {
				if r.TryDecodeAsNil() {
					yyv4560[yyj4560] = NodeAddress{}
				} else {
					yyv4563 := &yyv4560[yyj4560]
					yyv4563.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4560 < len(yyv4560) {
			yyv4560 = yyv4560[:yyj4560]
			yyc4560 = true
		} else if yyj4560 == 0 && yyv4560 == nil {
			yyv4560 = []NodeAddress{}
			yyc4560 = true
		}
	}
	yyh4560.End()
	if yyc4560 {
		*v = yyv4560
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4564 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4565 := &yyv4564
		yy4565.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4566 := *v
	yyh4566, yyl4566 := z.DecSliceHelperStart()
	var yyc4566 bool
	if yyl4566 == 0 {
		if yyv4566 == nil {
			yyv4566 = []ContainerImage{}
			yyc4566 = true
		} else if len(yyv4566) != 0 {
			yyv4566 = yyv4566[:0]
			yyc4566 = true
		}
	} else if yyl4566 > 0 {
		var yyrr4566, yyrl4566 int
		var yyrt4566 bool
		if yyl4566 > cap(yyv4566) {

			yyrg4566 := len(yyv4566) > 0
			yyv24566 := yyv4566
			yyrl4566, yyrt4566 = z.DecInferLen(yyl4566, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4566 {
				if yyrl4566 <= cap(yyv4566) {
					yyv4566 = yyv4566[:yyrl4566]
				} else {
					yyv4566 = make([]ContainerImage, yyrl4566)
				}
			} else {
				yyv4566 = make([]ContainerImage, yyrl4566)
			}
			yyc4566 = true
			yyrr4566 = len(yyv4566)
			if yyrg4566 {
				copy(yyv4566, yyv24566)
			}
		} else if yyl4566 != len(yyv4566) {
			yyv4566 = yyv4566[:yyl4566]
			yyc4566 = true
		}
		yyj4566 := 0
		for ; yyj4566 < yyrr4566; yyj4566++ {
			yyh4566.ElemContainerState(yyj4566)
			if r.TryDecodeAsNil() {
				yyv4566[yyj4566] = ContainerImage{}
			} else {
				yyv4567 := &yyv4566[yyj4566]
				yyv4567.CodecDecodeSelf(d)
			}

		}
		if yyrt4566 {
			for ; yyj4566 < yyl4566; yyj4566++ {
				yyv4566 = append(yyv4566, ContainerImage{})
				yyh4566.ElemContainerState(yyj4566)
				if r.TryDecodeAsNil() {
					yyv4566[yyj4566] = ContainerImage{}
				} else {
					yyv4568 := &yyv4566[yyj4566]
					yyv4568.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4566 := 0
		for ; !r.CheckBreak(); yyj4566++ {

			if yyj4566 >= len(yyv4566) {
				yyv4566 = append(yyv4566, ContainerImage{}) // var yyz4566 ContainerImage
				yyc4566 = true
			}
			yyh4566.ElemContainerState(yyj4566)
			if yyj4566 < len(yyv4566) {
				if r.TryDecodeAsNil() {
					yyv4566[yyj4566] = ContainerImage{}
				} else {
					yyv4569 := &yyv4566[yyj4566]
					yyv4569.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4566 < len(yyv4566) {
			yyv4566 = yyv4566[:yyj4566]
			yyc4566 = true
		} else if yyj4566 == 0 && yyv4566 == nil {
			yyv4566 = []ContainerImage{}
			yyc4566 = true
		}
	}
	yyh4566.End()
	if yyc4566 {
		*v = yyv4566
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4570 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4570.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4571 := *v
	yyh4571, yyl4571 := z.DecSliceHelperStart()
	var yyc4571 bool
	if yyl4571 == 0 {
		if yyv4571 == nil {
			yyv4571 = []UniqueVolumeName{}
			yyc4571 = true
		} else if len(yyv4571) != 0 {
			yyv4571 = yyv4571[:0]
			yyc4571 = true
		}
	} else if yyl4571 > 0 {
		var yyrr4571, yyrl4571 int
		var yyrt4571 bool
		if yyl4571 > cap(yyv4571) {

			yyrl4571, yyrt4571 = z.DecInferLen(yyl4571, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4571 {
				if yyrl4571 <= cap(yyv4571) {
					yyv4571 = yyv4571[:yyrl4571]
				} else {
					yyv4571 = make([]UniqueVolumeName, yyrl4571)
				}
			} else {
				yyv4571 = make([]UniqueVolumeName, yyrl4571)
			}
			yyc4571 = true
			yyrr4571 = len(yyv4571)
		} else if yyl4571 != len(yyv4571) {
			yyv4571 = yyv4571[:yyl4571]
			yyc4571 = true
		}
		yyj4571 := 0
		for ; yyj4571 < yyrr4571; yyj4571++ {
			yyh4571.ElemContainerState(yyj4571)
			if r.TryDecodeAsNil() {
				yyv4571[yyj4571] = ""
			} else {
				yyv4571[yyj4571] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4571 {
			for ; yyj4571 < yyl4571; yyj4571++ {
				yyv4571 = append(yyv4571, "")
				yyh4571.ElemContainerState(yyj4571)
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = ""
				} else {
					yyv4571[yyj4571] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4571 := 0
		for ; !r.CheckBreak(); yyj4571++ {

			if yyj4571 >= len(yyv4571) {
				yyv4571 = append(yyv4571, "") // var yyz4571 UniqueVolumeName
				yyc4571 = true
			}
			yyh4571.ElemContainerState(yyj4571)
			if yyj4571 < len(yyv4571) {
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = ""
				} else {
					yyv4571[yyj4571] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4571 < len(yyv4571) {
			yyv4571 = yyv4571[:yyj4571]
			yyc4571 = true
		} else if yyj4571 == 0 && yyv4571 == nil {
			yyv4571 = []UniqueVolumeName{}
			yyc4571 = true
		}
	}
	yyh4571.End()
	if yyc4571 {
		*v = yyv4571
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4575 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4576 := &yyv4575
		yy4576.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4577 := *v
	yyh4577, yyl4577 := z.DecSliceHelperStart()
	var yyc4577 bool
	if yyl4577 == 0 {
		if yyv4577 == nil {
			yyv4577 = []AttachedVolume{}
			yyc4577 = true
		} else if len(yyv4577) != 0 {
			yyv4577 = yyv4577[:0]
			yyc4577 = true
		}
	} else if yyl4577 > 0 {
		var yyrr4577, yyrl4577 int
		var yyrt4577 bool
		if yyl4577 > cap(yyv4577) {

			yyrg4577 := len(yyv4577) > 0
			yyv24577 := yyv4577
			yyrl4577, yyrt4577 = z.DecInferLen(yyl4577, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4577 {
				if yyrl4577 <= cap(yyv4577) {
					yyv4577 = yyv4577[:yyrl4577]
				} else {
					yyv4577 = make([]AttachedVolume, yyrl4577)
				}
			} else {
				yyv4577 = make([]AttachedVolume, yyrl4577)
			}
			yyc4577 = true
			yyrr4577 = len(yyv4577)
			if yyrg4577 {
				copy(yyv4577, yyv24577)
			}
		} else if yyl4577 != len(yyv4577) {
			yyv4577 = yyv4577[:yyl4577]
			yyc4577 = true
		}
		yyj4577 := 0
		for ; yyj4577 < yyrr4577; yyj4577++ {
			yyh4577.ElemContainerState(yyj4577)
			if r.TryDecodeAsNil() {
				yyv4577[yyj4577] = AttachedVolume{}
			} else {
				yyv4578 := &yyv4577[yyj4577]
				yyv4578.CodecDecodeSelf(d)
			}

		}
		if yyrt4577 {
			for ; yyj4577 < yyl4577; yyj4577++ {
				yyv4577 = append(yyv4577, AttachedVolume{})
				yyh4577.ElemContainerState(yyj4577)
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = AttachedVolume{}
				} else {
					yyv4579 := &yyv4577[yyj4577]
					yyv4579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4577 := 0
		for ; !r.CheckBreak(); yyj4577++ {

			if yyj4577 >= len(yyv4577) {
				yyv4577 = append(yyv4577, AttachedVolume{}) // var yyz4577 AttachedVolume
				yyc4577 = true
			}
			yyh4577.ElemContainerState(yyj4577)
			if yyj4577 < len(yyv4577) {
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = AttachedVolume{}
				} else {
					yyv4580 := &yyv4577[yyj4577]
					yyv4580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4577 < len(yyv4577) {
			yyv4577 = yyv4577[:yyj4577]
			yyc4577 = true
		} else if yyj4577 == 0 && yyv4577 == nil {
			yyv4577 = []AttachedVolume{}
			yyc4577 = true
		}
	}
	yyh4577.End()
	if yyc4577 {
		*v = yyv4577
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4581 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4582 := &yyv4581
		yy4582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4583 := *v
	yyh4583, yyl4583 := z.DecSliceHelperStart()
	var yyc4583 bool
	if yyl4583 == 0 {
		if yyv4583 == nil {
			yyv4583 = []PreferAvoidPodsEntry{}
			yyc4583 = true
		} else if len(yyv4583) != 0 {
			yyv4583 = yyv4583[:0]
			yyc4583 = true
		}
	} else if yyl4583 > 0 {
		var yyrr4583, yyrl4583 int
		var yyrt4583 bool
		if yyl4583 > cap(yyv4583) {

			yyrg4583 := len(yyv4583) > 0
			yyv24583 := yyv4583
			yyrl4583, yyrt4583 = z.DecInferLen(yyl4583, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4583 {
				if yyrl4583 <= cap(yyv4583) {
					yyv4583 = yyv4583[:yyrl4583]
				} else {
					yyv4583 = make([]PreferAvoidPodsEntry, yyrl4583)
				}
			} else {
				yyv4583 = make([]PreferAvoidPodsEntry, yyrl4583)
			}
			yyc4583 = true
			yyrr4583 = len(yyv4583)
			if yyrg4583 {
				copy(yyv4583, yyv24583)
			}
		} else if yyl4583 != len(yyv4583) {
			yyv4583 = yyv4583[:yyl4583]
			yyc4583 = true
		}
		yyj4583 := 0
		for ; yyj4583 < yyrr4583; yyj4583++ {
			yyh4583.ElemContainerState(yyj4583)
			if r.TryDecodeAsNil() {
				yyv4583[yyj4583] = PreferAvoidPodsEntry{}
			} else {
				yyv4584 := &yyv4583[yyj4583]
				yyv4584.CodecDecodeSelf(d)
			}

		}
		if yyrt4583 {
			for ; yyj4583 < yyl4583; yyj4583++ {
				yyv4583 = append(yyv4583, PreferAvoidPodsEntry{})
				yyh4583.ElemContainerState(yyj4583)
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = PreferAvoidPodsEntry{}
				} else {
					yyv4585 := &yyv4583[yyj4583]
					yyv4585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4583 := 0
		for ; !r.CheckBreak(); yyj4583++ {

			if yyj4583 >= len(yyv4583) {
				yyv4583 = append(yyv4583, PreferAvoidPodsEntry{}) // var yyz4583 PreferAvoidPodsEntry
				yyc4583 = true
			}
			yyh4583.ElemContainerState(yyj4583)
			if yyj4583 < len(yyv4583) {
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = PreferAvoidPodsEntry{}
				} else {
					yyv4586 := &yyv4583[yyj4583]
					yyv4586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4583 < len(yyv4583) {
			yyv4583 = yyv4583[:yyj4583]
			yyc4583 = true
		} else if yyj4583 == 0 && yyv4583 == nil {
			yyv4583 = []PreferAvoidPodsEntry{}
			yyc4583 = true
		}
	}
	yyh4583.End()
	if yyc4583 {
		*v = yyv4583
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4587, yyv4587 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4587.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4588 := &yyv4587
		yym4589 := z.EncBinary()
		_ = yym4589
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4588) {
		} else if !yym4589 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4588)
		} else {
			z.EncFallback(yy4588)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4590 := *v
	yyl4590 := r.ReadMapStart()
	yybh4590 := z.DecBasicHandle()
	if yyv4590 == nil {
		yyrl4590, _ := z.DecInferLen(yyl4590, yybh4590.MaxInitLen, 72)
		yyv4590 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4590)
		*v = yyv4590
	}
	var yymk4590 ResourceName
	var yymv4590 pkg3_resource.Quantity
	var yymg4590 bool
	if yybh4590.MapValueReset {
		yymg4590 = true
	}
	if yyl4590 > 0 {
		for yyj4590 := 0; yyj4590 < yyl4590; yyj4590++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4590 = ""
			} else {
				yymk4590 = ResourceName(r.DecodeString())
			}

			if yymg4590 {
				yymv4590 = yyv4590[yymk4590]
			} else {
				yymv4590 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4590 = pkg3_resource.Quantity{}
			} else {
				yyv4592 := &yymv4590
				yym4593 := z.DecBinary()
				_ = yym4593
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4592) {
				} else if !yym4593 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4592)
				} else {
					z.DecFallback(yyv4592, false)
				}
			}

			if yyv4590 != nil {
				yyv4590[yymk4590] = yymv4590
			}
		}
	} else if yyl4590 < 0 {
		for yyj4590 := 0; !r.CheckBreak(); yyj4590++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4590 = ""
			} else {
				yymk4590 = ResourceName(r.DecodeString())
			}

			if yymg4590 {
				yymv4590 = yyv4590[yymk4590]
			} else {
				yymv4590 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4590 = pkg3_resource.Quantity{}
			} else {
				yyv4595 := &yymv4590
				yym4596 := z.DecBinary()
				_ = yym4596
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4595) {
				} else if !yym4596 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4595)
				} else {
					z.DecFallback(yyv4595, false)
				}
			}

			if yyv4590 != nil {
				yyv4590[yymk4590] = yymv4590
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4598 := &yyv4597
		yy4598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4599 := *v
	yyh4599, yyl4599 := z.DecSliceHelperStart()
	var yyc4599 bool
	if yyl4599 == 0 {
		if yyv4599 == nil {
			yyv4599 = []Node{}
			yyc4599 = true
		} else if len(yyv4599) != 0 {
			yyv4599 = yyv4599[:0]
			yyc4599 = true
		}
	} else if yyl4599 > 0 {
		var yyrr4599, yyrl4599 int
		var yyrt4599 bool
		if yyl4599 > cap(yyv4599) {

			yyrg4599 := len(yyv4599) > 0
			yyv24599 := yyv4599
			yyrl4599, yyrt4599 = z.DecInferLen(yyl4599, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4599 {
				if yyrl4599 <= cap(yyv4599) {
					yyv4599 = yyv4599[:yyrl4599]
				} else {
					yyv4599 = make([]Node, yyrl4599)
				}
			} else {
				yyv4599 = make([]Node, yyrl4599)
			}
			yyc4599 = true
			yyrr4599 = len(yyv4599)
			if yyrg4599 {
				copy(yyv4599, yyv24599)
			}
		} else if yyl4599 != len(yyv4599) {
			yyv4599 = yyv4599[:yyl4599]
			yyc4599 = true
		}
		yyj4599 := 0
		for ; yyj4599 < yyrr4599; yyj4599++ {
			yyh4599.ElemContainerState(yyj4599)
			if r.TryDecodeAsNil() {
				yyv4599[yyj4599] = Node{}
			} else {
				yyv4600 := &yyv4599[yyj4599]
				yyv4600.CodecDecodeSelf(d)
			}

		}
		if yyrt4599 {
			for ; yyj4599 < yyl4599; yyj4599++ {
				yyv4599 = append(yyv4599, Node{})
				yyh4599.ElemContainerState(yyj4599)
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = Node{}
				} else {
					yyv4601 := &yyv4599[yyj4599]
					yyv4601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4599 := 0
		for ; !r.CheckBreak(); yyj4599++ {

			if yyj4599 >= len(yyv4599) {
				yyv4599 = append(yyv4599, Node{}) // var yyz4599 Node
				yyc4599 = true
			}
			yyh4599.ElemContainerState(yyj4599)
			if yyj4599 < len(yyv4599) {
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = Node{}
				} else {
					yyv4602 := &yyv4599[yyj4599]
					yyv4602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4599 < len(yyv4599) {
			yyv4599 = yyv4599[:yyj4599]
			yyc4599 = true
		} else if yyj4599 == 0 && yyv4599 == nil {
			yyv4599 = []Node{}
			yyc4599 = true
		}
	}
	yyh4599.End()
	if yyc4599 {
		*v = yyv4599
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4603.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4604 := *v
	yyh4604, yyl4604 := z.DecSliceHelperStart()
	var yyc4604 bool
	if yyl4604 == 0 {
		if yyv4604 == nil {
			yyv4604 = []FinalizerName{}
			yyc4604 = true
		} else if len(yyv4604) != 0 {
			yyv4604 = yyv4604[:0]
			yyc4604 = true
		}
	} else if yyl4604 > 0 {
		var yyrr4604, yyrl4604 int
		var yyrt4604 bool
		if yyl4604 > cap(yyv4604) {

			yyrl4604, yyrt4604 = z.DecInferLen(yyl4604, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4604 {
				if yyrl4604 <= cap(yyv4604) {
					yyv4604 = yyv4604[:yyrl4604]
				} else {
					yyv4604 = make([]FinalizerName, yyrl4604)
				}
			} else {
				yyv4604 = make([]FinalizerName, yyrl4604)
			}
			yyc4604 = true
			yyrr4604 = len(yyv4604)
		} else if yyl4604 != len(yyv4604) {
			yyv4604 = yyv4604[:yyl4604]
			yyc4604 = true
		}
		yyj4604 := 0
		for ; yyj4604 < yyrr4604; yyj4604++ {
			yyh4604.ElemContainerState(yyj4604)
			if r.TryDecodeAsNil() {
				yyv4604[yyj4604] = ""
			} else {
				yyv4604[yyj4604] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4604 {
			for ; yyj4604 < yyl4604; yyj4604++ {
				yyv4604 = append(yyv4604, "")
				yyh4604.ElemContainerState(yyj4604)
				if r.TryDecodeAsNil() {
					yyv4604[yyj4604] = ""
				} else {
					yyv4604[yyj4604] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4604 := 0
		for ; !r.CheckBreak(); yyj4604++ {

			if yyj4604 >= len(yyv4604) {
				yyv4604 = append(yyv4604, "") // var yyz4604 FinalizerName
				yyc4604 = true
			}
			yyh4604.ElemContainerState(yyj4604)
			if yyj4604 < len(yyv4604) {
				if r.TryDecodeAsNil() {
					yyv4604[yyj4604] = ""
				} else {
					yyv4604[yyj4604] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4604 < len(yyv4604) {
			yyv4604 = yyv4604[:yyj4604]
			yyc4604 = true
		} else if yyj4604 == 0 && yyv4604 == nil {
			yyv4604 = []FinalizerName{}
			yyc4604 = true
		}
	}
	yyh4604.End()
	if yyc4604 {
		*v = yyv4604
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4608 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4609 := &yyv4608
		yy4609.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4610 := *v
	yyh4610, yyl4610 := z.DecSliceHelperStart()
	var yyc4610 bool
	if yyl4610 == 0 {
		if yyv4610 == nil {
			yyv4610 = []Namespace{}
			yyc4610 = true
		} else if len(yyv4610) != 0 {
			yyv4610 = yyv4610[:0]
			yyc4610 = true
		}
	} else if yyl4610 > 0 {
		var yyrr4610, yyrl4610 int
		var yyrt4610 bool
		if yyl4610 > cap(yyv4610) {

			yyrg4610 := len(yyv4610) > 0
			yyv24610 := yyv4610
			yyrl4610, yyrt4610 = z.DecInferLen(yyl4610, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4610 {
				if yyrl4610 <= cap(yyv4610) {
					yyv4610 = yyv4610[:yyrl4610]
				} else {
					yyv4610 = make([]Namespace, yyrl4610)
				}
			} else {
				yyv4610 = make([]Namespace, yyrl4610)
			}
			yyc4610 = true
			yyrr4610 = len(yyv4610)
			if yyrg4610 {
				copy(yyv4610, yyv24610)
			}
		} else if yyl4610 != len(yyv4610) {
			yyv4610 = yyv4610[:yyl4610]
			yyc4610 = true
		}
		yyj4610 := 0
		for ; yyj4610 < yyrr4610; yyj4610++ {
			yyh4610.ElemContainerState(yyj4610)
			if r.TryDecodeAsNil() {
				yyv4610[yyj4610] = Namespace{}
			} else {
				yyv4611 := &yyv4610[yyj4610]
				yyv4611.CodecDecodeSelf(d)
			}

		}
		if yyrt4610 {
			for ; yyj4610 < yyl4610; yyj4610++ {
				yyv4610 = append(yyv4610, Namespace{})
				yyh4610.ElemContainerState(yyj4610)
				if r.TryDecodeAsNil() {
					yyv4610[yyj4610] = Namespace{}
				} else {
					yyv4612 := &yyv4610[yyj4610]
					yyv4612.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4610 := 0
		for ; !r.CheckBreak(); yyj4610++ {

			if yyj4610 >= len(yyv4610) {
				yyv4610 = append(yyv4610, Namespace{}) // var yyz4610 Namespace
				yyc4610 = true
			}
			yyh4610.ElemContainerState(yyj4610)
			if yyj4610 < len(yyv4610) {
				if r.TryDecodeAsNil() {
					yyv4610[yyj4610] = Namespace{}
				} else {
					yyv4613 := &yyv4610[yyj4610]
					yyv4613.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4610 < len(yyv4610) {
			yyv4610 = yyv4610[:yyj4610]
			yyc4610 = true
		} else if yyj4610 == 0 && yyv4610 == nil {
			yyv4610 = []Namespace{}
			yyc4610 = true
		}
	}
	yyh4610.End()
	if yyc4610 {
		*v = yyv4610
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4614 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4615 := &yyv4614
		yy4615.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4616 := *v
	yyh4616, yyl4616 := z.DecSliceHelperStart()
	var yyc4616 bool
	if yyl4616 == 0 {
		if yyv4616 == nil {
			yyv4616 = []Event{}
			yyc4616 = true
		} else if len(yyv4616) != 0 {
			yyv4616 = yyv4616[:0]
			yyc4616 = true
		}
	} else if yyl4616 > 0 {
		var yyrr4616, yyrl4616 int
		var yyrt4616 bool
		if yyl4616 > cap(yyv4616) {

			yyrg4616 := len(yyv4616) > 0
			yyv24616 := yyv4616
			yyrl4616, yyrt4616 = z.DecInferLen(yyl4616, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4616 {
				if yyrl4616 <= cap(yyv4616) {
					yyv4616 = yyv4616[:yyrl4616]
				} else {
					yyv4616 = make([]Event, yyrl4616)
				}
			} else {
				yyv4616 = make([]Event, yyrl4616)
			}
			yyc4616 = true
			yyrr4616 = len(yyv4616)
			if yyrg4616 {
				copy(yyv4616, yyv24616)
			}
		} else if yyl4616 != len(yyv4616) {
			yyv4616 = yyv4616[:yyl4616]
			yyc4616 = true
		}
		yyj4616 := 0
		for ; yyj4616 < yyrr4616; yyj4616++ {
			yyh4616.ElemContainerState(yyj4616)
			if r.TryDecodeAsNil() {
				yyv4616[yyj4616] = Event{}
			} else {
				yyv4617 := &yyv4616[yyj4616]
				yyv4617.CodecDecodeSelf(d)
			}

		}
		if yyrt4616 {
			for ; yyj4616 < yyl4616; yyj4616++ {
				yyv4616 = append(yyv4616, Event{})
				yyh4616.ElemContainerState(yyj4616)
				if r.TryDecodeAsNil() {
					yyv4616[yyj4616] = Event{}
				} else {
					yyv4618 := &yyv4616[yyj4616]
					yyv4618.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4616 := 0
		for ; !r.CheckBreak(); yyj4616++ {

			if yyj4616 >= len(yyv4616) {
				yyv4616 = append(yyv4616, Event{}) // var yyz4616 Event
				yyc4616 = true
			}
			yyh4616.ElemContainerState(yyj4616)
			if yyj4616 < len(yyv4616) {
				if r.TryDecodeAsNil() {
					yyv4616[yyj4616] = Event{}
				} else {
					yyv4619 := &yyv4616[yyj4616]
					yyv4619.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4616 < len(yyv4616) {
			yyv4616 = yyv4616[:yyj4616]
			yyc4616 = true
		} else if yyj4616 == 0 && yyv4616 == nil {
			yyv4616 = []Event{}
			yyc4616 = true
		}
	}
	yyh4616.End()
	if yyc4616 {
		*v = yyv4616
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4620 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4621 := &yyv4620
		yym4622 := z.EncBinary()
		_ = yym4622
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4621) {
		} else if !yym4622 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4621)
		} else {
			z.EncFallback(yy4621)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4623 := *v
	yyh4623, yyl4623 := z.DecSliceHelperStart()
	var yyc4623 bool
	if yyl4623 == 0 {
		if yyv4623 == nil {
			yyv4623 = []pkg5_runtime.RawExtension{}
			yyc4623 = true
		} else if len(yyv4623) != 0 {
			yyv4623 = yyv4623[:0]
			yyc4623 = true
		}
	} else if yyl4623 > 0 {
		var yyrr4623, yyrl4623 int
		var yyrt4623 bool
		if yyl4623 > cap(yyv4623) {

			yyrg4623 := len(yyv4623) > 0
			yyv24623 := yyv4623
			yyrl4623, yyrt4623 = z.DecInferLen(yyl4623, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4623 {
				if yyrl4623 <= cap(yyv4623) {
					yyv4623 = yyv4623[:yyrl4623]
				} else {
					yyv4623 = make([]pkg5_runtime.RawExtension, yyrl4623)
				}
			} else {
				yyv4623 = make([]pkg5_runtime.RawExtension, yyrl4623)
			}
			yyc4623 = true
			yyrr4623 = len(yyv4623)
			if yyrg4623 {
				copy(yyv4623, yyv24623)
			}
		} else if yyl4623 != len(yyv4623) {
			yyv4623 = yyv4623[:yyl4623]
			yyc4623 = true
		}
		yyj4623 := 0
		for ; yyj4623 < yyrr4623; yyj4623++ {
			yyh4623.ElemContainerState(yyj4623)
			if r.TryDecodeAsNil() {
				yyv4623[yyj4623] = pkg5_runtime.RawExtension{}
			} else {
				yyv4624 := &yyv4623[yyj4623]
				yym4625 := z.DecBinary()
				_ = yym4625
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4624) {
				} else if !yym4625 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4624)
				} else {
					z.DecFallback(yyv4624, false)
				}
			}

		}
		if yyrt4623 {
			for ; yyj4623 < yyl4623; yyj4623++ {
				yyv4623 = append(yyv4623, pkg5_runtime.RawExtension{})
				yyh4623.ElemContainerState(yyj4623)
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = pkg5_runtime.RawExtension{}
				} else {
					yyv4626 := &yyv4623[yyj4623]
					yym4627 := z.DecBinary()
					_ = yym4627
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4626) {
					} else if !yym4627 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4626)
					} else {
						z.DecFallback(yyv4626, false)
					}
				}

			}
		}

	} else {
		yyj4623 := 0
		for ; !r.CheckBreak(); yyj4623++ {

			if yyj4623 >= len(yyv4623) {
				yyv4623 = append(yyv4623, pkg5_runtime.RawExtension{}) // var yyz4623 pkg5_runtime.RawExtension
				yyc4623 = true
			}
			yyh4623.ElemContainerState(yyj4623)
			if yyj4623 < len(yyv4623) {
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = pkg5_runtime.RawExtension{}
				} else {
					yyv4628 := &yyv4623[yyj4623]
					yym4629 := z.DecBinary()
					_ = yym4629
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4628) {
					} else if !yym4629 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4628)
					} else {
						z.DecFallback(yyv4628, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4623 < len(yyv4623) {
			yyv4623 = yyv4623[:yyj4623]
			yyc4623 = true
		} else if yyj4623 == 0 && yyv4623 == nil {
			yyv4623 = []pkg5_runtime.RawExtension{}
			yyc4623 = true
		}
	}
	yyh4623.End()
	if yyc4623 {
		*v = yyv4623
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4630 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4631 := &yyv4630
		yy4631.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4632 := *v
	yyh4632, yyl4632 := z.DecSliceHelperStart()
	var yyc4632 bool
	if yyl4632 == 0 {
		if yyv4632 == nil {
			yyv4632 = []LimitRangeItem{}
			yyc4632 = true
		} else if len(yyv4632) != 0 {
			yyv4632 = yyv4632[:0]
			yyc4632 = true
		}
	} else if yyl4632 > 0 {
		var yyrr4632, yyrl4632 int
		var yyrt4632 bool
		if yyl4632 > cap(yyv4632) {

			yyrg4632 := len(yyv4632) > 0
			yyv24632 := yyv4632
			yyrl4632, yyrt4632 = z.DecInferLen(yyl4632, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4632 {
				if yyrl4632 <= cap(yyv4632) {
					yyv4632 = yyv4632[:yyrl4632]
				} else {
					yyv4632 = make([]LimitRangeItem, yyrl4632)
				}
			} else {
				yyv4632 = make([]LimitRangeItem, yyrl4632)
			}
			yyc4632 = true
			yyrr4632 = len(yyv4632)
			if yyrg4632 {
				copy(yyv4632, yyv24632)
			}
		} else if yyl4632 != len(yyv4632) {
			yyv4632 = yyv4632[:yyl4632]
			yyc4632 = true
		}
		yyj4632 := 0
		for ; yyj4632 < yyrr4632; yyj4632++ {
			yyh4632.ElemContainerState(yyj4632)
			if r.TryDecodeAsNil() {
				yyv4632[yyj4632] = LimitRangeItem{}
			} else {
				yyv4633 := &yyv4632[yyj4632]
				yyv4633.CodecDecodeSelf(d)
			}

		}
		if yyrt4632 {
			for ; yyj4632 < yyl4632; yyj4632++ {
				yyv4632 = append(yyv4632, LimitRangeItem{})
				yyh4632.ElemContainerState(yyj4632)
				if r.TryDecodeAsNil() {
					yyv4632[yyj4632] = LimitRangeItem{}
				} else {
					yyv4634 := &yyv4632[yyj4632]
					yyv4634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4632 := 0
		for ; !r.CheckBreak(); yyj4632++ {

			if yyj4632 >= len(yyv4632) {
				yyv4632 = append(yyv4632, LimitRangeItem{}) // var yyz4632 LimitRangeItem
				yyc4632 = true
			}
			yyh4632.ElemContainerState(yyj4632)
			if yyj4632 < len(yyv4632) {
				if r.TryDecodeAsNil() {
					yyv4632[yyj4632] = LimitRangeItem{}
				} else {
					yyv4635 := &yyv4632[yyj4632]
					yyv4635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4632 < len(yyv4632) {
			yyv4632 = yyv4632[:yyj4632]
			yyc4632 = true
		} else if yyj4632 == 0 && yyv4632 == nil {
			yyv4632 = []LimitRangeItem{}
			yyc4632 = true
		}
	}
	yyh4632.End()
	if yyc4632 {
		*v = yyv4632
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4636 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4637 := &yyv4636
		yy4637.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4638 := *v
	yyh4638, yyl4638 := z.DecSliceHelperStart()
	var yyc4638 bool
	if yyl4638 == 0 {
		if yyv4638 == nil {
			yyv4638 = []LimitRange{}
			yyc4638 = true
		} else if len(yyv4638) != 0 {
			yyv4638 = yyv4638[:0]
			yyc4638 = true
		}
	} else if yyl4638 > 0 {
		var yyrr4638, yyrl4638 int
		var yyrt4638 bool
		if yyl4638 > cap(yyv4638) {

			yyrg4638 := len(yyv4638) > 0
			yyv24638 := yyv4638
			yyrl4638, yyrt4638 = z.DecInferLen(yyl4638, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4638 {
				if yyrl4638 <= cap(yyv4638) {
					yyv4638 = yyv4638[:yyrl4638]
				} else {
					yyv4638 = make([]LimitRange, yyrl4638)
				}
			} else {
				yyv4638 = make([]LimitRange, yyrl4638)
			}
			yyc4638 = true
			yyrr4638 = len(yyv4638)
			if yyrg4638 {
				copy(yyv4638, yyv24638)
			}
		} else if yyl4638 != len(yyv4638) {
			yyv4638 = yyv4638[:yyl4638]
			yyc4638 = true
		}
		yyj4638 := 0
		for ; yyj4638 < yyrr4638; yyj4638++ {
			yyh4638.ElemContainerState(yyj4638)
			if r.TryDecodeAsNil() {
				yyv4638[yyj4638] = LimitRange{}
			} else {
				yyv4639 := &yyv4638[yyj4638]
				yyv4639.CodecDecodeSelf(d)
			}

		}
		if yyrt4638 {
			for ; yyj4638 < yyl4638; yyj4638++ {
				yyv4638 = append(yyv4638, LimitRange{})
				yyh4638.ElemContainerState(yyj4638)
				if r.TryDecodeAsNil() {
					yyv4638[yyj4638] = LimitRange{}
				} else {
					yyv4640 := &yyv4638[yyj4638]
					yyv4640.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4638 := 0
		for ; !r.CheckBreak(); yyj4638++ {

			if yyj4638 >= len(yyv4638) {
				yyv4638 = append(yyv4638, LimitRange{}) // var yyz4638 LimitRange
				yyc4638 = true
			}
			yyh4638.ElemContainerState(yyj4638)
			if yyj4638 < len(yyv4638) {
				if r.TryDecodeAsNil() {
					yyv4638[yyj4638] = LimitRange{}
				} else {
					yyv4641 := &yyv4638[yyj4638]
					yyv4641.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4638 < len(yyv4638) {
			yyv4638 = yyv4638[:yyj4638]
			yyc4638 = true
		} else if yyj4638 == 0 && yyv4638 == nil {
			yyv4638 = []LimitRange{}
			yyc4638 = true
		}
	}
	yyh4638.End()
	if yyc4638 {
		*v = yyv4638
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4642.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4643 := *v
	yyh4643, yyl4643 := z.DecSliceHelperStart()
	var yyc4643 bool
	if yyl4643 == 0 {
		if yyv4643 == nil {
			yyv4643 = []ResourceQuotaScope{}
			yyc4643 = true
		} else if len(yyv4643) != 0 {
			yyv4643 = yyv4643[:0]
			yyc4643 = true
		}
	} else if yyl4643 > 0 {
		var yyrr4643, yyrl4643 int
		var yyrt4643 bool
		if yyl4643 > cap(yyv4643) {

			yyrl4643, yyrt4643 = z.DecInferLen(yyl4643, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4643 {
				if yyrl4643 <= cap(yyv4643) {
					yyv4643 = yyv4643[:yyrl4643]
				} else {
					yyv4643 = make([]ResourceQuotaScope, yyrl4643)
				}
			} else {
				yyv4643 = make([]ResourceQuotaScope, yyrl4643)
			}
			yyc4643 = true
			yyrr4643 = len(yyv4643)
		} else if yyl4643 != len(yyv4643) {
			yyv4643 = yyv4643[:yyl4643]
			yyc4643 = true
		}
		yyj4643 := 0
		for ; yyj4643 < yyrr4643; yyj4643++ {
			yyh4643.ElemContainerState(yyj4643)
			if r.TryDecodeAsNil() {
				yyv4643[yyj4643] = ""
			} else {
				yyv4643[yyj4643] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4643 {
			for ; yyj4643 < yyl4643; yyj4643++ {
				yyv4643 = append(yyv4643, "")
				yyh4643.ElemContainerState(yyj4643)
				if r.TryDecodeAsNil() {
					yyv4643[yyj4643] = ""
				} else {
					yyv4643[yyj4643] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4643 := 0
		for ; !r.CheckBreak(); yyj4643++ {

			if yyj4643 >= len(yyv4643) {
				yyv4643 = append(yyv4643, "") // var yyz4643 ResourceQuotaScope
				yyc4643 = true
			}
			yyh4643.ElemContainerState(yyj4643)
			if yyj4643 < len(yyv4643) {
				if r.TryDecodeAsNil() {
					yyv4643[yyj4643] = ""
				} else {
					yyv4643[yyj4643] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4643 < len(yyv4643) {
			yyv4643 = yyv4643[:yyj4643]
			yyc4643 = true
		} else if yyj4643 == 0 && yyv4643 == nil {
			yyv4643 = []ResourceQuotaScope{}
			yyc4643 = true
		}
	}
	yyh4643.End()
	if yyc4643 {
		*v = yyv4643
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4647 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4648 := &yyv4647
		yy4648.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4649 := *v
	yyh4649, yyl4649 := z.DecSliceHelperStart()
	var yyc4649 bool
	if yyl4649 == 0 {
		if yyv4649 == nil {
			yyv4649 = []ResourceQuota{}
			yyc4649 = true
		} else if len(yyv4649) != 0 {
			yyv4649 = yyv4649[:0]
			yyc4649 = true
		}
	} else if yyl4649 > 0 {
		var yyrr4649, yyrl4649 int
		var yyrt4649 bool
		if yyl4649 > cap(yyv4649) {

			yyrg4649 := len(yyv4649) > 0
			yyv24649 := yyv4649
			yyrl4649, yyrt4649 = z.DecInferLen(yyl4649, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4649 {
				if yyrl4649 <= cap(yyv4649) {
					yyv4649 = yyv4649[:yyrl4649]
				} else {
					yyv4649 = make([]ResourceQuota, yyrl4649)
				}
			} else {
				yyv4649 = make([]ResourceQuota, yyrl4649)
			}
			yyc4649 = true
			yyrr4649 = len(yyv4649)
			if yyrg4649 {
				copy(yyv4649, yyv24649)
			}
		} else if yyl4649 != len(yyv4649) {
			yyv4649 = yyv4649[:yyl4649]
			yyc4649 = true
		}
		yyj4649 := 0
		for ; yyj4649 < yyrr4649; yyj4649++ {
			yyh4649.ElemContainerState(yyj4649)
			if r.TryDecodeAsNil() {
				yyv4649[yyj4649] = ResourceQuota{}
			} else {
				yyv4650 := &yyv4649[yyj4649]
				yyv4650.CodecDecodeSelf(d)
			}

		}
		if yyrt4649 {
			for ; yyj4649 < yyl4649; yyj4649++ {
				yyv4649 = append(yyv4649, ResourceQuota{})
				yyh4649.ElemContainerState(yyj4649)
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = ResourceQuota{}
				} else {
					yyv4651 := &yyv4649[yyj4649]
					yyv4651.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4649 := 0
		for ; !r.CheckBreak(); yyj4649++ {

			if yyj4649 >= len(yyv4649) {
				yyv4649 = append(yyv4649, ResourceQuota{}) // var yyz4649 ResourceQuota
				yyc4649 = true
			}
			yyh4649.ElemContainerState(yyj4649)
			if yyj4649 < len(yyv4649) {
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = ResourceQuota{}
				} else {
					yyv4652 := &yyv4649[yyj4649]
					yyv4652.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4649 < len(yyv4649) {
			yyv4649 = yyv4649[:yyj4649]
			yyc4649 = true
		} else if yyj4649 == 0 && yyv4649 == nil {
			yyv4649 = []ResourceQuota{}
			yyc4649 = true
		}
	}
	yyh4649.End()
	if yyc4649 {
		*v = yyv4649
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4653, yyv4653 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4654 := z.EncBinary()
		_ = yym4654
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4653))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4653 == nil {
			r.EncodeNil()
		} else {
			yym4655 := z.EncBinary()
			_ = yym4655
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4653))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4656 := *v
	yyl4656 := r.ReadMapStart()
	yybh4656 := z.DecBasicHandle()
	if yyv4656 == nil {
		yyrl4656, _ := z.DecInferLen(yyl4656, yybh4656.MaxInitLen, 40)
		yyv4656 = make(map[string][]uint8, yyrl4656)
		*v = yyv4656
	}
	var yymk4656 string
	var yymv4656 []uint8
	var yymg4656 bool
	if yybh4656.MapValueReset {
		yymg4656 = true
	}
	if yyl4656 > 0 {
		for yyj4656 := 0; yyj4656 < yyl4656; yyj4656++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4656 = ""
			} else {
				yymk4656 = string(r.DecodeString())
			}

			if yymg4656 {
				yymv4656 = yyv4656[yymk4656]
			} else {
				yymv4656 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4656 = nil
			} else {
				yyv4658 := &yymv4656
				yym4659 := z.DecBinary()
				_ = yym4659
				if false {
				} else {
					*yyv4658 = r.DecodeBytes(*(*[]byte)(yyv4658), false, false)
				}
			}

			if yyv4656 != nil {
				yyv4656[yymk4656] = yymv4656
			}
		}
	} else if yyl4656 < 0 {
		for yyj4656 := 0; !r.CheckBreak(); yyj4656++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4656 = ""
			} else {
				yymk4656 = string(r.DecodeString())
			}

			if yymg4656 {
				yymv4656 = yyv4656[yymk4656]
			} else {
				yymv4656 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4656 = nil
			} else {
				yyv4661 := &yymv4656
				yym4662 := z.DecBinary()
				_ = yym4662
				if false {
				} else {
					*yyv4661 = r.DecodeBytes(*(*[]byte)(yyv4661), false, false)
				}
			}

			if yyv4656 != nil {
				yyv4656[yymk4656] = yymv4656
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4663 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4664 := &yyv4663
		yy4664.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4665 := *v
	yyh4665, yyl4665 := z.DecSliceHelperStart()
	var yyc4665 bool
	if yyl4665 == 0 {
		if yyv4665 == nil {
			yyv4665 = []Secret{}
			yyc4665 = true
		} else if len(yyv4665) != 0 {
			yyv4665 = yyv4665[:0]
			yyc4665 = true
		}
	} else if yyl4665 > 0 {
		var yyrr4665, yyrl4665 int
		var yyrt4665 bool
		if yyl4665 > cap(yyv4665) {

			yyrg4665 := len(yyv4665) > 0
			yyv24665 := yyv4665
			yyrl4665, yyrt4665 = z.DecInferLen(yyl4665, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4665 {
				if yyrl4665 <= cap(yyv4665) {
					yyv4665 = yyv4665[:yyrl4665]
				} else {
					yyv4665 = make([]Secret, yyrl4665)
				}
			} else {
				yyv4665 = make([]Secret, yyrl4665)
			}
			yyc4665 = true
			yyrr4665 = len(yyv4665)
			if yyrg4665 {
				copy(yyv4665, yyv24665)
			}
		} else if yyl4665 != len(yyv4665) {
			yyv4665 = yyv4665[:yyl4665]
			yyc4665 = true
		}
		yyj4665 := 0
		for ; yyj4665 < yyrr4665; yyj4665++ {
			yyh4665.ElemContainerState(yyj4665)
			if r.TryDecodeAsNil() {
				yyv4665[yyj4665] = Secret{}
			} else {
				yyv4666 := &yyv4665[yyj4665]
				yyv4666.CodecDecodeSelf(d)
			}

		}
		if yyrt4665 {
			for ; yyj4665 < yyl4665; yyj4665++ {
				yyv4665 = append(yyv4665, Secret{})
				yyh4665.ElemContainerState(yyj4665)
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = Secret{}
				} else {
					yyv4667 := &yyv4665[yyj4665]
					yyv4667.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4665 := 0
		for ; !r.CheckBreak(); yyj4665++ {

			if yyj4665 >= len(yyv4665) {
				yyv4665 = append(yyv4665, Secret{}) // var yyz4665 Secret
				yyc4665 = true
			}
			yyh4665.ElemContainerState(yyj4665)
			if yyj4665 < len(yyv4665) {
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = Secret{}
				} else {
					yyv4668 := &yyv4665[yyj4665]
					yyv4668.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4665 < len(yyv4665) {
			yyv4665 = yyv4665[:yyj4665]
			yyc4665 = true
		} else if yyj4665 == 0 && yyv4665 == nil {
			yyv4665 = []Secret{}
			yyc4665 = true
		}
	}
	yyh4665.End()
	if yyc4665 {
		*v = yyv4665
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4669 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4670 := &yyv4669
		yy4670.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4671 := *v
	yyh4671, yyl4671 := z.DecSliceHelperStart()
	var yyc4671 bool
	if yyl4671 == 0 {
		if yyv4671 == nil {
			yyv4671 = []ConfigMap{}
			yyc4671 = true
		} else if len(yyv4671) != 0 {
			yyv4671 = yyv4671[:0]
			yyc4671 = true
		}
	} else if yyl4671 > 0 {
		var yyrr4671, yyrl4671 int
		var yyrt4671 bool
		if yyl4671 > cap(yyv4671) {

			yyrg4671 := len(yyv4671) > 0
			yyv24671 := yyv4671
			yyrl4671, yyrt4671 = z.DecInferLen(yyl4671, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4671 {
				if yyrl4671 <= cap(yyv4671) {
					yyv4671 = yyv4671[:yyrl4671]
				} else {
					yyv4671 = make([]ConfigMap, yyrl4671)
				}
			} else {
				yyv4671 = make([]ConfigMap, yyrl4671)
			}
			yyc4671 = true
			yyrr4671 = len(yyv4671)
			if yyrg4671 {
				copy(yyv4671, yyv24671)
			}
		} else if yyl4671 != len(yyv4671) {
			yyv4671 = yyv4671[:yyl4671]
			yyc4671 = true
		}
		yyj4671 := 0
		for ; yyj4671 < yyrr4671; yyj4671++ {
			yyh4671.ElemContainerState(yyj4671)
			if r.TryDecodeAsNil() {
				yyv4671[yyj4671] = ConfigMap{}
			} else {
				yyv4672 := &yyv4671[yyj4671]
				yyv4672.CodecDecodeSelf(d)
			}

		}
		if yyrt4671 {
			for ; yyj4671 < yyl4671; yyj4671++ {
				yyv4671 = append(yyv4671, ConfigMap{})
				yyh4671.ElemContainerState(yyj4671)
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = ConfigMap{}
				} else {
					yyv4673 := &yyv4671[yyj4671]
					yyv4673.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4671 := 0
		for ; !r.CheckBreak(); yyj4671++ {

			if yyj4671 >= len(yyv4671) {
				yyv4671 = append(yyv4671, ConfigMap{}) // var yyz4671 ConfigMap
				yyc4671 = true
			}
			yyh4671.ElemContainerState(yyj4671)
			if yyj4671 < len(yyv4671) {
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = ConfigMap{}
				} else {
					yyv4674 := &yyv4671[yyj4671]
					yyv4674.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4671 < len(yyv4671) {
			yyv4671 = yyv4671[:yyj4671]
			yyc4671 = true
		} else if yyj4671 == 0 && yyv4671 == nil {
			yyv4671 = []ConfigMap{}
			yyc4671 = true
		}
	}
	yyh4671.End()
	if yyc4671 {
		*v = yyv4671
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4675 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4676 := &yyv4675
		yy4676.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4677 := *v
	yyh4677, yyl4677 := z.DecSliceHelperStart()
	var yyc4677 bool
	if yyl4677 == 0 {
		if yyv4677 == nil {
			yyv4677 = []ComponentCondition{}
			yyc4677 = true
		} else if len(yyv4677) != 0 {
			yyv4677 = yyv4677[:0]
			yyc4677 = true
		}
	} else if yyl4677 > 0 {
		var yyrr4677, yyrl4677 int
		var yyrt4677 bool
		if yyl4677 > cap(yyv4677) {

			yyrg4677 := len(yyv4677) > 0
			yyv24677 := yyv4677
			yyrl4677, yyrt4677 = z.DecInferLen(yyl4677, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4677 {
				if yyrl4677 <= cap(yyv4677) {
					yyv4677 = yyv4677[:yyrl4677]
				} else {
					yyv4677 = make([]ComponentCondition, yyrl4677)
				}
			} else {
				yyv4677 = make([]ComponentCondition, yyrl4677)
			}
			yyc4677 = true
			yyrr4677 = len(yyv4677)
			if yyrg4677 {
				copy(yyv4677, yyv24677)
			}
		} else if yyl4677 != len(yyv4677) {
			yyv4677 = yyv4677[:yyl4677]
			yyc4677 = true
		}
		yyj4677 := 0
		for ; yyj4677 < yyrr4677; yyj4677++ {
			yyh4677.ElemContainerState(yyj4677)
			if r.TryDecodeAsNil() {
				yyv4677[yyj4677] = ComponentCondition{}
			} else {
				yyv4678 := &yyv4677[yyj4677]
				yyv4678.CodecDecodeSelf(d)
			}

		}
		if yyrt4677 {
			for ; yyj4677 < yyl4677; yyj4677++ {
				yyv4677 = append(yyv4677, ComponentCondition{})
				yyh4677.ElemContainerState(yyj4677)
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = ComponentCondition{}
				} else {
					yyv4679 := &yyv4677[yyj4677]
					yyv4679.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4677 := 0
		for ; !r.CheckBreak(); yyj4677++ {

			if yyj4677 >= len(yyv4677) {
				yyv4677 = append(yyv4677, ComponentCondition{}) // var yyz4677 ComponentCondition
				yyc4677 = true
			}
			yyh4677.ElemContainerState(yyj4677)
			if yyj4677 < len(yyv4677) {
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = ComponentCondition{}
				} else {
					yyv4680 := &yyv4677[yyj4677]
					yyv4680.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4677 < len(yyv4677) {
			yyv4677 = yyv4677[:yyj4677]
			yyc4677 = true
		} else if yyj4677 == 0 && yyv4677 == nil {
			yyv4677 = []ComponentCondition{}
			yyc4677 = true
		}
	}
	yyh4677.End()
	if yyc4677 {
		*v = yyv4677
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4681 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4682 := &yyv4681
		yy4682.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4683 := *v
	yyh4683, yyl4683 := z.DecSliceHelperStart()
	var yyc4683 bool
	if yyl4683 == 0 {
		if yyv4683 == nil {
			yyv4683 = []ComponentStatus{}
			yyc4683 = true
		} else if len(yyv4683) != 0 {
			yyv4683 = yyv4683[:0]
			yyc4683 = true
		}
	} else if yyl4683 > 0 {
		var yyrr4683, yyrl4683 int
		var yyrt4683 bool
		if yyl4683 > cap(yyv4683) {

			yyrg4683 := len(yyv4683) > 0
			yyv24683 := yyv4683
			yyrl4683, yyrt4683 = z.DecInferLen(yyl4683, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4683 {
				if yyrl4683 <= cap(yyv4683) {
					yyv4683 = yyv4683[:yyrl4683]
				} else {
					yyv4683 = make([]ComponentStatus, yyrl4683)
				}
			} else {
				yyv4683 = make([]ComponentStatus, yyrl4683)
			}
			yyc4683 = true
			yyrr4683 = len(yyv4683)
			if yyrg4683 {
				copy(yyv4683, yyv24683)
			}
		} else if yyl4683 != len(yyv4683) {
			yyv4683 = yyv4683[:yyl4683]
			yyc4683 = true
		}
		yyj4683 := 0
		for ; yyj4683 < yyrr4683; yyj4683++ {
			yyh4683.ElemContainerState(yyj4683)
			if r.TryDecodeAsNil() {
				yyv4683[yyj4683] = ComponentStatus{}
			} else {
				yyv4684 := &yyv4683[yyj4683]
				yyv4684.CodecDecodeSelf(d)
			}

		}
		if yyrt4683 {
			for ; yyj4683 < yyl4683; yyj4683++ {
				yyv4683 = append(yyv4683, ComponentStatus{})
				yyh4683.ElemContainerState(yyj4683)
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = ComponentStatus{}
				} else {
					yyv4685 := &yyv4683[yyj4683]
					yyv4685.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4683 := 0
		for ; !r.CheckBreak(); yyj4683++ {

			if yyj4683 >= len(yyv4683) {
				yyv4683 = append(yyv4683, ComponentStatus{}) // var yyz4683 ComponentStatus
				yyc4683 = true
			}
			yyh4683.ElemContainerState(yyj4683)
			if yyj4683 < len(yyv4683) {
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = ComponentStatus{}
				} else {
					yyv4686 := &yyv4683[yyj4683]
					yyv4686.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4683 < len(yyv4683) {
			yyv4683 = yyv4683[:yyj4683]
			yyc4683 = true
		} else if yyj4683 == 0 && yyv4683 == nil {
			yyv4683 = []ComponentStatus{}
			yyc4683 = true
		}
	}
	yyh4683.End()
	if yyc4683 {
		*v = yyv4683
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4688 := &yyv4687
		yy4688.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4689 := *v
	yyh4689, yyl4689 := z.DecSliceHelperStart()
	var yyc4689 bool
	if yyl4689 == 0 {
		if yyv4689 == nil {
			yyv4689 = []DownwardAPIVolumeFile{}
			yyc4689 = true
		} else if len(yyv4689) != 0 {
			yyv4689 = yyv4689[:0]
			yyc4689 = true
		}
	} else if yyl4689 > 0 {
		var yyrr4689, yyrl4689 int
		var yyrt4689 bool
		if yyl4689 > cap(yyv4689) {

			yyrg4689 := len(yyv4689) > 0
			yyv24689 := yyv4689
			yyrl4689, yyrt4689 = z.DecInferLen(yyl4689, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4689 {
				if yyrl4689 <= cap(yyv4689) {
					yyv4689 = yyv4689[:yyrl4689]
				} else {
					yyv4689 = make([]DownwardAPIVolumeFile, yyrl4689)
				}
			} else {
				yyv4689 = make([]DownwardAPIVolumeFile, yyrl4689)
			}
			yyc4689 = true
			yyrr4689 = len(yyv4689)
			if yyrg4689 {
				copy(yyv4689, yyv24689)
			}
		} else if yyl4689 != len(yyv4689) {
			yyv4689 = yyv4689[:yyl4689]
			yyc4689 = true
		}
		yyj4689 := 0
		for ; yyj4689 < yyrr4689; yyj4689++ {
			yyh4689.ElemContainerState(yyj4689)
			if r.TryDecodeAsNil() {
				yyv4689[yyj4689] = DownwardAPIVolumeFile{}
			} else {
				yyv4690 := &yyv4689[yyj4689]
				yyv4690.CodecDecodeSelf(d)
			}

		}
		if yyrt4689 {
			for ; yyj4689 < yyl4689; yyj4689++ {
				yyv4689 = append(yyv4689, DownwardAPIVolumeFile{})
				yyh4689.ElemContainerState(yyj4689)
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = DownwardAPIVolumeFile{}
				} else {
					yyv4691 := &yyv4689[yyj4689]
					yyv4691.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4689 := 0
		for ; !r.CheckBreak(); yyj4689++ {

			if yyj4689 >= len(yyv4689) {
				yyv4689 = append(yyv4689, DownwardAPIVolumeFile{}) // var yyz4689 DownwardAPIVolumeFile
				yyc4689 = true
			}
			yyh4689.ElemContainerState(yyj4689)
			if yyj4689 < len(yyv4689) {
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = DownwardAPIVolumeFile{}
				} else {
					yyv4692 := &yyv4689[yyj4689]
					yyv4692.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4689 < len(yyv4689) {
			yyv4689 = yyv4689[:yyj4689]
			yyc4689 = true
		} else if yyj4689 == 0 && yyv4689 == nil {
			yyv4689 = []DownwardAPIVolumeFile{}
			yyc4689 = true
		}
	}
	yyh4689.End()
	if yyc4689 {
		*v = yyv4689
	}
}
