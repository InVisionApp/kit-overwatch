/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [21]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(21)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyq167 [20]bool
			_, _, _ = yysep167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[0] = x.HostPath != nil
			yyq167[1] = x.EmptyDir != nil
			yyq167[2] = x.GCEPersistentDisk != nil
			yyq167[3] = x.AWSElasticBlockStore != nil
			yyq167[4] = x.GitRepo != nil
			yyq167[5] = x.Secret != nil
			yyq167[6] = x.NFS != nil
			yyq167[7] = x.ISCSI != nil
			yyq167[8] = x.Glusterfs != nil
			yyq167[9] = x.PersistentVolumeClaim != nil
			yyq167[10] = x.RBD != nil
			yyq167[11] = x.FlexVolume != nil
			yyq167[12] = x.Cinder != nil
			yyq167[13] = x.CephFS != nil
			yyq167[14] = x.Flocker != nil
			yyq167[15] = x.DownwardAPI != nil
			yyq167[16] = x.FC != nil
			yyq167[17] = x.AzureFile != nil
			yyq167[18] = x.ConfigMap != nil
			yyq167[19] = x.VsphereVolume != nil
			var yynn167 int
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(20)
			} else {
				yynn167 = 0
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
				yynn167 = 0
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym188 := z.DecBinary()
	_ = yym188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct189 := r.ContainerType()
		if yyct189 == codecSelferValueTypeMap1234 {
			yyl189 := r.ReadMapStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl189, d)
			}
		} else if yyct189 == codecSelferValueTypeArray1234 {
			yyl189 := r.ReadArrayStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys190Slc
	var yyhl190 bool = l >= 0
	for yyj190 := 0; ; yyj190++ {
		if yyhl190 {
			if yyj190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys190Slc = r.DecodeBytes(yys190Slc, true, true)
		yys190 := string(yys190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys190 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys190)
		} // end switch yys190
	} // end for yyj190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym232 := z.EncBinary()
		_ = yym232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep233 := !z.EncBinary()
			yy2arr233 := z.EncBasicHandle().StructToArray
			var yyq233 [14]bool
			_, _, _ = yysep233, yyq233, yy2arr233
			const yyr233 bool = false
			yyq233[0] = x.GCEPersistentDisk != nil
			yyq233[1] = x.AWSElasticBlockStore != nil
			yyq233[2] = x.HostPath != nil
			yyq233[3] = x.Glusterfs != nil
			yyq233[4] = x.NFS != nil
			yyq233[5] = x.RBD != nil
			yyq233[6] = x.ISCSI != nil
			yyq233[7] = x.FlexVolume != nil
			yyq233[8] = x.Cinder != nil
			yyq233[9] = x.CephFS != nil
			yyq233[10] = x.FC != nil
			yyq233[11] = x.Flocker != nil
			yyq233[12] = x.AzureFile != nil
			yyq233[13] = x.VsphereVolume != nil
			var yynn233 int
			if yyr233 || yy2arr233 {
				r.EncodeArrayStart(14)
			} else {
				yynn233 = 0
				for _, b := range yyq233 {
					if b {
						yynn233++
					}
				}
				r.EncodeMapStart(yynn233)
				yynn233 = 0
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym248 := z.DecBinary()
	_ = yym248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct249 := r.ContainerType()
		if yyct249 == codecSelferValueTypeMap1234 {
			yyl249 := r.ReadMapStart()
			if yyl249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl249, d)
			}
		} else if yyct249 == codecSelferValueTypeArray1234 {
			yyl249 := r.ReadArrayStart()
			if yyl249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys250Slc
	var yyhl250 bool = l >= 0
	for yyj250 := 0; ; yyj250++ {
		if yyhl250 {
			if yyj250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys250Slc = r.DecodeBytes(yys250Slc, true, true)
		yys250 := string(yys250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys250 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys250)
		} // end switch yys250
	} // end for yyj250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj265 int
	var yyb265 bool
	var yyhl265 bool = l >= 0
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj265++
		if yyhl265 {
			yyb265 = yyj265 > l
		} else {
			yyb265 = r.CheckBreak()
		}
		if yyb265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [2]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.ReadOnly != false
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(2)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym283 := z.EncBinary()
				_ = yym283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym284 := z.EncBinary()
				_ = yym284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[1] {
					yym286 := z.EncBinary()
					_ = yym286
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym288 := z.DecBinary()
	_ = yym288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct289 := r.ContainerType()
		if yyct289 == codecSelferValueTypeMap1234 {
			yyl289 := r.ReadMapStart()
			if yyl289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl289, d)
			}
		} else if yyct289 == codecSelferValueTypeArray1234 {
			yyl289 := r.ReadArrayStart()
			if yyl289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys290Slc
	var yyhl290 bool = l >= 0
	for yyj290 := 0; ; yyj290++ {
		if yyhl290 {
			if yyj290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys290Slc = r.DecodeBytes(yys290Slc, true, true)
		yys290 := string(yys290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys290 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys290)
		} // end switch yys290
	} // end for yyj290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj293 int
	var yyb293 bool
	var yyhl293 bool = l >= 0
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj293++
		if yyhl293 {
			yyb293 = yyj293 > l
		} else {
			yyb293 = r.CheckBreak()
		}
		if yyb293 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj293-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [5]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			yyq297[3] = true
			yyq297[4] = true
			var yynn297 int
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(5)
			} else {
				yynn297 = 0
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
				yynn297 = 0
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[2] {
					yy305 := &x.ObjectMeta
					yy305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy306 := &x.ObjectMeta
					yy306.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[3] {
					yy308 := &x.Spec
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Spec
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[4] {
					yy311 := &x.Status
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.Status
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv318 := &x.ObjectMeta
				yyv318.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv319 := &x.Spec
				yyv319.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv320 := &x.Status
				yyv320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv324 := &x.ObjectMeta
		yyv324.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv325 := &x.Spec
		yyv325.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv326 := &x.Status
		yyv326.CodecDecodeSelf(d)
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [18]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq328[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq328[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq328[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq328[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq328[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq328[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq328[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq328[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq328[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq328[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq328[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq328[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq328[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq328[15] = len(x.AccessModes) != 0
			yyq328[16] = x.ClaimRef != nil
			yyq328[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(18)
			} else {
				yynn328 = 1
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn330 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn330 = true
				goto LABEL330
			}
		LABEL330:
			if yyr328 || yy2arr328 {
				if yyn330 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn330 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn331 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn331 = true
				goto LABEL331
			}
		LABEL331:
			if yyr328 || yy2arr328 {
				if yyn331 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn331 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn332 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn332 = true
				goto LABEL332
			}
		LABEL332:
			if yyr328 || yy2arr328 {
				if yyn332 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn332 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn333 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn333 = true
				goto LABEL333
			}
		LABEL333:
			if yyr328 || yy2arr328 {
				if yyn333 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn333 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn334 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn334 = true
				goto LABEL334
			}
		LABEL334:
			if yyr328 || yy2arr328 {
				if yyn334 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn334 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn335 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn335 = true
				goto LABEL335
			}
		LABEL335:
			if yyr328 || yy2arr328 {
				if yyn335 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn335 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn336 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn336 = true
				goto LABEL336
			}
		LABEL336:
			if yyr328 || yy2arr328 {
				if yyn336 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn336 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn337 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn337 = true
				goto LABEL337
			}
		LABEL337:
			if yyr328 || yy2arr328 {
				if yyn337 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn337 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn338 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn338 = true
				goto LABEL338
			}
		LABEL338:
			if yyr328 || yy2arr328 {
				if yyn338 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn338 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr328 || yy2arr328 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr328 || yy2arr328 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr328 || yy2arr328 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr328 || yy2arr328 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr328 || yy2arr328 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym345 := z.EncBinary()
						_ = yym345
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym346 := z.EncBinary()
						_ = yym346
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym349 := z.DecBinary()
	_ = yym349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct350 := r.ContainerType()
		if yyct350 == codecSelferValueTypeMap1234 {
			yyl350 := r.ReadMapStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl350, d)
			}
		} else if yyct350 == codecSelferValueTypeArray1234 {
			yyl350 := r.ReadArrayStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys351Slc
	var yyhl351 bool = l >= 0
	for yyj351 := 0; ; yyj351++ {
		if yyhl351 {
			if yyj351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys351Slc = r.DecodeBytes(yys351Slc, true, true)
		yys351 := string(yys351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys351 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv352 := &x.Capacity
				yyv352.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv367 := &x.AccessModes
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv367), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys351)
		} // end switch yys351
	} // end for yyj351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj371 int
	var yyb371 bool
	var yyhl371 bool = l >= 0
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv372 := &x.Capacity
		yyv372.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv387 := &x.AccessModes
		yym388 := z.DecBinary()
		_ = yym388
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv387), d)
		}
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj371++
		if yyhl371 {
			yyb371 = yyj371 > l
		} else {
			yyb371 = r.CheckBreak()
		}
		if yyb371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym391 := z.EncBinary()
	_ = yym391
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym392 := z.DecBinary()
	_ = yym392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [3]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Phase != ""
			yyq394[1] = x.Message != ""
			yyq394[2] = x.Reason != ""
			var yynn394 int
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(3)
			} else {
				yynn394 = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
				yynn394 = 0
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[1] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[2] {
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym401 := z.EncBinary()
					_ = yym401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym402 := z.DecBinary()
	_ = yym402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct403 := r.ContainerType()
		if yyct403 == codecSelferValueTypeMap1234 {
			yyl403 := r.ReadMapStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl403, d)
			}
		} else if yyct403 == codecSelferValueTypeArray1234 {
			yyl403 := r.ReadArrayStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys404Slc
	var yyhl404 bool = l >= 0
	for yyj404 := 0; ; yyj404++ {
		if yyhl404 {
			if yyj404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys404Slc = r.DecodeBytes(yys404Slc, true, true)
		yys404 := string(yys404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys404 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys404)
		} // end switch yys404
	} // end for yyj404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj408 int
	var yyb408 bool
	var yyhl408 bool = l >= 0
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj408++
		if yyhl408 {
			yyb408 = yyj408 > l
		} else {
			yyb408 = r.CheckBreak()
		}
		if yyb408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym412 := z.EncBinary()
		_ = yym412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep413 := !z.EncBinary()
			yy2arr413 := z.EncBasicHandle().StructToArray
			var yyq413 [4]bool
			_, _, _ = yysep413, yyq413, yy2arr413
			const yyr413 bool = false
			yyq413[0] = x.Kind != ""
			yyq413[1] = x.APIVersion != ""
			yyq413[2] = true
			var yynn413 int
			if yyr413 || yy2arr413 {
				r.EncodeArrayStart(4)
			} else {
				yynn413 = 1
				for _, b := range yyq413 {
					if b {
						yynn413++
					}
				}
				r.EncodeMapStart(yynn413)
				yynn413 = 0
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[0] {
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym416 := z.EncBinary()
					_ = yym416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[1] {
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym419 := z.EncBinary()
					_ = yym419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[2] {
					yy421 := &x.ListMeta
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else if z.HasExtensions() && z.EncExt(yy421) {
					} else {
						z.EncFallback(yy421)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.ListMeta
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy423) {
					} else {
						z.EncFallback(yy423)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym428 := z.DecBinary()
	_ = yym428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct429 := r.ContainerType()
		if yyct429 == codecSelferValueTypeMap1234 {
			yyl429 := r.ReadMapStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl429, d)
			}
		} else if yyct429 == codecSelferValueTypeArray1234 {
			yyl429 := r.ReadArrayStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys430Slc
	var yyhl430 bool = l >= 0
	for yyj430 := 0; ; yyj430++ {
		if yyhl430 {
			if yyj430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys430Slc = r.DecodeBytes(yys430Slc, true, true)
		yys430 := string(yys430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv433 := &x.ListMeta
				yym434 := z.DecBinary()
				_ = yym434
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv433) {
				} else {
					z.DecFallback(yyv433, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv435 := &x.Items
				yym436 := z.DecBinary()
				_ = yym436
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys430)
		} // end switch yys430
	} // end for yyj430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv440 := &x.ListMeta
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv440) {
		} else {
			z.DecFallback(yyv440, false)
		}
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv442 := &x.Items
		yym443 := z.DecBinary()
		_ = yym443
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv442), d)
		}
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym444 := z.EncBinary()
		_ = yym444
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep445 := !z.EncBinary()
			yy2arr445 := z.EncBasicHandle().StructToArray
			var yyq445 [5]bool
			_, _, _ = yysep445, yyq445, yy2arr445
			const yyr445 bool = false
			yyq445[0] = x.Kind != ""
			yyq445[1] = x.APIVersion != ""
			yyq445[2] = true
			yyq445[3] = true
			yyq445[4] = true
			var yynn445 int
			if yyr445 || yy2arr445 {
				r.EncodeArrayStart(5)
			} else {
				yynn445 = 0
				for _, b := range yyq445 {
					if b {
						yynn445++
					}
				}
				r.EncodeMapStart(yynn445)
				yynn445 = 0
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[0] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[2] {
					yy453 := &x.ObjectMeta
					yy453.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy454 := &x.ObjectMeta
					yy454.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[3] {
					yy456 := &x.Spec
					yy456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy457 := &x.Spec
					yy457.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[4] {
					yy459 := &x.Status
					yy459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy460 := &x.Status
					yy460.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym461 := z.DecBinary()
	_ = yym461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct462 := r.ContainerType()
		if yyct462 == codecSelferValueTypeMap1234 {
			yyl462 := r.ReadMapStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl462, d)
			}
		} else if yyct462 == codecSelferValueTypeArray1234 {
			yyl462 := r.ReadArrayStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys463Slc
	var yyhl463 bool = l >= 0
	for yyj463 := 0; ; yyj463++ {
		if yyhl463 {
			if yyj463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys463Slc = r.DecodeBytes(yys463Slc, true, true)
		yys463 := string(yys463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys463 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv466 := &x.ObjectMeta
				yyv466.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv467 := &x.Spec
				yyv467.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv468 := &x.Status
				yyv468.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys463)
		} // end switch yys463
	} // end for yyj463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv472 := &x.ObjectMeta
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv473 := &x.Spec
		yyv473.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv474 := &x.Status
		yyv474.CodecDecodeSelf(d)
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [4]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = x.Kind != ""
			yyq476[1] = x.APIVersion != ""
			yyq476[2] = true
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(4)
			} else {
				yynn476 = 1
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym482 := z.EncBinary()
					_ = yym482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[2] {
					yy484 := &x.ListMeta
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else if z.HasExtensions() && z.EncExt(yy484) {
					} else {
						z.EncFallback(yy484)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym491 := z.DecBinary()
	_ = yym491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct492 := r.ContainerType()
		if yyct492 == codecSelferValueTypeMap1234 {
			yyl492 := r.ReadMapStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl492, d)
			}
		} else if yyct492 == codecSelferValueTypeArray1234 {
			yyl492 := r.ReadArrayStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys493Slc
	var yyhl493 bool = l >= 0
	for yyj493 := 0; ; yyj493++ {
		if yyhl493 {
			if yyj493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys493Slc = r.DecodeBytes(yys493Slc, true, true)
		yys493 := string(yys493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv496 := &x.ListMeta
				yym497 := z.DecBinary()
				_ = yym497
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv496) {
				} else {
					z.DecFallback(yyv496, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv498 := &x.Items
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv498), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys493)
		} // end switch yys493
	} // end for yyj493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv503 := &x.ListMeta
		yym504 := z.DecBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv503) {
		} else {
			z.DecFallback(yyv503, false)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv505 := &x.Items
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv505), d)
		}
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym507 := z.EncBinary()
		_ = yym507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep508 := !z.EncBinary()
			yy2arr508 := z.EncBasicHandle().StructToArray
			var yyq508 [4]bool
			_, _, _ = yysep508, yyq508, yy2arr508
			const yyr508 bool = false
			yyq508[0] = len(x.AccessModes) != 0
			yyq508[1] = x.Selector != nil
			yyq508[2] = true
			yyq508[3] = x.VolumeName != ""
			var yynn508 int
			if yyr508 || yy2arr508 {
				r.EncodeArrayStart(4)
			} else {
				yynn508 = 0
				for _, b := range yyq508 {
					if b {
						yynn508++
					}
				}
				r.EncodeMapStart(yynn508)
				yynn508 = 0
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym510 := z.EncBinary()
						_ = yym510
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym511 := z.EncBinary()
						_ = yym511
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym514 := z.EncBinary()
						_ = yym514
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[2] {
					yy516 := &x.Resources
					yy516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy517 := &x.Resources
					yy517.CodecEncodeSelf(e)
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[3] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym521 := z.DecBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct522 := r.ContainerType()
		if yyct522 == codecSelferValueTypeMap1234 {
			yyl522 := r.ReadMapStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl522, d)
			}
		} else if yyct522 == codecSelferValueTypeArray1234 {
			yyl522 := r.ReadArrayStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys523Slc
	var yyhl523 bool = l >= 0
	for yyj523 := 0; ; yyj523++ {
		if yyhl523 {
			if yyj523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys523Slc = r.DecodeBytes(yys523Slc, true, true)
		yys523 := string(yys523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys523 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv524 := &x.AccessModes
				yym525 := z.DecBinary()
				_ = yym525
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv524), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym527 := z.DecBinary()
				_ = yym527
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv528 := &x.Resources
				yyv528.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys523)
		} // end switch yys523
	} // end for yyj523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj530 int
	var yyb530 bool
	var yyhl530 bool = l >= 0
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv531 := &x.AccessModes
		yym532 := z.DecBinary()
		_ = yym532
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv531), d)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv535 := &x.Resources
		yyv535.CodecDecodeSelf(d)
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj530++
		if yyhl530 {
			yyb530 = yyj530 > l
		} else {
			yyb530 = r.CheckBreak()
		}
		if yyb530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [3]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = x.Phase != ""
			yyq538[1] = len(x.AccessModes) != 0
			yyq538[2] = len(x.Capacity) != 0
			var yynn538 int
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(3)
			} else {
				yynn538 = 0
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
				yynn538 = 0
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym541 := z.EncBinary()
						_ = yym541
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv548 := &x.AccessModes
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv550 := &x.Capacity
				yyv550.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj551 int
	var yyb551 bool
	var yyhl551 bool = l >= 0
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv553 := &x.AccessModes
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
		}
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv555 := &x.Capacity
		yyv555.CodecDecodeSelf(d)
	}
	for {
		yyj551++
		if yyhl551 {
			yyb551 = yyj551 > l
		} else {
			yyb551 = r.CheckBreak()
		}
		if yyb551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym556 := z.EncBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym557 := z.DecBinary()
	_ = yym557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym558 := z.EncBinary()
	_ = yym558
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym559 := z.DecBinary()
	_ = yym559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym560 := z.EncBinary()
	_ = yym560
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym562 := z.EncBinary()
		_ = yym562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep563 := !z.EncBinary()
			yy2arr563 := z.EncBasicHandle().StructToArray
			var yyq563 [1]bool
			_, _, _ = yysep563, yyq563, yy2arr563
			const yyr563 bool = false
			var yynn563 int
			if yyr563 || yy2arr563 {
				r.EncodeArrayStart(1)
			} else {
				yynn563 = 1
				for _, b := range yyq563 {
					if b {
						yynn563++
					}
				}
				r.EncodeMapStart(yynn563)
				yynn563 = 0
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym567 := z.DecBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct568 := r.ContainerType()
		if yyct568 == codecSelferValueTypeMap1234 {
			yyl568 := r.ReadMapStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl568, d)
			}
		} else if yyct568 == codecSelferValueTypeArray1234 {
			yyl568 := r.ReadArrayStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys569Slc
	var yyhl569 bool = l >= 0
	for yyj569 := 0; ; yyj569++ {
		if yyhl569 {
			if yyj569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys569Slc = r.DecodeBytes(yys569Slc, true, true)
		yys569 := string(yys569Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys569 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys569)
		} // end switch yys569
	} // end for yyj569
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym573 := z.EncBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep574 := !z.EncBinary()
			yy2arr574 := z.EncBasicHandle().StructToArray
			var yyq574 [1]bool
			_, _, _ = yysep574, yyq574, yy2arr574
			const yyr574 bool = false
			yyq574[0] = x.Medium != ""
			var yynn574 int
			if yyr574 || yy2arr574 {
				r.EncodeArrayStart(1)
			} else {
				yynn574 = 0
				for _, b := range yyq574 {
					if b {
						yynn574++
					}
				}
				r.EncodeMapStart(yynn574)
				yynn574 = 0
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct577 := r.ContainerType()
		if yyct577 == codecSelferValueTypeMap1234 {
			yyl577 := r.ReadMapStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl577, d)
			}
		} else if yyct577 == codecSelferValueTypeArray1234 {
			yyl577 := r.ReadArrayStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys578Slc
	var yyhl578 bool = l >= 0
	for yyj578 := 0; ; yyj578++ {
		if yyhl578 {
			if yyj578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys578Slc = r.DecodeBytes(yys578Slc, true, true)
		yys578 := string(yys578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys578 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys578)
		} // end switch yys578
	} // end for yyj578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym584 := z.EncBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym586 := z.EncBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep587 := !z.EncBinary()
			yy2arr587 := z.EncBasicHandle().StructToArray
			var yyq587 [4]bool
			_, _, _ = yysep587, yyq587, yy2arr587
			const yyr587 bool = false
			yyq587[1] = x.FSType != ""
			yyq587[2] = x.Partition != 0
			yyq587[3] = x.ReadOnly != false
			var yynn587 int
			if yyr587 || yy2arr587 {
				r.EncodeArrayStart(4)
			} else {
				yynn587 = 1
				for _, b := range yyq587 {
					if b {
						yynn587++
					}
				}
				r.EncodeMapStart(yynn587)
				yynn587 = 0
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym589 := z.EncBinary()
				_ = yym589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym590 := z.EncBinary()
				_ = yym590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[1] {
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq587[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[2] {
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq587[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[3] {
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq587[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct601 := r.ContainerType()
		if yyct601 == codecSelferValueTypeMap1234 {
			yyl601 := r.ReadMapStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl601, d)
			}
		} else if yyct601 == codecSelferValueTypeArray1234 {
			yyl601 := r.ReadArrayStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys602Slc
	var yyhl602 bool = l >= 0
	for yyj602 := 0; ; yyj602++ {
		if yyhl602 {
			if yyj602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys602Slc = r.DecodeBytes(yys602Slc, true, true)
		yys602 := string(yys602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys602 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys602)
		} // end switch yys602
	} // end for yyj602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj607 int
	var yyb607 bool
	var yyhl607 bool = l >= 0
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj607++
		if yyhl607 {
			yyb607 = yyj607 > l
		} else {
			yyb607 = r.CheckBreak()
		}
		if yyb607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [6]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[0] = x.TargetPortal != ""
			yyq613[1] = x.IQN != ""
			yyq613[2] = x.Lun != 0
			yyq613[3] = x.ISCSIInterface != ""
			yyq613[4] = x.FSType != ""
			yyq613[5] = x.ReadOnly != false
			var yynn613 int
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(6)
			} else {
				yynn613 = 0
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
				yynn613 = 0
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[0] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[4] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[5] {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym632 := z.DecBinary()
	_ = yym632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct633 := r.ContainerType()
		if yyct633 == codecSelferValueTypeMap1234 {
			yyl633 := r.ReadMapStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl633, d)
			}
		} else if yyct633 == codecSelferValueTypeArray1234 {
			yyl633 := r.ReadArrayStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys634Slc
	var yyhl634 bool = l >= 0
	for yyj634 := 0; ; yyj634++ {
		if yyhl634 {
			if yyj634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys634Slc = r.DecodeBytes(yys634Slc, true, true)
		yys634 := string(yys634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys634 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys634)
		} // end switch yys634
	} // end for yyj634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj641 int
	var yyb641 bool
	var yyhl641 bool = l >= 0
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj641++
		if yyhl641 {
			yyb641 = yyj641 > l
		} else {
			yyb641 = r.CheckBreak()
		}
		if yyb641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym648 := z.EncBinary()
		_ = yym648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep649 := !z.EncBinary()
			yy2arr649 := z.EncBasicHandle().StructToArray
			var yyq649 [4]bool
			_, _, _ = yysep649, yyq649, yy2arr649
			const yyr649 bool = false
			yyq649[2] = x.FSType != ""
			yyq649[3] = x.ReadOnly != false
			var yynn649 int
			if yyr649 || yy2arr649 {
				r.EncodeArrayStart(4)
			} else {
				yynn649 = 2
				for _, b := range yyq649 {
					if b {
						yynn649++
					}
				}
				r.EncodeMapStart(yynn649)
				yynn649 = 0
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy654 := *x.Lun
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeInt(int64(yy654))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy656 := *x.Lun
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeInt(int64(yy656))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[2] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[3] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq649[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct665 := r.ContainerType()
		if yyct665 == codecSelferValueTypeMap1234 {
			yyl665 := r.ReadMapStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl665, d)
			}
		} else if yyct665 == codecSelferValueTypeArray1234 {
			yyl665 := r.ReadArrayStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys666Slc
	var yyhl666 bool = l >= 0
	for yyj666 := 0; ; yyj666++ {
		if yyhl666 {
			if yyj666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys666Slc = r.DecodeBytes(yys666Slc, true, true)
		yys666 := string(yys666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys666 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv667 := &x.TargetWWNs
				yym668 := z.DecBinary()
				_ = yym668
				if false {
				} else {
					z.F.DecSliceStringX(yyv667, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym670 := z.DecBinary()
				_ = yym670
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys666)
		} // end switch yys666
	} // end for yyj666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj673 int
	var yyb673 bool
	var yyhl673 bool = l >= 0
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv674 := &x.TargetWWNs
		yym675 := z.DecBinary()
		_ = yym675
		if false {
		} else {
			z.F.DecSliceStringX(yyv674, false, d)
		}
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym677 := z.DecBinary()
		_ = yym677
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj673++
		if yyhl673 {
			yyb673 = yyj673 > l
		} else {
			yyb673 = r.CheckBreak()
		}
		if yyb673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym680 := z.EncBinary()
		_ = yym680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep681 := !z.EncBinary()
			yy2arr681 := z.EncBasicHandle().StructToArray
			var yyq681 [5]bool
			_, _, _ = yysep681, yyq681, yy2arr681
			const yyr681 bool = false
			yyq681[1] = x.FSType != ""
			yyq681[2] = x.SecretRef != nil
			yyq681[3] = x.ReadOnly != false
			yyq681[4] = len(x.Options) != 0
			var yynn681 int
			if yyr681 || yy2arr681 {
				r.EncodeArrayStart(5)
			} else {
				yynn681 = 1
				for _, b := range yyq681 {
					if b {
						yynn681++
					}
				}
				r.EncodeMapStart(yynn681)
				yynn681 = 0
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym684 := z.EncBinary()
				_ = yym684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[1] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[3] {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq681[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym693 := z.EncBinary()
						_ = yym693
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym694 := z.EncBinary()
						_ = yym694
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym695 := z.DecBinary()
	_ = yym695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct696 := r.ContainerType()
		if yyct696 == codecSelferValueTypeMap1234 {
			yyl696 := r.ReadMapStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl696, d)
			}
		} else if yyct696 == codecSelferValueTypeArray1234 {
			yyl696 := r.ReadArrayStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys697Slc
	var yyhl697 bool = l >= 0
	for yyj697 := 0; ; yyj697++ {
		if yyhl697 {
			if yyj697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys697Slc = r.DecodeBytes(yys697Slc, true, true)
		yys697 := string(yys697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys697 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv702 := &x.Options
				yym703 := z.DecBinary()
				_ = yym703
				if false {
				} else {
					z.F.DecMapStringStringX(yyv702, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys697)
		} // end switch yys697
	} // end for yyj697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj704 int
	var yyb704 bool
	var yyhl704 bool = l >= 0
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv709 := &x.Options
		yym710 := z.DecBinary()
		_ = yym710
		if false {
		} else {
			z.F.DecMapStringStringX(yyv709, false, d)
		}
	}
	for {
		yyj704++
		if yyhl704 {
			yyb704 = yyj704 > l
		} else {
			yyb704 = r.CheckBreak()
		}
		if yyb704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [4]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[1] = x.FSType != ""
			yyq712[2] = x.Partition != 0
			yyq712[3] = x.ReadOnly != false
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(4)
			} else {
				yynn712 = 1
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym715 := z.EncBinary()
				_ = yym715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[3] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym725 := z.DecBinary()
	_ = yym725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct726 := r.ContainerType()
		if yyct726 == codecSelferValueTypeMap1234 {
			yyl726 := r.ReadMapStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl726, d)
			}
		} else if yyct726 == codecSelferValueTypeArray1234 {
			yyl726 := r.ReadArrayStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys727Slc
	var yyhl727 bool = l >= 0
	for yyj727 := 0; ; yyj727++ {
		if yyhl727 {
			if yyj727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys727Slc = r.DecodeBytes(yys727Slc, true, true)
		yys727 := string(yys727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys727 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys727)
		} // end switch yys727
	} // end for yyj727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj732 int
	var yyb732 bool
	var yyhl732 bool = l >= 0
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj732++
		if yyhl732 {
			yyb732 = yyj732 > l
		} else {
			yyb732 = r.CheckBreak()
		}
		if yyb732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [3]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			yyq738[1] = x.Revision != ""
			yyq738[2] = x.Directory != ""
			var yynn738 int
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(3)
			} else {
				yynn738 = 1
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
				yynn738 = 0
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym740 := z.EncBinary()
				_ = yym740
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym741 := z.EncBinary()
				_ = yym741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[1] {
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[2] {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym748 := z.DecBinary()
	_ = yym748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct749 := r.ContainerType()
		if yyct749 == codecSelferValueTypeMap1234 {
			yyl749 := r.ReadMapStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl749, d)
			}
		} else if yyct749 == codecSelferValueTypeArray1234 {
			yyl749 := r.ReadArrayStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys750Slc
	var yyhl750 bool = l >= 0
	for yyj750 := 0; ; yyj750++ {
		if yyhl750 {
			if yyj750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys750Slc = r.DecodeBytes(yys750Slc, true, true)
		yys750 := string(yys750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys750 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys750)
		} // end switch yys750
	} // end for yyj750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj754 int
	var yyb754 bool
	var yyhl754 bool = l >= 0
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj754++
		if yyhl754 {
			yyb754 = yyj754 > l
		} else {
			yyb754 = r.CheckBreak()
		}
		if yyb754 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj754-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [2]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[0] = x.SecretName != ""
			yyq759[1] = len(x.Items) != 0
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(2)
			} else {
				yynn759 = 0
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[0] {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym764 := z.EncBinary()
						_ = yym764
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym765 := z.EncBinary()
						_ = yym765
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct767 := r.ContainerType()
		if yyct767 == codecSelferValueTypeMap1234 {
			yyl767 := r.ReadMapStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl767, d)
			}
		} else if yyct767 == codecSelferValueTypeArray1234 {
			yyl767 := r.ReadArrayStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys768Slc
	var yyhl768 bool = l >= 0
	for yyj768 := 0; ; yyj768++ {
		if yyhl768 {
			if yyj768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys768Slc = r.DecodeBytes(yys768Slc, true, true)
		yys768 := string(yys768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys768 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv770 := &x.Items
				yym771 := z.DecBinary()
				_ = yym771
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv770), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys768)
		} // end switch yys768
	} // end for yyj768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj772 int
	var yyb772 bool
	var yyhl772 bool = l >= 0
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv774 := &x.Items
		yym775 := z.DecBinary()
		_ = yym775
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv774), d)
		}
	}
	for {
		yyj772++
		if yyhl772 {
			yyb772 = yyj772 > l
		} else {
			yyb772 = r.CheckBreak()
		}
		if yyb772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym776 := z.EncBinary()
		_ = yym776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep777 := !z.EncBinary()
			yy2arr777 := z.EncBasicHandle().StructToArray
			var yyq777 [3]bool
			_, _, _ = yysep777, yyq777, yy2arr777
			const yyr777 bool = false
			yyq777[2] = x.ReadOnly != false
			var yynn777 int
			if yyr777 || yy2arr777 {
				r.EncodeArrayStart(3)
			} else {
				yynn777 = 2
				for _, b := range yyq777 {
					if b {
						yynn777++
					}
				}
				r.EncodeMapStart(yynn777)
				yynn777 = 0
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym780 := z.EncBinary()
				_ = yym780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq777[2] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq777[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym787 := z.DecBinary()
	_ = yym787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct788 := r.ContainerType()
		if yyct788 == codecSelferValueTypeMap1234 {
			yyl788 := r.ReadMapStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl788, d)
			}
		} else if yyct788 == codecSelferValueTypeArray1234 {
			yyl788 := r.ReadArrayStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys789Slc
	var yyhl789 bool = l >= 0
	for yyj789 := 0; ; yyj789++ {
		if yyhl789 {
			if yyj789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys789Slc = r.DecodeBytes(yys789Slc, true, true)
		yys789 := string(yys789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys789 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys789)
		} // end switch yys789
	} // end for yyj789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj793 int
	var yyb793 bool
	var yyhl793 bool = l >= 0
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj793++
		if yyhl793 {
			yyb793 = yyj793 > l
		} else {
			yyb793 = r.CheckBreak()
		}
		if yyb793 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj793-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym797 := z.EncBinary()
		_ = yym797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep798 := !z.EncBinary()
			yy2arr798 := z.EncBasicHandle().StructToArray
			var yyq798 [3]bool
			_, _, _ = yysep798, yyq798, yy2arr798
			const yyr798 bool = false
			yyq798[2] = x.ReadOnly != false
			var yynn798 int
			if yyr798 || yy2arr798 {
				r.EncodeArrayStart(3)
			} else {
				yynn798 = 2
				for _, b := range yyq798 {
					if b {
						yynn798++
					}
				}
				r.EncodeMapStart(yynn798)
				yynn798 = 0
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym801 := z.EncBinary()
				_ = yym801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq798[2] {
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq798[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym808 := z.DecBinary()
	_ = yym808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct809 := r.ContainerType()
		if yyct809 == codecSelferValueTypeMap1234 {
			yyl809 := r.ReadMapStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl809, d)
			}
		} else if yyct809 == codecSelferValueTypeArray1234 {
			yyl809 := r.ReadArrayStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys810Slc
	var yyhl810 bool = l >= 0
	for yyj810 := 0; ; yyj810++ {
		if yyhl810 {
			if yyj810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys810Slc = r.DecodeBytes(yys810Slc, true, true)
		yys810 := string(yys810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys810 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys810)
		} // end switch yys810
	} // end for yyj810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [8]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[2] = x.FSType != ""
			yyq819[3] = x.RBDPool != ""
			yyq819[4] = x.RadosUser != ""
			yyq819[5] = x.Keyring != ""
			yyq819[6] = x.SecretRef != nil
			yyq819[7] = x.ReadOnly != false
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(8)
			} else {
				yynn819 = 2
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[2] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[3] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[4] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[5] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq819[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[7] {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq819[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv845 := &x.CephMonitors
				yym846 := z.DecBinary()
				_ = yym846
				if false {
				} else {
					z.F.DecSliceStringX(yyv845, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj854 int
	var yyb854 bool
	var yyhl854 bool = l >= 0
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv855 := &x.CephMonitors
		yym856 := z.DecBinary()
		_ = yym856
		if false {
		} else {
			z.F.DecSliceStringX(yyv855, false, d)
		}
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj854++
		if yyhl854 {
			yyb854 = yyj854 > l
		} else {
			yyb854 = r.CheckBreak()
		}
		if yyb854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym864 := z.EncBinary()
		_ = yym864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep865 := !z.EncBinary()
			yy2arr865 := z.EncBasicHandle().StructToArray
			var yyq865 [3]bool
			_, _, _ = yysep865, yyq865, yy2arr865
			const yyr865 bool = false
			yyq865[1] = x.FSType != ""
			yyq865[2] = x.ReadOnly != false
			var yynn865 int
			if yyr865 || yy2arr865 {
				r.EncodeArrayStart(3)
			} else {
				yynn865 = 1
				for _, b := range yyq865 {
					if b {
						yynn865++
					}
				}
				r.EncodeMapStart(yynn865)
				yynn865 = 0
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym867 := z.EncBinary()
				_ = yym867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym868 := z.EncBinary()
				_ = yym868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[1] {
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq865[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[2] {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq865[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct876 := r.ContainerType()
		if yyct876 == codecSelferValueTypeMap1234 {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if yyct876 == codecSelferValueTypeArray1234 {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys877 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [6]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			yyq886[1] = x.Path != ""
			yyq886[2] = x.User != ""
			yyq886[3] = x.SecretFile != ""
			yyq886[4] = x.SecretRef != nil
			yyq886[5] = x.ReadOnly != false
			var yynn886 int
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(6)
			} else {
				yynn886 = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
				yynn886 = 0
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[1] {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[2] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[3] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq886[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[5] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq886[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym903 := z.DecBinary()
	_ = yym903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct904 := r.ContainerType()
		if yyct904 == codecSelferValueTypeMap1234 {
			yyl904 := r.ReadMapStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl904, d)
			}
		} else if yyct904 == codecSelferValueTypeArray1234 {
			yyl904 := r.ReadArrayStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys905Slc
	var yyhl905 bool = l >= 0
	for yyj905 := 0; ; yyj905++ {
		if yyhl905 {
			if yyj905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys905Slc = r.DecodeBytes(yys905Slc, true, true)
		yys905 := string(yys905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys905 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv906 := &x.Monitors
				yym907 := z.DecBinary()
				_ = yym907
				if false {
				} else {
					z.F.DecSliceStringX(yyv906, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys905)
		} // end switch yys905
	} // end for yyj905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj913 int
	var yyb913 bool
	var yyhl913 bool = l >= 0
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv914 := &x.Monitors
		yym915 := z.DecBinary()
		_ = yym915
		if false {
		} else {
			z.F.DecSliceStringX(yyv914, false, d)
		}
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj913++
		if yyhl913 {
			yyb913 = yyj913 > l
		} else {
			yyb913 = r.CheckBreak()
		}
		if yyb913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym921 := z.EncBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep922 := !z.EncBinary()
			yy2arr922 := z.EncBasicHandle().StructToArray
			var yyq922 [1]bool
			_, _, _ = yysep922, yyq922, yy2arr922
			const yyr922 bool = false
			var yynn922 int
			if yyr922 || yy2arr922 {
				r.EncodeArrayStart(1)
			} else {
				yynn922 = 1
				for _, b := range yyq922 {
					if b {
						yynn922++
					}
				}
				r.EncodeMapStart(yynn922)
				yynn922 = 0
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym924 := z.EncBinary()
				_ = yym924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym925 := z.EncBinary()
				_ = yym925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym926 := z.DecBinary()
	_ = yym926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct927 := r.ContainerType()
		if yyct927 == codecSelferValueTypeMap1234 {
			yyl927 := r.ReadMapStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl927, d)
			}
		} else if yyct927 == codecSelferValueTypeArray1234 {
			yyl927 := r.ReadArrayStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys928Slc
	var yyhl928 bool = l >= 0
	for yyj928 := 0; ; yyj928++ {
		if yyhl928 {
			if yyj928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys928Slc = r.DecodeBytes(yys928Slc, true, true)
		yys928 := string(yys928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys928 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys928)
		} // end switch yys928
	} // end for yyj928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym932 := z.EncBinary()
		_ = yym932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep933 := !z.EncBinary()
			yy2arr933 := z.EncBasicHandle().StructToArray
			var yyq933 [1]bool
			_, _, _ = yysep933, yyq933, yy2arr933
			const yyr933 bool = false
			yyq933[0] = len(x.Items) != 0
			var yynn933 int
			if yyr933 || yy2arr933 {
				r.EncodeArrayStart(1)
			} else {
				yynn933 = 0
				for _, b := range yyq933 {
					if b {
						yynn933++
					}
				}
				r.EncodeMapStart(yynn933)
				yynn933 = 0
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq933[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym935 := z.EncBinary()
						_ = yym935
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym936 := z.EncBinary()
						_ = yym936
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym937 := z.DecBinary()
	_ = yym937
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct938 := r.ContainerType()
		if yyct938 == codecSelferValueTypeMap1234 {
			yyl938 := r.ReadMapStart()
			if yyl938 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl938, d)
			}
		} else if yyct938 == codecSelferValueTypeArray1234 {
			yyl938 := r.ReadArrayStart()
			if yyl938 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl938, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys939Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys939Slc
	var yyhl939 bool = l >= 0
	for yyj939 := 0; ; yyj939++ {
		if yyhl939 {
			if yyj939 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys939Slc = r.DecodeBytes(yys939Slc, true, true)
		yys939 := string(yys939Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys939 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv940 := &x.Items
				yym941 := z.DecBinary()
				_ = yym941
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys939)
		} // end switch yys939
	} // end for yyj939
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj942 int
	var yyb942 bool
	var yyhl942 bool = l >= 0
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv943 := &x.Items
		yym944 := z.DecBinary()
		_ = yym944
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv943), d)
		}
	}
	for {
		yyj942++
		if yyhl942 {
			yyb942 = yyj942 > l
		} else {
			yyb942 = r.CheckBreak()
		}
		if yyb942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym945 := z.EncBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep946 := !z.EncBinary()
			yy2arr946 := z.EncBasicHandle().StructToArray
			var yyq946 [3]bool
			_, _, _ = yysep946, yyq946, yy2arr946
			const yyr946 bool = false
			yyq946[1] = x.FieldRef != nil
			yyq946[2] = x.ResourceFieldRef != nil
			var yynn946 int
			if yyr946 || yy2arr946 {
				r.EncodeArrayStart(3)
			} else {
				yynn946 = 1
				for _, b := range yyq946 {
					if b {
						yynn946++
					}
				}
				r.EncodeMapStart(yynn946)
				yynn946 = 0
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym949 := z.EncBinary()
				_ = yym949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym952 := z.DecBinary()
	_ = yym952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct953 := r.ContainerType()
		if yyct953 == codecSelferValueTypeMap1234 {
			yyl953 := r.ReadMapStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl953, d)
			}
		} else if yyct953 == codecSelferValueTypeArray1234 {
			yyl953 := r.ReadArrayStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys954Slc
	var yyhl954 bool = l >= 0
	for yyj954 := 0; ; yyj954++ {
		if yyhl954 {
			if yyj954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys954Slc = r.DecodeBytes(yys954Slc, true, true)
		yys954 := string(yys954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys954 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys954)
		} // end switch yys954
	} // end for yyj954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj958 int
	var yyb958 bool
	var yyhl958 bool = l >= 0
	yyj958++
	if yyhl958 {
		yyb958 = yyj958 > l
	} else {
		yyb958 = r.CheckBreak()
	}
	if yyb958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj958++
	if yyhl958 {
		yyb958 = yyj958 > l
	} else {
		yyb958 = r.CheckBreak()
	}
	if yyb958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj958++
	if yyhl958 {
		yyb958 = yyj958 > l
	} else {
		yyb958 = r.CheckBreak()
	}
	if yyb958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj958++
		if yyhl958 {
			yyb958 = yyj958 > l
		} else {
			yyb958 = r.CheckBreak()
		}
		if yyb958 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj958-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym962 := z.EncBinary()
		_ = yym962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep963 := !z.EncBinary()
			yy2arr963 := z.EncBasicHandle().StructToArray
			var yyq963 [3]bool
			_, _, _ = yysep963, yyq963, yy2arr963
			const yyr963 bool = false
			yyq963[2] = x.ReadOnly != false
			var yynn963 int
			if yyr963 || yy2arr963 {
				r.EncodeArrayStart(3)
			} else {
				yynn963 = 2
				for _, b := range yyq963 {
					if b {
						yynn963++
					}
				}
				r.EncodeMapStart(yynn963)
				yynn963 = 0
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym965 := z.EncBinary()
				_ = yym965
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym966 := z.EncBinary()
				_ = yym966
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym968 := z.EncBinary()
				_ = yym968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq963[2] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct974 := r.ContainerType()
		if yyct974 == codecSelferValueTypeMap1234 {
			yyl974 := r.ReadMapStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl974, d)
			}
		} else if yyct974 == codecSelferValueTypeArray1234 {
			yyl974 := r.ReadArrayStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys975Slc
	var yyhl975 bool = l >= 0
	for yyj975 := 0; ; yyj975++ {
		if yyhl975 {
			if yyj975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys975Slc = r.DecodeBytes(yys975Slc, true, true)
		yys975 := string(yys975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys975 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys975)
		} // end switch yys975
	} // end for yyj975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyq984 [2]bool
			_, _, _ = yysep984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[1] = x.FSType != ""
			var yynn984 int
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(2)
			} else {
				yynn984 = 1
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
				yynn984 = 0
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym986 := z.EncBinary()
				_ = yym986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[1] {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct992 := r.ContainerType()
		if yyct992 == codecSelferValueTypeMap1234 {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if yyct992 == codecSelferValueTypeArray1234 {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys993 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj996 int
	var yyb996 bool
	var yyhl996 bool = l >= 0
	yyj996++
	if yyhl996 {
		yyb996 = yyj996 > l
	} else {
		yyb996 = r.CheckBreak()
	}
	if yyb996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj996++
	if yyhl996 {
		yyb996 = yyj996 > l
	} else {
		yyb996 = r.CheckBreak()
	}
	if yyb996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj996++
		if yyhl996 {
			yyb996 = yyj996 > l
		} else {
			yyb996 = r.CheckBreak()
		}
		if yyb996 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj996-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym999 := z.EncBinary()
		_ = yym999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1000 := !z.EncBinary()
			yy2arr1000 := z.EncBasicHandle().StructToArray
			var yyq1000 [2]bool
			_, _, _ = yysep1000, yyq1000, yy2arr1000
			const yyr1000 bool = false
			yyq1000[1] = len(x.Items) != 0
			var yynn1000 int
			if yyr1000 || yy2arr1000 {
				r.EncodeArrayStart(2)
			} else {
				yynn1000 = 1
				for _, b := range yyq1000 {
					if b {
						yynn1000++
					}
				}
				r.EncodeMapStart(yynn1000)
				yynn1000 = 0
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1002 := z.EncBinary()
				_ = yym1002
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1003 := z.EncBinary()
				_ = yym1003
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1000[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1005 := z.EncBinary()
						_ = yym1005
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1000[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1006 := z.EncBinary()
						_ = yym1006
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1007 := z.DecBinary()
	_ = yym1007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1008 := r.ContainerType()
		if yyct1008 == codecSelferValueTypeMap1234 {
			yyl1008 := r.ReadMapStart()
			if yyl1008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1008, d)
			}
		} else if yyct1008 == codecSelferValueTypeArray1234 {
			yyl1008 := r.ReadArrayStart()
			if yyl1008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1009Slc
	var yyhl1009 bool = l >= 0
	for yyj1009 := 0; ; yyj1009++ {
		if yyhl1009 {
			if yyj1009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1009Slc = r.DecodeBytes(yys1009Slc, true, true)
		yys1009 := string(yys1009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1009 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1011 := &x.Items
				yym1012 := z.DecBinary()
				_ = yym1012
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1011), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1009)
		} // end switch yys1009
	} // end for yyj1009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1013 int
	var yyb1013 bool
	var yyhl1013 bool = l >= 0
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1015 := &x.Items
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1015), d)
		}
	}
	for {
		yyj1013++
		if yyhl1013 {
			yyb1013 = yyj1013 > l
		} else {
			yyb1013 = r.CheckBreak()
		}
		if yyb1013 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1013-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			var yynn1018 int
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				yynn1018 = 2
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
				yynn1018 = 0
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1023 := z.EncBinary()
				_ = yym1023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1026 := r.ContainerType()
		if yyct1026 == codecSelferValueTypeMap1234 {
			yyl1026 := r.ReadMapStart()
			if yyl1026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1026, d)
			}
		} else if yyct1026 == codecSelferValueTypeArray1234 {
			yyl1026 := r.ReadArrayStart()
			if yyl1026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1027Slc
	var yyhl1027 bool = l >= 0
	for yyj1027 := 0; ; yyj1027++ {
		if yyhl1027 {
			if yyj1027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1027Slc = r.DecodeBytes(yys1027Slc, true, true)
		yys1027 := string(yys1027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1027 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1027)
		} // end switch yys1027
	} // end for yyj1027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1030 int
	var yyb1030 bool
	var yyhl1030 bool = l >= 0
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1030++
		if yyhl1030 {
			yyb1030 = yyj1030 > l
		} else {
			yyb1030 = r.CheckBreak()
		}
		if yyb1030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1033 := z.EncBinary()
		_ = yym1033
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1034 := !z.EncBinary()
			yy2arr1034 := z.EncBasicHandle().StructToArray
			var yyq1034 [5]bool
			_, _, _ = yysep1034, yyq1034, yy2arr1034
			const yyr1034 bool = false
			yyq1034[0] = x.Name != ""
			yyq1034[1] = x.HostPort != 0
			yyq1034[3] = x.Protocol != ""
			yyq1034[4] = x.HostIP != ""
			var yynn1034 int
			if yyr1034 || yy2arr1034 {
				r.EncodeArrayStart(5)
			} else {
				yynn1034 = 1
				for _, b := range yyq1034 {
					if b {
						yynn1034++
					}
				}
				r.EncodeMapStart(yynn1034)
				yynn1034 = 0
			}
			if yyr1034 || yy2arr1034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1034[0] {
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1034[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1037 := z.EncBinary()
					_ = yym1037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1034 || yy2arr1034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1034[1] {
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1034[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1040 := z.EncBinary()
					_ = yym1040
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1034 || yy2arr1034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1034 || yy2arr1034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1034[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1034[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1034 || yy2arr1034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1034[4] {
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1034[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1047 := z.EncBinary()
					_ = yym1047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1034 || yy2arr1034 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1049 := r.ContainerType()
		if yyct1049 == codecSelferValueTypeMap1234 {
			yyl1049 := r.ReadMapStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1049, d)
			}
		} else if yyct1049 == codecSelferValueTypeArray1234 {
			yyl1049 := r.ReadArrayStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1050Slc
	var yyhl1050 bool = l >= 0
	for yyj1050 := 0; ; yyj1050++ {
		if yyhl1050 {
			if yyj1050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1050Slc = r.DecodeBytes(yys1050Slc, true, true)
		yys1050 := string(yys1050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1050 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1050)
		} // end switch yys1050
	} // end for yyj1050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1056 int
	var yyb1056 bool
	var yyhl1056 bool = l >= 0
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1056++
		if yyhl1056 {
			yyb1056 = yyj1056 > l
		} else {
			yyb1056 = r.CheckBreak()
		}
		if yyb1056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1062 := z.EncBinary()
		_ = yym1062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1063 := !z.EncBinary()
			yy2arr1063 := z.EncBasicHandle().StructToArray
			var yyq1063 [4]bool
			_, _, _ = yysep1063, yyq1063, yy2arr1063
			const yyr1063 bool = false
			yyq1063[1] = x.ReadOnly != false
			yyq1063[3] = x.SubPath != ""
			var yynn1063 int
			if yyr1063 || yy2arr1063 {
				r.EncodeArrayStart(4)
			} else {
				yynn1063 = 2
				for _, b := range yyq1063 {
					if b {
						yynn1063++
					}
				}
				r.EncodeMapStart(yynn1063)
				yynn1063 = 0
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1066 := z.EncBinary()
				_ = yym1066
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1063[1] {
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1071 := z.EncBinary()
				_ = yym1071
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1063[3] {
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1063[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1063 || yy2arr1063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1076 := z.DecBinary()
	_ = yym1076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1077 := r.ContainerType()
		if yyct1077 == codecSelferValueTypeMap1234 {
			yyl1077 := r.ReadMapStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1077, d)
			}
		} else if yyct1077 == codecSelferValueTypeArray1234 {
			yyl1077 := r.ReadArrayStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1078Slc
	var yyhl1078 bool = l >= 0
	for yyj1078 := 0; ; yyj1078++ {
		if yyhl1078 {
			if yyj1078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1078Slc = r.DecodeBytes(yys1078Slc, true, true)
		yys1078 := string(yys1078Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1078 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1078)
		} // end switch yys1078
	} // end for yyj1078
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1083 int
	var yyb1083 bool
	var yyhl1083 bool = l >= 0
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1083++
		if yyhl1083 {
			yyb1083 = yyj1083 > l
		} else {
			yyb1083 = r.CheckBreak()
		}
		if yyb1083 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1083-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [3]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[1] = x.Value != ""
			yyq1089[2] = x.ValueFrom != nil
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(3)
			} else {
				yynn1089 = 1
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1091 := z.EncBinary()
				_ = yym1091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1092 := z.EncBinary()
				_ = yym1092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[1] {
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1097 := z.DecBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1098 := r.ContainerType()
		if yyct1098 == codecSelferValueTypeMap1234 {
			yyl1098 := r.ReadMapStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1098, d)
			}
		} else if yyct1098 == codecSelferValueTypeArray1234 {
			yyl1098 := r.ReadArrayStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1099Slc
	var yyhl1099 bool = l >= 0
	for yyj1099 := 0; ; yyj1099++ {
		if yyhl1099 {
			if yyj1099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1099Slc = r.DecodeBytes(yys1099Slc, true, true)
		yys1099 := string(yys1099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1099 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1099)
		} // end switch yys1099
	} // end for yyj1099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1103 int
	var yyb1103 bool
	var yyhl1103 bool = l >= 0
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1103++
		if yyhl1103 {
			yyb1103 = yyj1103 > l
		} else {
			yyb1103 = r.CheckBreak()
		}
		if yyb1103 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1103-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1107 := z.EncBinary()
		_ = yym1107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1108 := !z.EncBinary()
			yy2arr1108 := z.EncBasicHandle().StructToArray
			var yyq1108 [4]bool
			_, _, _ = yysep1108, yyq1108, yy2arr1108
			const yyr1108 bool = false
			yyq1108[0] = x.FieldRef != nil
			yyq1108[1] = x.ResourceFieldRef != nil
			yyq1108[2] = x.ConfigMapKeyRef != nil
			yyq1108[3] = x.SecretKeyRef != nil
			var yynn1108 int
			if yyr1108 || yy2arr1108 {
				r.EncodeArrayStart(4)
			} else {
				yynn1108 = 0
				for _, b := range yyq1108 {
					if b {
						yynn1108++
					}
				}
				r.EncodeMapStart(yynn1108)
				yynn1108 = 0
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1113 := z.DecBinary()
	_ = yym1113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1114 := r.ContainerType()
		if yyct1114 == codecSelferValueTypeMap1234 {
			yyl1114 := r.ReadMapStart()
			if yyl1114 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1114, d)
			}
		} else if yyct1114 == codecSelferValueTypeArray1234 {
			yyl1114 := r.ReadArrayStart()
			if yyl1114 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1115Slc
	var yyhl1115 bool = l >= 0
	for yyj1115 := 0; ; yyj1115++ {
		if yyhl1115 {
			if yyj1115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1115Slc = r.DecodeBytes(yys1115Slc, true, true)
		yys1115 := string(yys1115Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1115 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1115)
		} // end switch yys1115
	} // end for yyj1115
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1120 int
	var yyb1120 bool
	var yyhl1120 bool = l >= 0
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1120++
		if yyhl1120 {
			yyb1120 = yyj1120 > l
		} else {
			yyb1120 = r.CheckBreak()
		}
		if yyb1120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [2]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			var yynn1126 int
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(2)
			} else {
				yynn1126 = 2
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
				yynn1126 = 0
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1128 := z.EncBinary()
				_ = yym1128
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1129 := z.EncBinary()
				_ = yym1129
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1131 := z.EncBinary()
				_ = yym1131
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1132 := z.EncBinary()
				_ = yym1132
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1133 := z.DecBinary()
	_ = yym1133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1134 := r.ContainerType()
		if yyct1134 == codecSelferValueTypeMap1234 {
			yyl1134 := r.ReadMapStart()
			if yyl1134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1134, d)
			}
		} else if yyct1134 == codecSelferValueTypeArray1234 {
			yyl1134 := r.ReadArrayStart()
			if yyl1134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1135Slc
	var yyhl1135 bool = l >= 0
	for yyj1135 := 0; ; yyj1135++ {
		if yyhl1135 {
			if yyj1135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1135Slc = r.DecodeBytes(yys1135Slc, true, true)
		yys1135 := string(yys1135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1135 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1135)
		} // end switch yys1135
	} // end for yyj1135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1138 int
	var yyb1138 bool
	var yyhl1138 bool = l >= 0
	yyj1138++
	if yyhl1138 {
		yyb1138 = yyj1138 > l
	} else {
		yyb1138 = r.CheckBreak()
	}
	if yyb1138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1138++
	if yyhl1138 {
		yyb1138 = yyj1138 > l
	} else {
		yyb1138 = r.CheckBreak()
	}
	if yyb1138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1138++
		if yyhl1138 {
			yyb1138 = yyj1138 > l
		} else {
			yyb1138 = r.CheckBreak()
		}
		if yyb1138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1141 := z.EncBinary()
		_ = yym1141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1142 := !z.EncBinary()
			yy2arr1142 := z.EncBasicHandle().StructToArray
			var yyq1142 [3]bool
			_, _, _ = yysep1142, yyq1142, yy2arr1142
			const yyr1142 bool = false
			yyq1142[0] = x.ContainerName != ""
			yyq1142[2] = true
			var yynn1142 int
			if yyr1142 || yy2arr1142 {
				r.EncodeArrayStart(3)
			} else {
				yynn1142 = 1
				for _, b := range yyq1142 {
					if b {
						yynn1142++
					}
				}
				r.EncodeMapStart(yynn1142)
				yynn1142 = 0
			}
			if yyr1142 || yy2arr1142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1142[0] {
					yym1144 := z.EncBinary()
					_ = yym1144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1142[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1145 := z.EncBinary()
					_ = yym1145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1142 || yy2arr1142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1147 := z.EncBinary()
				_ = yym1147
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1148 := z.EncBinary()
				_ = yym1148
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1142 || yy2arr1142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1142[2] {
					yy1150 := &x.Divisor
					yym1151 := z.EncBinary()
					_ = yym1151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1150) {
					} else if !yym1151 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1150)
					} else {
						z.EncFallback(yy1150)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1142[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1152 := &x.Divisor
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1152) {
					} else if !yym1153 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1152)
					} else {
						z.EncFallback(yy1152)
					}
				}
			}
			if yyr1142 || yy2arr1142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1154 := z.DecBinary()
	_ = yym1154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1155 := r.ContainerType()
		if yyct1155 == codecSelferValueTypeMap1234 {
			yyl1155 := r.ReadMapStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1155, d)
			}
		} else if yyct1155 == codecSelferValueTypeArray1234 {
			yyl1155 := r.ReadArrayStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1156Slc
	var yyhl1156 bool = l >= 0
	for yyj1156 := 0; ; yyj1156++ {
		if yyhl1156 {
			if yyj1156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1156Slc = r.DecodeBytes(yys1156Slc, true, true)
		yys1156 := string(yys1156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1156 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1159 := &x.Divisor
				yym1160 := z.DecBinary()
				_ = yym1160
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1159) {
				} else if !yym1160 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1159)
				} else {
					z.DecFallback(yyv1159, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1156)
		} // end switch yys1156
	} // end for yyj1156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1164 := &x.Divisor
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1164) {
		} else if !yym1165 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1164)
		} else {
			z.DecFallback(yyv1164, false)
		}
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1166 := z.EncBinary()
		_ = yym1166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1167 := !z.EncBinary()
			yy2arr1167 := z.EncBasicHandle().StructToArray
			var yyq1167 [2]bool
			_, _, _ = yysep1167, yyq1167, yy2arr1167
			const yyr1167 bool = false
			var yynn1167 int
			if yyr1167 || yy2arr1167 {
				r.EncodeArrayStart(2)
			} else {
				yynn1167 = 2
				for _, b := range yyq1167 {
					if b {
						yynn1167++
					}
				}
				r.EncodeMapStart(yynn1167)
				yynn1167 = 0
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1172 := z.EncBinary()
				_ = yym1172
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1173 := z.EncBinary()
				_ = yym1173
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1174 := z.DecBinary()
	_ = yym1174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1175 := r.ContainerType()
		if yyct1175 == codecSelferValueTypeMap1234 {
			yyl1175 := r.ReadMapStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1175, d)
			}
		} else if yyct1175 == codecSelferValueTypeArray1234 {
			yyl1175 := r.ReadArrayStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1176Slc
	var yyhl1176 bool = l >= 0
	for yyj1176 := 0; ; yyj1176++ {
		if yyhl1176 {
			if yyj1176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1176Slc = r.DecodeBytes(yys1176Slc, true, true)
		yys1176 := string(yys1176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1176 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1176)
		} // end switch yys1176
	} // end for yyj1176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1179 int
	var yyb1179 bool
	var yyhl1179 bool = l >= 0
	yyj1179++
	if yyhl1179 {
		yyb1179 = yyj1179 > l
	} else {
		yyb1179 = r.CheckBreak()
	}
	if yyb1179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1179++
	if yyhl1179 {
		yyb1179 = yyj1179 > l
	} else {
		yyb1179 = r.CheckBreak()
	}
	if yyb1179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1179++
		if yyhl1179 {
			yyb1179 = yyj1179 > l
		} else {
			yyb1179 = r.CheckBreak()
		}
		if yyb1179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1182 := z.EncBinary()
		_ = yym1182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1183 := !z.EncBinary()
			yy2arr1183 := z.EncBasicHandle().StructToArray
			var yyq1183 [2]bool
			_, _, _ = yysep1183, yyq1183, yy2arr1183
			const yyr1183 bool = false
			var yynn1183 int
			if yyr1183 || yy2arr1183 {
				r.EncodeArrayStart(2)
			} else {
				yynn1183 = 2
				for _, b := range yyq1183 {
					if b {
						yynn1183++
					}
				}
				r.EncodeMapStart(yynn1183)
				yynn1183 = 0
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1186 := z.EncBinary()
				_ = yym1186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1183 || yy2arr1183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1195 int
	var yyb1195 bool
	var yyhl1195 bool = l >= 0
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1195++
		if yyhl1195 {
			yyb1195 = yyj1195 > l
		} else {
			yyb1195 = r.CheckBreak()
		}
		if yyb1195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1198 := z.EncBinary()
		_ = yym1198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1199 := !z.EncBinary()
			yy2arr1199 := z.EncBasicHandle().StructToArray
			var yyq1199 [2]bool
			_, _, _ = yysep1199, yyq1199, yy2arr1199
			const yyr1199 bool = false
			var yynn1199 int
			if yyr1199 || yy2arr1199 {
				r.EncodeArrayStart(2)
			} else {
				yynn1199 = 2
				for _, b := range yyq1199 {
					if b {
						yynn1199++
					}
				}
				r.EncodeMapStart(yynn1199)
				yynn1199 = 0
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1201 := z.EncBinary()
				_ = yym1201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1202 := z.EncBinary()
				_ = yym1202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1204 := z.EncBinary()
				_ = yym1204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1205 := z.EncBinary()
				_ = yym1205
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [5]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[0] = x.Path != ""
			yyq1215[1] = true
			yyq1215[2] = x.Host != ""
			yyq1215[3] = x.Scheme != ""
			yyq1215[4] = len(x.HTTPHeaders) != 0
			var yynn1215 int
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(5)
			} else {
				yynn1215 = 0
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
				yynn1215 = 0
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[0] {
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[1] {
					yy1220 := &x.Port
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1220) {
					} else if !yym1221 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1220)
					} else {
						z.EncFallback(yy1220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1222 := &x.Port
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1222) {
					} else if !yym1223 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1222)
					} else {
						z.EncFallback(yy1222)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[2] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1215[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1229 := z.EncBinary()
						_ = yym1229
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1230 := z.EncBinary()
						_ = yym1230
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1231 := z.DecBinary()
	_ = yym1231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1232 := r.ContainerType()
		if yyct1232 == codecSelferValueTypeMap1234 {
			yyl1232 := r.ReadMapStart()
			if yyl1232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1232, d)
			}
		} else if yyct1232 == codecSelferValueTypeArray1234 {
			yyl1232 := r.ReadArrayStart()
			if yyl1232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1233Slc
	var yyhl1233 bool = l >= 0
	for yyj1233 := 0; ; yyj1233++ {
		if yyhl1233 {
			if yyj1233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1233Slc = r.DecodeBytes(yys1233Slc, true, true)
		yys1233 := string(yys1233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1233 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1235 := &x.Port
				yym1236 := z.DecBinary()
				_ = yym1236
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1235) {
				} else if !yym1236 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1235)
				} else {
					z.DecFallback(yyv1235, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1239 := &x.HTTPHeaders
				yym1240 := z.DecBinary()
				_ = yym1240
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1239), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1233)
		} // end switch yys1233
	} // end for yyj1233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1243 := &x.Port
		yym1244 := z.DecBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1243) {
		} else if !yym1244 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1243)
		} else {
			z.DecFallback(yyv1243, false)
		}
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1247 := &x.HTTPHeaders
		yym1248 := z.DecBinary()
		_ = yym1248
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1247), d)
		}
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1249 := z.EncBinary()
	_ = yym1249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1250 := z.DecBinary()
	_ = yym1250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1251 := z.EncBinary()
		_ = yym1251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1252 := !z.EncBinary()
			yy2arr1252 := z.EncBasicHandle().StructToArray
			var yyq1252 [1]bool
			_, _, _ = yysep1252, yyq1252, yy2arr1252
			const yyr1252 bool = false
			yyq1252[0] = true
			var yynn1252 int
			if yyr1252 || yy2arr1252 {
				r.EncodeArrayStart(1)
			} else {
				yynn1252 = 0
				for _, b := range yyq1252 {
					if b {
						yynn1252++
					}
				}
				r.EncodeMapStart(yynn1252)
				yynn1252 = 0
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1252[0] {
					yy1254 := &x.Port
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1254) {
					} else if !yym1255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1254)
					} else {
						z.EncFallback(yy1254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1256 := &x.Port
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1256) {
					} else if !yym1257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1256)
					} else {
						z.EncFallback(yy1256)
					}
				}
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1258 := z.DecBinary()
	_ = yym1258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1259 := r.ContainerType()
		if yyct1259 == codecSelferValueTypeMap1234 {
			yyl1259 := r.ReadMapStart()
			if yyl1259 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1259, d)
			}
		} else if yyct1259 == codecSelferValueTypeArray1234 {
			yyl1259 := r.ReadArrayStart()
			if yyl1259 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1260Slc
	var yyhl1260 bool = l >= 0
	for yyj1260 := 0; ; yyj1260++ {
		if yyhl1260 {
			if yyj1260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1260Slc = r.DecodeBytes(yys1260Slc, true, true)
		yys1260 := string(yys1260Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1260 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1261 := &x.Port
				yym1262 := z.DecBinary()
				_ = yym1262
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1261) {
				} else if !yym1262 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1261)
				} else {
					z.DecFallback(yyv1261, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1260)
		} // end switch yys1260
	} // end for yyj1260
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1263 int
	var yyb1263 bool
	var yyhl1263 bool = l >= 0
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1264 := &x.Port
		yym1265 := z.DecBinary()
		_ = yym1265
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1264) {
		} else if !yym1265 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1264)
		} else {
			z.DecFallback(yyv1264, false)
		}
	}
	for {
		yyj1263++
		if yyhl1263 {
			yyb1263 = yyj1263 > l
		} else {
			yyb1263 = r.CheckBreak()
		}
		if yyb1263 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1263-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1266 := z.EncBinary()
		_ = yym1266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1267 := !z.EncBinary()
			yy2arr1267 := z.EncBasicHandle().StructToArray
			var yyq1267 [1]bool
			_, _, _ = yysep1267, yyq1267, yy2arr1267
			const yyr1267 bool = false
			yyq1267[0] = len(x.Command) != 0
			var yynn1267 int
			if yyr1267 || yy2arr1267 {
				r.EncodeArrayStart(1)
			} else {
				yynn1267 = 0
				for _, b := range yyq1267 {
					if b {
						yynn1267++
					}
				}
				r.EncodeMapStart(yynn1267)
				yynn1267 = 0
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1267[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1269 := z.EncBinary()
						_ = yym1269
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1267[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1270 := z.EncBinary()
						_ = yym1270
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1271 := z.DecBinary()
	_ = yym1271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1272 := r.ContainerType()
		if yyct1272 == codecSelferValueTypeMap1234 {
			yyl1272 := r.ReadMapStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1272, d)
			}
		} else if yyct1272 == codecSelferValueTypeArray1234 {
			yyl1272 := r.ReadArrayStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1273Slc
	var yyhl1273 bool = l >= 0
	for yyj1273 := 0; ; yyj1273++ {
		if yyhl1273 {
			if yyj1273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1273Slc = r.DecodeBytes(yys1273Slc, true, true)
		yys1273 := string(yys1273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1273 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1274 := &x.Command
				yym1275 := z.DecBinary()
				_ = yym1275
				if false {
				} else {
					z.F.DecSliceStringX(yyv1274, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1273)
		} // end switch yys1273
	} // end for yyj1273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1276 int
	var yyb1276 bool
	var yyhl1276 bool = l >= 0
	yyj1276++
	if yyhl1276 {
		yyb1276 = yyj1276 > l
	} else {
		yyb1276 = r.CheckBreak()
	}
	if yyb1276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1277 := &x.Command
		yym1278 := z.DecBinary()
		_ = yym1278
		if false {
		} else {
			z.F.DecSliceStringX(yyv1277, false, d)
		}
	}
	for {
		yyj1276++
		if yyhl1276 {
			yyb1276 = yyj1276 > l
		} else {
			yyb1276 = r.CheckBreak()
		}
		if yyb1276 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1276-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1279 := z.EncBinary()
		_ = yym1279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1280 := !z.EncBinary()
			yy2arr1280 := z.EncBasicHandle().StructToArray
			var yyq1280 [8]bool
			_, _, _ = yysep1280, yyq1280, yy2arr1280
			const yyr1280 bool = false
			yyq1280[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1280[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1280[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1280[3] = x.InitialDelaySeconds != 0
			yyq1280[4] = x.TimeoutSeconds != 0
			yyq1280[5] = x.PeriodSeconds != 0
			yyq1280[6] = x.SuccessThreshold != 0
			yyq1280[7] = x.FailureThreshold != 0
			var yynn1280 int
			if yyr1280 || yy2arr1280 {
				r.EncodeArrayStart(8)
			} else {
				yynn1280 = 0
				for _, b := range yyq1280 {
					if b {
						yynn1280++
					}
				}
				r.EncodeMapStart(yynn1280)
				yynn1280 = 0
			}
			var yyn1281 bool
			if x.Handler.Exec == nil {
				yyn1281 = true
				goto LABEL1281
			}
		LABEL1281:
			if yyr1280 || yy2arr1280 {
				if yyn1281 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1280[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1281 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1282 bool
			if x.Handler.HTTPGet == nil {
				yyn1282 = true
				goto LABEL1282
			}
		LABEL1282:
			if yyr1280 || yy2arr1280 {
				if yyn1282 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1280[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1282 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1283 bool
			if x.Handler.TCPSocket == nil {
				yyn1283 = true
				goto LABEL1283
			}
		LABEL1283:
			if yyr1280 || yy2arr1280 {
				if yyn1283 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1280[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1283 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[3] {
					yym1285 := z.EncBinary()
					_ = yym1285
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1280[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1286 := z.EncBinary()
					_ = yym1286
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[4] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1280[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[5] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1280[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[6] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1280[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1280[7] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1280[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1280 || yy2arr1280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1299 := z.DecBinary()
	_ = yym1299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1300 := r.ContainerType()
		if yyct1300 == codecSelferValueTypeMap1234 {
			yyl1300 := r.ReadMapStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1300, d)
			}
		} else if yyct1300 == codecSelferValueTypeArray1234 {
			yyl1300 := r.ReadArrayStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1301Slc
	var yyhl1301 bool = l >= 0
	for yyj1301 := 0; ; yyj1301++ {
		if yyhl1301 {
			if yyj1301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1301Slc = r.DecodeBytes(yys1301Slc, true, true)
		yys1301 := string(yys1301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1301 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1301)
		} // end switch yys1301
	} // end for yyj1301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1319 := z.EncBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1320 := z.DecBinary()
	_ = yym1320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1321 := z.EncBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1322 := z.DecBinary()
	_ = yym1322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1323 := z.EncBinary()
		_ = yym1323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1324 := !z.EncBinary()
			yy2arr1324 := z.EncBasicHandle().StructToArray
			var yyq1324 [2]bool
			_, _, _ = yysep1324, yyq1324, yy2arr1324
			const yyr1324 bool = false
			yyq1324[0] = len(x.Add) != 0
			yyq1324[1] = len(x.Drop) != 0
			var yynn1324 int
			if yyr1324 || yy2arr1324 {
				r.EncodeArrayStart(2)
			} else {
				yynn1324 = 0
				for _, b := range yyq1324 {
					if b {
						yynn1324++
					}
				}
				r.EncodeMapStart(yynn1324)
				yynn1324 = 0
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1324[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1326 := z.EncBinary()
						_ = yym1326
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1327 := z.EncBinary()
						_ = yym1327
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1324[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1329 := z.EncBinary()
						_ = yym1329
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1330 := z.EncBinary()
						_ = yym1330
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1331 := z.DecBinary()
	_ = yym1331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1332 := r.ContainerType()
		if yyct1332 == codecSelferValueTypeMap1234 {
			yyl1332 := r.ReadMapStart()
			if yyl1332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1332, d)
			}
		} else if yyct1332 == codecSelferValueTypeArray1234 {
			yyl1332 := r.ReadArrayStart()
			if yyl1332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1333Slc
	var yyhl1333 bool = l >= 0
	for yyj1333 := 0; ; yyj1333++ {
		if yyhl1333 {
			if yyj1333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1333Slc = r.DecodeBytes(yys1333Slc, true, true)
		yys1333 := string(yys1333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1333 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1334 := &x.Add
				yym1335 := z.DecBinary()
				_ = yym1335
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1334), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1336 := &x.Drop
				yym1337 := z.DecBinary()
				_ = yym1337
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1336), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1333)
		} // end switch yys1333
	} // end for yyj1333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1338 int
	var yyb1338 bool
	var yyhl1338 bool = l >= 0
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1339 := &x.Add
		yym1340 := z.DecBinary()
		_ = yym1340
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1339), d)
		}
	}
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1341 := &x.Drop
		yym1342 := z.DecBinary()
		_ = yym1342
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1341), d)
		}
	}
	for {
		yyj1338++
		if yyhl1338 {
			yyb1338 = yyj1338 > l
		} else {
			yyb1338 = r.CheckBreak()
		}
		if yyb1338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [2]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = len(x.Limits) != 0
			yyq1344[1] = len(x.Requests) != 0
			var yynn1344 int
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(2)
			} else {
				yynn1344 = 0
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
				yynn1344 = 0
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1347 := z.DecBinary()
	_ = yym1347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1348 := r.ContainerType()
		if yyct1348 == codecSelferValueTypeMap1234 {
			yyl1348 := r.ReadMapStart()
			if yyl1348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1348, d)
			}
		} else if yyct1348 == codecSelferValueTypeArray1234 {
			yyl1348 := r.ReadArrayStart()
			if yyl1348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1349Slc
	var yyhl1349 bool = l >= 0
	for yyj1349 := 0; ; yyj1349++ {
		if yyhl1349 {
			if yyj1349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1349Slc = r.DecodeBytes(yys1349Slc, true, true)
		yys1349 := string(yys1349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1349 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1350 := &x.Limits
				yyv1350.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1351 := &x.Requests
				yyv1351.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1349)
		} // end switch yys1349
	} // end for yyj1349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1352 int
	var yyb1352 bool
	var yyhl1352 bool = l >= 0
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1353 := &x.Limits
		yyv1353.CodecDecodeSelf(d)
	}
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1354 := &x.Requests
		yyv1354.CodecDecodeSelf(d)
	}
	for {
		yyj1352++
		if yyhl1352 {
			yyb1352 = yyj1352 > l
		} else {
			yyb1352 = r.CheckBreak()
		}
		if yyb1352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1355 := z.EncBinary()
		_ = yym1355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1356 := !z.EncBinary()
			yy2arr1356 := z.EncBasicHandle().StructToArray
			var yyq1356 [18]bool
			_, _, _ = yysep1356, yyq1356, yy2arr1356
			const yyr1356 bool = false
			yyq1356[2] = len(x.Command) != 0
			yyq1356[3] = len(x.Args) != 0
			yyq1356[4] = x.WorkingDir != ""
			yyq1356[5] = len(x.Ports) != 0
			yyq1356[6] = len(x.Env) != 0
			yyq1356[7] = true
			yyq1356[8] = len(x.VolumeMounts) != 0
			yyq1356[9] = x.LivenessProbe != nil
			yyq1356[10] = x.ReadinessProbe != nil
			yyq1356[11] = x.Lifecycle != nil
			yyq1356[12] = x.TerminationMessagePath != ""
			yyq1356[14] = x.SecurityContext != nil
			yyq1356[15] = x.Stdin != false
			yyq1356[16] = x.StdinOnce != false
			yyq1356[17] = x.TTY != false
			var yynn1356 int
			if yyr1356 || yy2arr1356 {
				r.EncodeArrayStart(18)
			} else {
				yynn1356 = 3
				for _, b := range yyq1356 {
					if b {
						yynn1356++
					}
				}
				r.EncodeMapStart(yynn1356)
				yynn1356 = 0
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1359 := z.EncBinary()
				_ = yym1359
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1361 := z.EncBinary()
				_ = yym1361
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1362 := z.EncBinary()
				_ = yym1362
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1368 := z.EncBinary()
						_ = yym1368
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[4] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1356[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1373 := z.EncBinary()
						_ = yym1373
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1374 := z.EncBinary()
						_ = yym1374
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1376 := z.EncBinary()
						_ = yym1376
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1377 := z.EncBinary()
						_ = yym1377
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[7] {
					yy1379 := &x.Resources
					yy1379.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1380 := &x.Resources
					yy1380.CodecEncodeSelf(e)
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1382 := z.EncBinary()
						_ = yym1382
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1383 := z.EncBinary()
						_ = yym1383
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[12] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1356[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[15] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1356[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[16] {
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1356[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[17] {
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1356[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1401 := z.DecBinary()
	_ = yym1401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1402 := r.ContainerType()
		if yyct1402 == codecSelferValueTypeMap1234 {
			yyl1402 := r.ReadMapStart()
			if yyl1402 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1402, d)
			}
		} else if yyct1402 == codecSelferValueTypeArray1234 {
			yyl1402 := r.ReadArrayStart()
			if yyl1402 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1403Slc
	var yyhl1403 bool = l >= 0
	for yyj1403 := 0; ; yyj1403++ {
		if yyhl1403 {
			if yyj1403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1403Slc = r.DecodeBytes(yys1403Slc, true, true)
		yys1403 := string(yys1403Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1403 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1406 := &x.Command
				yym1407 := z.DecBinary()
				_ = yym1407
				if false {
				} else {
					z.F.DecSliceStringX(yyv1406, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1408 := &x.Args
				yym1409 := z.DecBinary()
				_ = yym1409
				if false {
				} else {
					z.F.DecSliceStringX(yyv1408, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1411 := &x.Ports
				yym1412 := z.DecBinary()
				_ = yym1412
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1411), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1413 := &x.Env
				yym1414 := z.DecBinary()
				_ = yym1414
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1413), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1415 := &x.Resources
				yyv1415.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1416 := &x.VolumeMounts
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1416), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1403)
		} // end switch yys1403
	} // end for yyj1403
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1427 int
	var yyb1427 bool
	var yyhl1427 bool = l >= 0
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1430 := &x.Command
		yym1431 := z.DecBinary()
		_ = yym1431
		if false {
		} else {
			z.F.DecSliceStringX(yyv1430, false, d)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1432 := &x.Args
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			z.F.DecSliceStringX(yyv1432, false, d)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1435 := &x.Ports
		yym1436 := z.DecBinary()
		_ = yym1436
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1435), d)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1437 := &x.Env
		yym1438 := z.DecBinary()
		_ = yym1438
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1437), d)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1439 := &x.Resources
		yyv1439.CodecDecodeSelf(d)
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1440 := &x.VolumeMounts
		yym1441 := z.DecBinary()
		_ = yym1441
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1440), d)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1427++
		if yyhl1427 {
			yyb1427 = yyj1427 > l
		} else {
			yyb1427 = r.CheckBreak()
		}
		if yyb1427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1451 := z.EncBinary()
		_ = yym1451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1452 := !z.EncBinary()
			yy2arr1452 := z.EncBasicHandle().StructToArray
			var yyq1452 [3]bool
			_, _, _ = yysep1452, yyq1452, yy2arr1452
			const yyr1452 bool = false
			yyq1452[0] = x.Exec != nil
			yyq1452[1] = x.HTTPGet != nil
			yyq1452[2] = x.TCPSocket != nil
			var yynn1452 int
			if yyr1452 || yy2arr1452 {
				r.EncodeArrayStart(3)
			} else {
				yynn1452 = 0
				for _, b := range yyq1452 {
					if b {
						yynn1452++
					}
				}
				r.EncodeMapStart(yynn1452)
				yynn1452 = 0
			}
			if yyr1452 || yy2arr1452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1452[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1452 || yy2arr1452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1452[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1452 || yy2arr1452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1452[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1452 || yy2arr1452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1456 := z.DecBinary()
	_ = yym1456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1457 := r.ContainerType()
		if yyct1457 == codecSelferValueTypeMap1234 {
			yyl1457 := r.ReadMapStart()
			if yyl1457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1457, d)
			}
		} else if yyct1457 == codecSelferValueTypeArray1234 {
			yyl1457 := r.ReadArrayStart()
			if yyl1457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1458Slc
	var yyhl1458 bool = l >= 0
	for yyj1458 := 0; ; yyj1458++ {
		if yyhl1458 {
			if yyj1458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1458Slc = r.DecodeBytes(yys1458Slc, true, true)
		yys1458 := string(yys1458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1458 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1458)
		} // end switch yys1458
	} // end for yyj1458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1462 int
	var yyb1462 bool
	var yyhl1462 bool = l >= 0
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1462++
		if yyhl1462 {
			yyb1462 = yyj1462 > l
		} else {
			yyb1462 = r.CheckBreak()
		}
		if yyb1462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1466 := z.EncBinary()
		_ = yym1466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1467 := !z.EncBinary()
			yy2arr1467 := z.EncBasicHandle().StructToArray
			var yyq1467 [2]bool
			_, _, _ = yysep1467, yyq1467, yy2arr1467
			const yyr1467 bool = false
			yyq1467[0] = x.PostStart != nil
			yyq1467[1] = x.PreStop != nil
			var yynn1467 int
			if yyr1467 || yy2arr1467 {
				r.EncodeArrayStart(2)
			} else {
				yynn1467 = 0
				for _, b := range yyq1467 {
					if b {
						yynn1467++
					}
				}
				r.EncodeMapStart(yynn1467)
				yynn1467 = 0
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1470 := z.DecBinary()
	_ = yym1470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1471 := r.ContainerType()
		if yyct1471 == codecSelferValueTypeMap1234 {
			yyl1471 := r.ReadMapStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1471, d)
			}
		} else if yyct1471 == codecSelferValueTypeArray1234 {
			yyl1471 := r.ReadArrayStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1472Slc
	var yyhl1472 bool = l >= 0
	for yyj1472 := 0; ; yyj1472++ {
		if yyhl1472 {
			if yyj1472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1472Slc = r.DecodeBytes(yys1472Slc, true, true)
		yys1472 := string(yys1472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1472 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1472)
		} // end switch yys1472
	} // end for yyj1472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1475 int
	var yyb1475 bool
	var yyhl1475 bool = l >= 0
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1475++
		if yyhl1475 {
			yyb1475 = yyj1475 > l
		} else {
			yyb1475 = r.CheckBreak()
		}
		if yyb1475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1478 := z.EncBinary()
	_ = yym1478
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1479 := z.DecBinary()
	_ = yym1479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1480 := z.EncBinary()
		_ = yym1480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1481 := !z.EncBinary()
			yy2arr1481 := z.EncBasicHandle().StructToArray
			var yyq1481 [2]bool
			_, _, _ = yysep1481, yyq1481, yy2arr1481
			const yyr1481 bool = false
			yyq1481[0] = x.Reason != ""
			yyq1481[1] = x.Message != ""
			var yynn1481 int
			if yyr1481 || yy2arr1481 {
				r.EncodeArrayStart(2)
			} else {
				yynn1481 = 0
				for _, b := range yyq1481 {
					if b {
						yynn1481++
					}
				}
				r.EncodeMapStart(yynn1481)
				yynn1481 = 0
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1481[0] {
					yym1483 := z.EncBinary()
					_ = yym1483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1481[1] {
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1481[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1488 := z.DecBinary()
	_ = yym1488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1489 := r.ContainerType()
		if yyct1489 == codecSelferValueTypeMap1234 {
			yyl1489 := r.ReadMapStart()
			if yyl1489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1489, d)
			}
		} else if yyct1489 == codecSelferValueTypeArray1234 {
			yyl1489 := r.ReadArrayStart()
			if yyl1489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1490Slc
	var yyhl1490 bool = l >= 0
	for yyj1490 := 0; ; yyj1490++ {
		if yyhl1490 {
			if yyj1490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1490Slc = r.DecodeBytes(yys1490Slc, true, true)
		yys1490 := string(yys1490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1490 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1490)
		} // end switch yys1490
	} // end for yyj1490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1493 int
	var yyb1493 bool
	var yyhl1493 bool = l >= 0
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1493++
		if yyhl1493 {
			yyb1493 = yyj1493 > l
		} else {
			yyb1493 = r.CheckBreak()
		}
		if yyb1493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1496 := z.EncBinary()
		_ = yym1496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1497 := !z.EncBinary()
			yy2arr1497 := z.EncBasicHandle().StructToArray
			var yyq1497 [1]bool
			_, _, _ = yysep1497, yyq1497, yy2arr1497
			const yyr1497 bool = false
			yyq1497[0] = true
			var yynn1497 int
			if yyr1497 || yy2arr1497 {
				r.EncodeArrayStart(1)
			} else {
				yynn1497 = 0
				for _, b := range yyq1497 {
					if b {
						yynn1497++
					}
				}
				r.EncodeMapStart(yynn1497)
				yynn1497 = 0
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[0] {
					yy1499 := &x.StartedAt
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1499) {
					} else if yym1500 {
						z.EncBinaryMarshal(yy1499)
					} else if !yym1500 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1499)
					} else {
						z.EncFallback(yy1499)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1501 := &x.StartedAt
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1501) {
					} else if yym1502 {
						z.EncBinaryMarshal(yy1501)
					} else if !yym1502 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1501)
					} else {
						z.EncFallback(yy1501)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1503 := z.DecBinary()
	_ = yym1503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1504 := r.ContainerType()
		if yyct1504 == codecSelferValueTypeMap1234 {
			yyl1504 := r.ReadMapStart()
			if yyl1504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1504, d)
			}
		} else if yyct1504 == codecSelferValueTypeArray1234 {
			yyl1504 := r.ReadArrayStart()
			if yyl1504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1505Slc
	var yyhl1505 bool = l >= 0
	for yyj1505 := 0; ; yyj1505++ {
		if yyhl1505 {
			if yyj1505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1505Slc = r.DecodeBytes(yys1505Slc, true, true)
		yys1505 := string(yys1505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1505 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1506 := &x.StartedAt
				yym1507 := z.DecBinary()
				_ = yym1507
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1506) {
				} else if yym1507 {
					z.DecBinaryUnmarshal(yyv1506)
				} else if !yym1507 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1506)
				} else {
					z.DecFallback(yyv1506, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1505)
		} // end switch yys1505
	} // end for yyj1505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1508 int
	var yyb1508 bool
	var yyhl1508 bool = l >= 0
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1509 := &x.StartedAt
		yym1510 := z.DecBinary()
		_ = yym1510
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1509) {
		} else if yym1510 {
			z.DecBinaryUnmarshal(yyv1509)
		} else if !yym1510 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1509)
		} else {
			z.DecFallback(yyv1509, false)
		}
	}
	for {
		yyj1508++
		if yyhl1508 {
			yyb1508 = yyj1508 > l
		} else {
			yyb1508 = r.CheckBreak()
		}
		if yyb1508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1511 := z.EncBinary()
		_ = yym1511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1512 := !z.EncBinary()
			yy2arr1512 := z.EncBasicHandle().StructToArray
			var yyq1512 [7]bool
			_, _, _ = yysep1512, yyq1512, yy2arr1512
			const yyr1512 bool = false
			yyq1512[1] = x.Signal != 0
			yyq1512[2] = x.Reason != ""
			yyq1512[3] = x.Message != ""
			yyq1512[4] = true
			yyq1512[5] = true
			yyq1512[6] = x.ContainerID != ""
			var yynn1512 int
			if yyr1512 || yy2arr1512 {
				r.EncodeArrayStart(7)
			} else {
				yynn1512 = 1
				for _, b := range yyq1512 {
					if b {
						yynn1512++
					}
				}
				r.EncodeMapStart(yynn1512)
				yynn1512 = 0
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1514 := z.EncBinary()
				_ = yym1514
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1515 := z.EncBinary()
				_ = yym1515
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[1] {
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1512[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[2] {
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[3] {
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[4] {
					yy1526 := &x.StartedAt
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1526) {
					} else if yym1527 {
						z.EncBinaryMarshal(yy1526)
					} else if !yym1527 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1526)
					} else {
						z.EncFallback(yy1526)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1528 := &x.StartedAt
					yym1529 := z.EncBinary()
					_ = yym1529
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1528) {
					} else if yym1529 {
						z.EncBinaryMarshal(yy1528)
					} else if !yym1529 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1528)
					} else {
						z.EncFallback(yy1528)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[5] {
					yy1531 := &x.FinishedAt
					yym1532 := z.EncBinary()
					_ = yym1532
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1531) {
					} else if yym1532 {
						z.EncBinaryMarshal(yy1531)
					} else if !yym1532 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1531)
					} else {
						z.EncFallback(yy1531)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1533 := &x.FinishedAt
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1533) {
					} else if yym1534 {
						z.EncBinaryMarshal(yy1533)
					} else if !yym1534 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1533)
					} else {
						z.EncFallback(yy1533)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[6] {
					yym1536 := z.EncBinary()
					_ = yym1536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1538 := z.DecBinary()
	_ = yym1538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1539 := r.ContainerType()
		if yyct1539 == codecSelferValueTypeMap1234 {
			yyl1539 := r.ReadMapStart()
			if yyl1539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1539, d)
			}
		} else if yyct1539 == codecSelferValueTypeArray1234 {
			yyl1539 := r.ReadArrayStart()
			if yyl1539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1540Slc
	var yyhl1540 bool = l >= 0
	for yyj1540 := 0; ; yyj1540++ {
		if yyhl1540 {
			if yyj1540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1540Slc = r.DecodeBytes(yys1540Slc, true, true)
		yys1540 := string(yys1540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1540 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1545 := &x.StartedAt
				yym1546 := z.DecBinary()
				_ = yym1546
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1545) {
				} else if yym1546 {
					z.DecBinaryUnmarshal(yyv1545)
				} else if !yym1546 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1545)
				} else {
					z.DecFallback(yyv1545, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1547 := &x.FinishedAt
				yym1548 := z.DecBinary()
				_ = yym1548
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1547) {
				} else if yym1548 {
					z.DecBinaryUnmarshal(yyv1547)
				} else if !yym1548 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1547)
				} else {
					z.DecFallback(yyv1547, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1540)
		} // end switch yys1540
	} // end for yyj1540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1550 int
	var yyb1550 bool
	var yyhl1550 bool = l >= 0
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1555 := &x.StartedAt
		yym1556 := z.DecBinary()
		_ = yym1556
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1555) {
		} else if yym1556 {
			z.DecBinaryUnmarshal(yyv1555)
		} else if !yym1556 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1555)
		} else {
			z.DecFallback(yyv1555, false)
		}
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1557 := &x.FinishedAt
		yym1558 := z.DecBinary()
		_ = yym1558
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1557) {
		} else if yym1558 {
			z.DecBinaryUnmarshal(yyv1557)
		} else if !yym1558 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1557)
		} else {
			z.DecFallback(yyv1557, false)
		}
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1550++
		if yyhl1550 {
			yyb1550 = yyj1550 > l
		} else {
			yyb1550 = r.CheckBreak()
		}
		if yyb1550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1560 := z.EncBinary()
		_ = yym1560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1561 := !z.EncBinary()
			yy2arr1561 := z.EncBasicHandle().StructToArray
			var yyq1561 [3]bool
			_, _, _ = yysep1561, yyq1561, yy2arr1561
			const yyr1561 bool = false
			yyq1561[0] = x.Waiting != nil
			yyq1561[1] = x.Running != nil
			yyq1561[2] = x.Terminated != nil
			var yynn1561 int
			if yyr1561 || yy2arr1561 {
				r.EncodeArrayStart(3)
			} else {
				yynn1561 = 0
				for _, b := range yyq1561 {
					if b {
						yynn1561++
					}
				}
				r.EncodeMapStart(yynn1561)
				yynn1561 = 0
			}
			if yyr1561 || yy2arr1561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1561[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1561 || yy2arr1561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1561[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1561 || yy2arr1561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1561[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1561 || yy2arr1561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1565 := z.DecBinary()
	_ = yym1565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1566 := r.ContainerType()
		if yyct1566 == codecSelferValueTypeMap1234 {
			yyl1566 := r.ReadMapStart()
			if yyl1566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1566, d)
			}
		} else if yyct1566 == codecSelferValueTypeArray1234 {
			yyl1566 := r.ReadArrayStart()
			if yyl1566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1567Slc
	var yyhl1567 bool = l >= 0
	for yyj1567 := 0; ; yyj1567++ {
		if yyhl1567 {
			if yyj1567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1567Slc = r.DecodeBytes(yys1567Slc, true, true)
		yys1567 := string(yys1567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1567 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1567)
		} // end switch yys1567
	} // end for yyj1567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1571 int
	var yyb1571 bool
	var yyhl1571 bool = l >= 0
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1571++
		if yyhl1571 {
			yyb1571 = yyj1571 > l
		} else {
			yyb1571 = r.CheckBreak()
		}
		if yyb1571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1575 := z.EncBinary()
		_ = yym1575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1576 := !z.EncBinary()
			yy2arr1576 := z.EncBasicHandle().StructToArray
			var yyq1576 [8]bool
			_, _, _ = yysep1576, yyq1576, yy2arr1576
			const yyr1576 bool = false
			yyq1576[1] = true
			yyq1576[2] = true
			yyq1576[7] = x.ContainerID != ""
			var yynn1576 int
			if yyr1576 || yy2arr1576 {
				r.EncodeArrayStart(8)
			} else {
				yynn1576 = 5
				for _, b := range yyq1576 {
					if b {
						yynn1576++
					}
				}
				r.EncodeMapStart(yynn1576)
				yynn1576 = 0
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1578 := z.EncBinary()
				_ = yym1578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1579 := z.EncBinary()
				_ = yym1579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[1] {
					yy1581 := &x.State
					yy1581.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1576[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1582 := &x.State
					yy1582.CodecEncodeSelf(e)
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[2] {
					yy1584 := &x.LastTerminationState
					yy1584.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1576[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1585 := &x.LastTerminationState
					yy1585.CodecEncodeSelf(e)
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1587 := z.EncBinary()
				_ = yym1587
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1588 := z.EncBinary()
				_ = yym1588
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1590 := z.EncBinary()
				_ = yym1590
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1591 := z.EncBinary()
				_ = yym1591
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1593 := z.EncBinary()
				_ = yym1593
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1594 := z.EncBinary()
				_ = yym1594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1596 := z.EncBinary()
				_ = yym1596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1597 := z.EncBinary()
				_ = yym1597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[7] {
					yym1599 := z.EncBinary()
					_ = yym1599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1576[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1600 := z.EncBinary()
					_ = yym1600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1601 := z.DecBinary()
	_ = yym1601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1602 := r.ContainerType()
		if yyct1602 == codecSelferValueTypeMap1234 {
			yyl1602 := r.ReadMapStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1602, d)
			}
		} else if yyct1602 == codecSelferValueTypeArray1234 {
			yyl1602 := r.ReadArrayStart()
			if yyl1602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1603Slc
	var yyhl1603 bool = l >= 0
	for yyj1603 := 0; ; yyj1603++ {
		if yyhl1603 {
			if yyj1603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1603Slc = r.DecodeBytes(yys1603Slc, true, true)
		yys1603 := string(yys1603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1603 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1605 := &x.State
				yyv1605.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1606 := &x.LastTerminationState
				yyv1606.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1603)
		} // end switch yys1603
	} // end for yyj1603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1612 int
	var yyb1612 bool
	var yyhl1612 bool = l >= 0
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1614 := &x.State
		yyv1614.CodecDecodeSelf(d)
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1615 := &x.LastTerminationState
		yyv1615.CodecDecodeSelf(d)
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1612++
	if yyhl1612 {
		yyb1612 = yyj1612 > l
	} else {
		yyb1612 = r.CheckBreak()
	}
	if yyb1612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1612++
		if yyhl1612 {
			yyb1612 = yyj1612 > l
		} else {
			yyb1612 = r.CheckBreak()
		}
		if yyb1612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1621 := z.EncBinary()
	_ = yym1621
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1622 := z.DecBinary()
	_ = yym1622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1623 := z.EncBinary()
	_ = yym1623
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1624 := z.DecBinary()
	_ = yym1624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1625 := z.EncBinary()
		_ = yym1625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1626 := !z.EncBinary()
			yy2arr1626 := z.EncBasicHandle().StructToArray
			var yyq1626 [6]bool
			_, _, _ = yysep1626, yyq1626, yy2arr1626
			const yyr1626 bool = false
			yyq1626[2] = true
			yyq1626[3] = true
			yyq1626[4] = x.Reason != ""
			yyq1626[5] = x.Message != ""
			var yynn1626 int
			if yyr1626 || yy2arr1626 {
				r.EncodeArrayStart(6)
			} else {
				yynn1626 = 2
				for _, b := range yyq1626 {
					if b {
						yynn1626++
					}
				}
				r.EncodeMapStart(yynn1626)
				yynn1626 = 0
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[2] {
					yy1630 := &x.LastProbeTime
					yym1631 := z.EncBinary()
					_ = yym1631
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1630) {
					} else if yym1631 {
						z.EncBinaryMarshal(yy1630)
					} else if !yym1631 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1630)
					} else {
						z.EncFallback(yy1630)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1626[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1632 := &x.LastProbeTime
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1632) {
					} else if yym1633 {
						z.EncBinaryMarshal(yy1632)
					} else if !yym1633 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1632)
					} else {
						z.EncFallback(yy1632)
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[3] {
					yy1635 := &x.LastTransitionTime
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1635) {
					} else if yym1636 {
						z.EncBinaryMarshal(yy1635)
					} else if !yym1636 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1635)
					} else {
						z.EncFallback(yy1635)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1626[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1637 := &x.LastTransitionTime
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1637) {
					} else if yym1638 {
						z.EncBinaryMarshal(yy1637)
					} else if !yym1638 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1637)
					} else {
						z.EncFallback(yy1637)
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[4] {
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1626[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1626[5] {
					yym1643 := z.EncBinary()
					_ = yym1643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1626[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1644 := z.EncBinary()
					_ = yym1644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1626 || yy2arr1626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1645 := z.DecBinary()
	_ = yym1645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1646 := r.ContainerType()
		if yyct1646 == codecSelferValueTypeMap1234 {
			yyl1646 := r.ReadMapStart()
			if yyl1646 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1646, d)
			}
		} else if yyct1646 == codecSelferValueTypeArray1234 {
			yyl1646 := r.ReadArrayStart()
			if yyl1646 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1647Slc
	var yyhl1647 bool = l >= 0
	for yyj1647 := 0; ; yyj1647++ {
		if yyhl1647 {
			if yyj1647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1647Slc = r.DecodeBytes(yys1647Slc, true, true)
		yys1647 := string(yys1647Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1647 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1650 := &x.LastProbeTime
				yym1651 := z.DecBinary()
				_ = yym1651
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1650) {
				} else if yym1651 {
					z.DecBinaryUnmarshal(yyv1650)
				} else if !yym1651 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1650)
				} else {
					z.DecFallback(yyv1650, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1652 := &x.LastTransitionTime
				yym1653 := z.DecBinary()
				_ = yym1653
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1652) {
				} else if yym1653 {
					z.DecBinaryUnmarshal(yyv1652)
				} else if !yym1653 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1652)
				} else {
					z.DecFallback(yyv1652, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1647)
		} // end switch yys1647
	} // end for yyj1647
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1656 int
	var yyb1656 bool
	var yyhl1656 bool = l >= 0
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1659 := &x.LastProbeTime
		yym1660 := z.DecBinary()
		_ = yym1660
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1659) {
		} else if yym1660 {
			z.DecBinaryUnmarshal(yyv1659)
		} else if !yym1660 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1659)
		} else {
			z.DecFallback(yyv1659, false)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1661 := &x.LastTransitionTime
		yym1662 := z.DecBinary()
		_ = yym1662
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1661) {
		} else if yym1662 {
			z.DecBinaryUnmarshal(yyv1661)
		} else if !yym1662 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1661)
		} else {
			z.DecFallback(yyv1661, false)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1656++
		if yyhl1656 {
			yyb1656 = yyj1656 > l
		} else {
			yyb1656 = r.CheckBreak()
		}
		if yyb1656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1665 := z.EncBinary()
	_ = yym1665
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1666 := z.DecBinary()
	_ = yym1666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1667 := z.EncBinary()
		_ = yym1667
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1668 := !z.EncBinary()
			yy2arr1668 := z.EncBasicHandle().StructToArray
			var yyq1668 [4]bool
			_, _, _ = yysep1668, yyq1668, yy2arr1668
			const yyr1668 bool = false
			yyq1668[0] = x.Kind != ""
			yyq1668[1] = x.APIVersion != ""
			yyq1668[2] = true
			var yynn1668 int
			if yyr1668 || yy2arr1668 {
				r.EncodeArrayStart(4)
			} else {
				yynn1668 = 1
				for _, b := range yyq1668 {
					if b {
						yynn1668++
					}
				}
				r.EncodeMapStart(yynn1668)
				yynn1668 = 0
			}
			if yyr1668 || yy2arr1668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1668[0] {
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1668[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1671 := z.EncBinary()
					_ = yym1671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1668 || yy2arr1668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1668[1] {
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1668[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1674 := z.EncBinary()
					_ = yym1674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1668 || yy2arr1668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1668[2] {
					yy1676 := &x.ListMeta
					yym1677 := z.EncBinary()
					_ = yym1677
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1676) {
					} else {
						z.EncFallback(yy1676)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1668[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1678 := &x.ListMeta
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1678) {
					} else {
						z.EncFallback(yy1678)
					}
				}
			}
			if yyr1668 || yy2arr1668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1668 || yy2arr1668 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1683 := z.DecBinary()
	_ = yym1683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1684 := r.ContainerType()
		if yyct1684 == codecSelferValueTypeMap1234 {
			yyl1684 := r.ReadMapStart()
			if yyl1684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1684, d)
			}
		} else if yyct1684 == codecSelferValueTypeArray1234 {
			yyl1684 := r.ReadArrayStart()
			if yyl1684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1685Slc
	var yyhl1685 bool = l >= 0
	for yyj1685 := 0; ; yyj1685++ {
		if yyhl1685 {
			if yyj1685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1685Slc = r.DecodeBytes(yys1685Slc, true, true)
		yys1685 := string(yys1685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1685 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1688 := &x.ListMeta
				yym1689 := z.DecBinary()
				_ = yym1689
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1688) {
				} else {
					z.DecFallback(yyv1688, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1690 := &x.Items
				yym1691 := z.DecBinary()
				_ = yym1691
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1690), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1685)
		} // end switch yys1685
	} // end for yyj1685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1692 int
	var yyb1692 bool
	var yyhl1692 bool = l >= 0
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1695 := &x.ListMeta
		yym1696 := z.DecBinary()
		_ = yym1696
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1695) {
		} else {
			z.DecFallback(yyv1695, false)
		}
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1697 := &x.Items
		yym1698 := z.DecBinary()
		_ = yym1698
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1697), d)
		}
	}
	for {
		yyj1692++
		if yyhl1692 {
			yyb1692 = yyj1692 > l
		} else {
			yyb1692 = r.CheckBreak()
		}
		if yyb1692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1699 := z.EncBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1700 := z.DecBinary()
	_ = yym1700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1701 := z.EncBinary()
		_ = yym1701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1702 := !z.EncBinary()
			yy2arr1702 := z.EncBasicHandle().StructToArray
			var yyq1702 [1]bool
			_, _, _ = yysep1702, yyq1702, yy2arr1702
			const yyr1702 bool = false
			var yynn1702 int
			if yyr1702 || yy2arr1702 {
				r.EncodeArrayStart(1)
			} else {
				yynn1702 = 1
				for _, b := range yyq1702 {
					if b {
						yynn1702++
					}
				}
				r.EncodeMapStart(yynn1702)
				yynn1702 = 0
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1706 := z.DecBinary()
	_ = yym1706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1707 := r.ContainerType()
		if yyct1707 == codecSelferValueTypeMap1234 {
			yyl1707 := r.ReadMapStart()
			if yyl1707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1707, d)
			}
		} else if yyct1707 == codecSelferValueTypeArray1234 {
			yyl1707 := r.ReadArrayStart()
			if yyl1707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1708Slc
	var yyhl1708 bool = l >= 0
	for yyj1708 := 0; ; yyj1708++ {
		if yyhl1708 {
			if yyj1708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1708Slc = r.DecodeBytes(yys1708Slc, true, true)
		yys1708 := string(yys1708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1708 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1709 := &x.NodeSelectorTerms
				yym1710 := z.DecBinary()
				_ = yym1710
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1709), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1708)
		} // end switch yys1708
	} // end for yyj1708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1711 int
	var yyb1711 bool
	var yyhl1711 bool = l >= 0
	yyj1711++
	if yyhl1711 {
		yyb1711 = yyj1711 > l
	} else {
		yyb1711 = r.CheckBreak()
	}
	if yyb1711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1712 := &x.NodeSelectorTerms
		yym1713 := z.DecBinary()
		_ = yym1713
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1712), d)
		}
	}
	for {
		yyj1711++
		if yyhl1711 {
			yyb1711 = yyj1711 > l
		} else {
			yyb1711 = r.CheckBreak()
		}
		if yyb1711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1714 := z.EncBinary()
		_ = yym1714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1715 := !z.EncBinary()
			yy2arr1715 := z.EncBasicHandle().StructToArray
			var yyq1715 [1]bool
			_, _, _ = yysep1715, yyq1715, yy2arr1715
			const yyr1715 bool = false
			var yynn1715 int
			if yyr1715 || yy2arr1715 {
				r.EncodeArrayStart(1)
			} else {
				yynn1715 = 1
				for _, b := range yyq1715 {
					if b {
						yynn1715++
					}
				}
				r.EncodeMapStart(yynn1715)
				yynn1715 = 0
			}
			if yyr1715 || yy2arr1715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1718 := z.EncBinary()
					_ = yym1718
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1715 || yy2arr1715 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1719 := z.DecBinary()
	_ = yym1719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1720 := r.ContainerType()
		if yyct1720 == codecSelferValueTypeMap1234 {
			yyl1720 := r.ReadMapStart()
			if yyl1720 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1720, d)
			}
		} else if yyct1720 == codecSelferValueTypeArray1234 {
			yyl1720 := r.ReadArrayStart()
			if yyl1720 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1721Slc
	var yyhl1721 bool = l >= 0
	for yyj1721 := 0; ; yyj1721++ {
		if yyhl1721 {
			if yyj1721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1721Slc = r.DecodeBytes(yys1721Slc, true, true)
		yys1721 := string(yys1721Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1721 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1722 := &x.MatchExpressions
				yym1723 := z.DecBinary()
				_ = yym1723
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1722), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1721)
		} // end switch yys1721
	} // end for yyj1721
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1724 int
	var yyb1724 bool
	var yyhl1724 bool = l >= 0
	yyj1724++
	if yyhl1724 {
		yyb1724 = yyj1724 > l
	} else {
		yyb1724 = r.CheckBreak()
	}
	if yyb1724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1725 := &x.MatchExpressions
		yym1726 := z.DecBinary()
		_ = yym1726
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1725), d)
		}
	}
	for {
		yyj1724++
		if yyhl1724 {
			yyb1724 = yyj1724 > l
		} else {
			yyb1724 = r.CheckBreak()
		}
		if yyb1724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1727 := z.EncBinary()
		_ = yym1727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1728 := !z.EncBinary()
			yy2arr1728 := z.EncBasicHandle().StructToArray
			var yyq1728 [3]bool
			_, _, _ = yysep1728, yyq1728, yy2arr1728
			const yyr1728 bool = false
			yyq1728[2] = len(x.Values) != 0
			var yynn1728 int
			if yyr1728 || yy2arr1728 {
				r.EncodeArrayStart(3)
			} else {
				yynn1728 = 2
				for _, b := range yyq1728 {
					if b {
						yynn1728++
					}
				}
				r.EncodeMapStart(yynn1728)
				yynn1728 = 0
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1730 := z.EncBinary()
				_ = yym1730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1731 := z.EncBinary()
				_ = yym1731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1728[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1734 := z.EncBinary()
						_ = yym1734
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1735 := z.EncBinary()
						_ = yym1735
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1728 || yy2arr1728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1736 := z.DecBinary()
	_ = yym1736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1737 := r.ContainerType()
		if yyct1737 == codecSelferValueTypeMap1234 {
			yyl1737 := r.ReadMapStart()
			if yyl1737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1737, d)
			}
		} else if yyct1737 == codecSelferValueTypeArray1234 {
			yyl1737 := r.ReadArrayStart()
			if yyl1737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1738Slc
	var yyhl1738 bool = l >= 0
	for yyj1738 := 0; ; yyj1738++ {
		if yyhl1738 {
			if yyj1738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1738Slc = r.DecodeBytes(yys1738Slc, true, true)
		yys1738 := string(yys1738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1738 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1741 := &x.Values
				yym1742 := z.DecBinary()
				_ = yym1742
				if false {
				} else {
					z.F.DecSliceStringX(yyv1741, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1738)
		} // end switch yys1738
	} // end for yyj1738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1743 int
	var yyb1743 bool
	var yyhl1743 bool = l >= 0
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1743++
	if yyhl1743 {
		yyb1743 = yyj1743 > l
	} else {
		yyb1743 = r.CheckBreak()
	}
	if yyb1743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1746 := &x.Values
		yym1747 := z.DecBinary()
		_ = yym1747
		if false {
		} else {
			z.F.DecSliceStringX(yyv1746, false, d)
		}
	}
	for {
		yyj1743++
		if yyhl1743 {
			yyb1743 = yyj1743 > l
		} else {
			yyb1743 = r.CheckBreak()
		}
		if yyb1743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1748 := z.EncBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1749 := z.DecBinary()
	_ = yym1749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1750 := z.EncBinary()
		_ = yym1750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1751 := !z.EncBinary()
			yy2arr1751 := z.EncBasicHandle().StructToArray
			var yyq1751 [3]bool
			_, _, _ = yysep1751, yyq1751, yy2arr1751
			const yyr1751 bool = false
			yyq1751[0] = x.NodeAffinity != nil
			yyq1751[1] = x.PodAffinity != nil
			yyq1751[2] = x.PodAntiAffinity != nil
			var yynn1751 int
			if yyr1751 || yy2arr1751 {
				r.EncodeArrayStart(3)
			} else {
				yynn1751 = 0
				for _, b := range yyq1751 {
					if b {
						yynn1751++
					}
				}
				r.EncodeMapStart(yynn1751)
				yynn1751 = 0
			}
			if yyr1751 || yy2arr1751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1751[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1751[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1751 || yy2arr1751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1751[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1751[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1751 || yy2arr1751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1751[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1751[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1751 || yy2arr1751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1755 := z.DecBinary()
	_ = yym1755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1756 := r.ContainerType()
		if yyct1756 == codecSelferValueTypeMap1234 {
			yyl1756 := r.ReadMapStart()
			if yyl1756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1756, d)
			}
		} else if yyct1756 == codecSelferValueTypeArray1234 {
			yyl1756 := r.ReadArrayStart()
			if yyl1756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1757Slc
	var yyhl1757 bool = l >= 0
	for yyj1757 := 0; ; yyj1757++ {
		if yyhl1757 {
			if yyj1757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1757Slc = r.DecodeBytes(yys1757Slc, true, true)
		yys1757 := string(yys1757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1757 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1757)
		} // end switch yys1757
	} // end for yyj1757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1761 int
	var yyb1761 bool
	var yyhl1761 bool = l >= 0
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1761++
	if yyhl1761 {
		yyb1761 = yyj1761 > l
	} else {
		yyb1761 = r.CheckBreak()
	}
	if yyb1761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1761++
		if yyhl1761 {
			yyb1761 = yyj1761 > l
		} else {
			yyb1761 = r.CheckBreak()
		}
		if yyb1761 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1761-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1765 := z.EncBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1766 := !z.EncBinary()
			yy2arr1766 := z.EncBasicHandle().StructToArray
			var yyq1766 [2]bool
			_, _, _ = yysep1766, yyq1766, yy2arr1766
			const yyr1766 bool = false
			yyq1766[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1766[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1766 int
			if yyr1766 || yy2arr1766 {
				r.EncodeArrayStart(2)
			} else {
				yynn1766 = 0
				for _, b := range yyq1766 {
					if b {
						yynn1766++
					}
				}
				r.EncodeMapStart(yynn1766)
				yynn1766 = 0
			}
			if yyr1766 || yy2arr1766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1766[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1768 := z.EncBinary()
						_ = yym1768
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1766[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1769 := z.EncBinary()
						_ = yym1769
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1766 || yy2arr1766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1766[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1771 := z.EncBinary()
						_ = yym1771
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1766[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1772 := z.EncBinary()
						_ = yym1772
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1766 || yy2arr1766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1773 := z.DecBinary()
	_ = yym1773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1774 := r.ContainerType()
		if yyct1774 == codecSelferValueTypeMap1234 {
			yyl1774 := r.ReadMapStart()
			if yyl1774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1774, d)
			}
		} else if yyct1774 == codecSelferValueTypeArray1234 {
			yyl1774 := r.ReadArrayStart()
			if yyl1774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1775Slc
	var yyhl1775 bool = l >= 0
	for yyj1775 := 0; ; yyj1775++ {
		if yyhl1775 {
			if yyj1775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1775Slc = r.DecodeBytes(yys1775Slc, true, true)
		yys1775 := string(yys1775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1775 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1776 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1777 := z.DecBinary()
				_ = yym1777
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1776), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1778 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1779 := z.DecBinary()
				_ = yym1779
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1778), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1775)
		} // end switch yys1775
	} // end for yyj1775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1780 int
	var yyb1780 bool
	var yyhl1780 bool = l >= 0
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1781 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1782 := z.DecBinary()
		_ = yym1782
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1781), d)
		}
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1783 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1783), d)
		}
	}
	for {
		yyj1780++
		if yyhl1780 {
			yyb1780 = yyj1780 > l
		} else {
			yyb1780 = r.CheckBreak()
		}
		if yyb1780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1785 := z.EncBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1786 := !z.EncBinary()
			yy2arr1786 := z.EncBasicHandle().StructToArray
			var yyq1786 [2]bool
			_, _, _ = yysep1786, yyq1786, yy2arr1786
			const yyr1786 bool = false
			yyq1786[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1786[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1786 int
			if yyr1786 || yy2arr1786 {
				r.EncodeArrayStart(2)
			} else {
				yynn1786 = 0
				for _, b := range yyq1786 {
					if b {
						yynn1786++
					}
				}
				r.EncodeMapStart(yynn1786)
				yynn1786 = 0
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1786[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1788 := z.EncBinary()
						_ = yym1788
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1786[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1789 := z.EncBinary()
						_ = yym1789
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1786[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1791 := z.EncBinary()
						_ = yym1791
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1786[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1792 := z.EncBinary()
						_ = yym1792
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1794 := r.ContainerType()
		if yyct1794 == codecSelferValueTypeMap1234 {
			yyl1794 := r.ReadMapStart()
			if yyl1794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1794, d)
			}
		} else if yyct1794 == codecSelferValueTypeArray1234 {
			yyl1794 := r.ReadArrayStart()
			if yyl1794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1795Slc
	var yyhl1795 bool = l >= 0
	for yyj1795 := 0; ; yyj1795++ {
		if yyhl1795 {
			if yyj1795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1795Slc = r.DecodeBytes(yys1795Slc, true, true)
		yys1795 := string(yys1795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1795 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1796 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1797 := z.DecBinary()
				_ = yym1797
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1796), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1798 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1799 := z.DecBinary()
				_ = yym1799
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1798), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1795)
		} // end switch yys1795
	} // end for yyj1795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1800 int
	var yyb1800 bool
	var yyhl1800 bool = l >= 0
	yyj1800++
	if yyhl1800 {
		yyb1800 = yyj1800 > l
	} else {
		yyb1800 = r.CheckBreak()
	}
	if yyb1800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1801 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1802 := z.DecBinary()
		_ = yym1802
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1801), d)
		}
	}
	yyj1800++
	if yyhl1800 {
		yyb1800 = yyj1800 > l
	} else {
		yyb1800 = r.CheckBreak()
	}
	if yyb1800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1803 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1804 := z.DecBinary()
		_ = yym1804
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1803), d)
		}
	}
	for {
		yyj1800++
		if yyhl1800 {
			yyb1800 = yyj1800 > l
		} else {
			yyb1800 = r.CheckBreak()
		}
		if yyb1800 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1800-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1805 := z.EncBinary()
		_ = yym1805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1806 := !z.EncBinary()
			yy2arr1806 := z.EncBasicHandle().StructToArray
			var yyq1806 [2]bool
			_, _, _ = yysep1806, yyq1806, yy2arr1806
			const yyr1806 bool = false
			var yynn1806 int
			if yyr1806 || yy2arr1806 {
				r.EncodeArrayStart(2)
			} else {
				yynn1806 = 2
				for _, b := range yyq1806 {
					if b {
						yynn1806++
					}
				}
				r.EncodeMapStart(yynn1806)
				yynn1806 = 0
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1808 := z.EncBinary()
				_ = yym1808
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1809 := z.EncBinary()
				_ = yym1809
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1811 := &x.PodAffinityTerm
				yy1811.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1812 := &x.PodAffinityTerm
				yy1812.CodecEncodeSelf(e)
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1813 := z.DecBinary()
	_ = yym1813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1814 := r.ContainerType()
		if yyct1814 == codecSelferValueTypeMap1234 {
			yyl1814 := r.ReadMapStart()
			if yyl1814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1814, d)
			}
		} else if yyct1814 == codecSelferValueTypeArray1234 {
			yyl1814 := r.ReadArrayStart()
			if yyl1814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1815Slc
	var yyhl1815 bool = l >= 0
	for yyj1815 := 0; ; yyj1815++ {
		if yyhl1815 {
			if yyj1815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1815Slc = r.DecodeBytes(yys1815Slc, true, true)
		yys1815 := string(yys1815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1815 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1817 := &x.PodAffinityTerm
				yyv1817.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1815)
		} // end switch yys1815
	} // end for yyj1815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1818 int
	var yyb1818 bool
	var yyhl1818 bool = l >= 0
	yyj1818++
	if yyhl1818 {
		yyb1818 = yyj1818 > l
	} else {
		yyb1818 = r.CheckBreak()
	}
	if yyb1818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1818++
	if yyhl1818 {
		yyb1818 = yyj1818 > l
	} else {
		yyb1818 = r.CheckBreak()
	}
	if yyb1818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1820 := &x.PodAffinityTerm
		yyv1820.CodecDecodeSelf(d)
	}
	for {
		yyj1818++
		if yyhl1818 {
			yyb1818 = yyj1818 > l
		} else {
			yyb1818 = r.CheckBreak()
		}
		if yyb1818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1821 := z.EncBinary()
		_ = yym1821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1822 := !z.EncBinary()
			yy2arr1822 := z.EncBasicHandle().StructToArray
			var yyq1822 [3]bool
			_, _, _ = yysep1822, yyq1822, yy2arr1822
			const yyr1822 bool = false
			yyq1822[0] = x.LabelSelector != nil
			yyq1822[2] = x.TopologyKey != ""
			var yynn1822 int
			if yyr1822 || yy2arr1822 {
				r.EncodeArrayStart(3)
			} else {
				yynn1822 = 1
				for _, b := range yyq1822 {
					if b {
						yynn1822++
					}
				}
				r.EncodeMapStart(yynn1822)
				yynn1822 = 0
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1824 := z.EncBinary()
						_ = yym1824
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1825 := z.EncBinary()
						_ = yym1825
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[2] {
					yym1830 := z.EncBinary()
					_ = yym1830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1831 := z.EncBinary()
					_ = yym1831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1832 := z.DecBinary()
	_ = yym1832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1833 := r.ContainerType()
		if yyct1833 == codecSelferValueTypeMap1234 {
			yyl1833 := r.ReadMapStart()
			if yyl1833 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1833, d)
			}
		} else if yyct1833 == codecSelferValueTypeArray1234 {
			yyl1833 := r.ReadArrayStart()
			if yyl1833 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1834Slc
	var yyhl1834 bool = l >= 0
	for yyj1834 := 0; ; yyj1834++ {
		if yyhl1834 {
			if yyj1834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1834Slc = r.DecodeBytes(yys1834Slc, true, true)
		yys1834 := string(yys1834Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1834 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1836 := z.DecBinary()
				_ = yym1836
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1837 := &x.Namespaces
				yym1838 := z.DecBinary()
				_ = yym1838
				if false {
				} else {
					z.F.DecSliceStringX(yyv1837, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1834)
		} // end switch yys1834
	} // end for yyj1834
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1840 int
	var yyb1840 bool
	var yyhl1840 bool = l >= 0
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1842 := z.DecBinary()
		_ = yym1842
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1843 := &x.Namespaces
		yym1844 := z.DecBinary()
		_ = yym1844
		if false {
		} else {
			z.F.DecSliceStringX(yyv1843, false, d)
		}
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1840++
		if yyhl1840 {
			yyb1840 = yyj1840 > l
		} else {
			yyb1840 = r.CheckBreak()
		}
		if yyb1840 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1840-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1846 := z.EncBinary()
		_ = yym1846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1847 := !z.EncBinary()
			yy2arr1847 := z.EncBasicHandle().StructToArray
			var yyq1847 [2]bool
			_, _, _ = yysep1847, yyq1847, yy2arr1847
			const yyr1847 bool = false
			yyq1847[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1847[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1847 int
			if yyr1847 || yy2arr1847 {
				r.EncodeArrayStart(2)
			} else {
				yynn1847 = 0
				for _, b := range yyq1847 {
					if b {
						yynn1847++
					}
				}
				r.EncodeMapStart(yynn1847)
				yynn1847 = 0
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1847[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1847[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1850 := z.EncBinary()
						_ = yym1850
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1851 := z.EncBinary()
						_ = yym1851
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1852 := z.DecBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1853 := r.ContainerType()
		if yyct1853 == codecSelferValueTypeMap1234 {
			yyl1853 := r.ReadMapStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1853, d)
			}
		} else if yyct1853 == codecSelferValueTypeArray1234 {
			yyl1853 := r.ReadArrayStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1854Slc
	var yyhl1854 bool = l >= 0
	for yyj1854 := 0; ; yyj1854++ {
		if yyhl1854 {
			if yyj1854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1854Slc = r.DecodeBytes(yys1854Slc, true, true)
		yys1854 := string(yys1854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1854 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1856 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1857 := z.DecBinary()
				_ = yym1857
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1856), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1854)
		} // end switch yys1854
	} // end for yyj1854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1858 int
	var yyb1858 bool
	var yyhl1858 bool = l >= 0
	yyj1858++
	if yyhl1858 {
		yyb1858 = yyj1858 > l
	} else {
		yyb1858 = r.CheckBreak()
	}
	if yyb1858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1858++
	if yyhl1858 {
		yyb1858 = yyj1858 > l
	} else {
		yyb1858 = r.CheckBreak()
	}
	if yyb1858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1860 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1861 := z.DecBinary()
		_ = yym1861
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1860), d)
		}
	}
	for {
		yyj1858++
		if yyhl1858 {
			yyb1858 = yyj1858 > l
		} else {
			yyb1858 = r.CheckBreak()
		}
		if yyb1858 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1858-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1862 := z.EncBinary()
		_ = yym1862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1863 := !z.EncBinary()
			yy2arr1863 := z.EncBasicHandle().StructToArray
			var yyq1863 [2]bool
			_, _, _ = yysep1863, yyq1863, yy2arr1863
			const yyr1863 bool = false
			var yynn1863 int
			if yyr1863 || yy2arr1863 {
				r.EncodeArrayStart(2)
			} else {
				yynn1863 = 2
				for _, b := range yyq1863 {
					if b {
						yynn1863++
					}
				}
				r.EncodeMapStart(yynn1863)
				yynn1863 = 0
			}
			if yyr1863 || yy2arr1863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1865 := z.EncBinary()
				_ = yym1865
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1866 := z.EncBinary()
				_ = yym1866
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1863 || yy2arr1863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1868 := &x.Preference
				yy1868.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1869 := &x.Preference
				yy1869.CodecEncodeSelf(e)
			}
			if yyr1863 || yy2arr1863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1870 := z.DecBinary()
	_ = yym1870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1871 := r.ContainerType()
		if yyct1871 == codecSelferValueTypeMap1234 {
			yyl1871 := r.ReadMapStart()
			if yyl1871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1871, d)
			}
		} else if yyct1871 == codecSelferValueTypeArray1234 {
			yyl1871 := r.ReadArrayStart()
			if yyl1871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1872Slc
	var yyhl1872 bool = l >= 0
	for yyj1872 := 0; ; yyj1872++ {
		if yyhl1872 {
			if yyj1872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1872Slc = r.DecodeBytes(yys1872Slc, true, true)
		yys1872 := string(yys1872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1872 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1874 := &x.Preference
				yyv1874.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1872)
		} // end switch yys1872
	} // end for yyj1872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1875 int
	var yyb1875 bool
	var yyhl1875 bool = l >= 0
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1877 := &x.Preference
		yyv1877.CodecDecodeSelf(d)
	}
	for {
		yyj1875++
		if yyhl1875 {
			yyb1875 = yyj1875 > l
		} else {
			yyb1875 = r.CheckBreak()
		}
		if yyb1875 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1875-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1878 := z.EncBinary()
		_ = yym1878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1879 := !z.EncBinary()
			yy2arr1879 := z.EncBasicHandle().StructToArray
			var yyq1879 [3]bool
			_, _, _ = yysep1879, yyq1879, yy2arr1879
			const yyr1879 bool = false
			yyq1879[1] = x.Value != ""
			var yynn1879 int
			if yyr1879 || yy2arr1879 {
				r.EncodeArrayStart(3)
			} else {
				yynn1879 = 2
				for _, b := range yyq1879 {
					if b {
						yynn1879++
					}
				}
				r.EncodeMapStart(yynn1879)
				yynn1879 = 0
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1881 := z.EncBinary()
				_ = yym1881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1882 := z.EncBinary()
				_ = yym1882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[1] {
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1887 := z.DecBinary()
	_ = yym1887
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1888 := r.ContainerType()
		if yyct1888 == codecSelferValueTypeMap1234 {
			yyl1888 := r.ReadMapStart()
			if yyl1888 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1888, d)
			}
		} else if yyct1888 == codecSelferValueTypeArray1234 {
			yyl1888 := r.ReadArrayStart()
			if yyl1888 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1888, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1889Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1889Slc
	var yyhl1889 bool = l >= 0
	for yyj1889 := 0; ; yyj1889++ {
		if yyhl1889 {
			if yyj1889 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1889Slc = r.DecodeBytes(yys1889Slc, true, true)
		yys1889 := string(yys1889Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1889 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1889)
		} // end switch yys1889
	} // end for yyj1889
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1893 int
	var yyb1893 bool
	var yyhl1893 bool = l >= 0
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1893++
		if yyhl1893 {
			yyb1893 = yyj1893 > l
		} else {
			yyb1893 = r.CheckBreak()
		}
		if yyb1893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1897 := z.EncBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1898 := z.DecBinary()
	_ = yym1898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1899 := z.EncBinary()
		_ = yym1899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1900 := !z.EncBinary()
			yy2arr1900 := z.EncBasicHandle().StructToArray
			var yyq1900 [4]bool
			_, _, _ = yysep1900, yyq1900, yy2arr1900
			const yyr1900 bool = false
			yyq1900[0] = x.Key != ""
			yyq1900[1] = x.Operator != ""
			yyq1900[2] = x.Value != ""
			yyq1900[3] = x.Effect != ""
			var yynn1900 int
			if yyr1900 || yy2arr1900 {
				r.EncodeArrayStart(4)
			} else {
				yynn1900 = 0
				for _, b := range yyq1900 {
					if b {
						yynn1900++
					}
				}
				r.EncodeMapStart(yynn1900)
				yynn1900 = 0
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[0] {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[2] {
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1907 := z.EncBinary()
					_ = yym1907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1909 := z.DecBinary()
	_ = yym1909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1910 := r.ContainerType()
		if yyct1910 == codecSelferValueTypeMap1234 {
			yyl1910 := r.ReadMapStart()
			if yyl1910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1910, d)
			}
		} else if yyct1910 == codecSelferValueTypeArray1234 {
			yyl1910 := r.ReadArrayStart()
			if yyl1910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1911Slc
	var yyhl1911 bool = l >= 0
	for yyj1911 := 0; ; yyj1911++ {
		if yyhl1911 {
			if yyj1911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1911Slc = r.DecodeBytes(yys1911Slc, true, true)
		yys1911 := string(yys1911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1911 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1911)
		} // end switch yys1911
	} // end for yyj1911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1916 int
	var yyb1916 bool
	var yyhl1916 bool = l >= 0
	yyj1916++
	if yyhl1916 {
		yyb1916 = yyj1916 > l
	} else {
		yyb1916 = r.CheckBreak()
	}
	if yyb1916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1916++
	if yyhl1916 {
		yyb1916 = yyj1916 > l
	} else {
		yyb1916 = r.CheckBreak()
	}
	if yyb1916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1916++
	if yyhl1916 {
		yyb1916 = yyj1916 > l
	} else {
		yyb1916 = r.CheckBreak()
	}
	if yyb1916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1916++
	if yyhl1916 {
		yyb1916 = yyj1916 > l
	} else {
		yyb1916 = r.CheckBreak()
	}
	if yyb1916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1916++
		if yyhl1916 {
			yyb1916 = yyj1916 > l
		} else {
			yyb1916 = r.CheckBreak()
		}
		if yyb1916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1921 := z.EncBinary()
	_ = yym1921
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1922 := z.DecBinary()
	_ = yym1922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1923 := z.EncBinary()
		_ = yym1923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1924 := !z.EncBinary()
			yy2arr1924 := z.EncBasicHandle().StructToArray
			var yyq1924 [13]bool
			_, _, _ = yysep1924, yyq1924, yy2arr1924
			const yyr1924 bool = false
			yyq1924[2] = x.RestartPolicy != ""
			yyq1924[3] = x.TerminationGracePeriodSeconds != nil
			yyq1924[4] = x.ActiveDeadlineSeconds != nil
			yyq1924[5] = x.DNSPolicy != ""
			yyq1924[6] = len(x.NodeSelector) != 0
			yyq1924[8] = x.NodeName != ""
			yyq1924[9] = x.SecurityContext != nil
			yyq1924[10] = len(x.ImagePullSecrets) != 0
			yyq1924[11] = x.Hostname != ""
			yyq1924[12] = x.Subdomain != ""
			var yynn1924 int
			if yyr1924 || yy2arr1924 {
				r.EncodeArrayStart(13)
			} else {
				yynn1924 = 3
				for _, b := range yyq1924 {
					if b {
						yynn1924++
					}
				}
				r.EncodeMapStart(yynn1924)
				yynn1924 = 0
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1929 := z.EncBinary()
					_ = yym1929
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1933 := *x.TerminationGracePeriodSeconds
						yym1934 := z.EncBinary()
						_ = yym1934
						if false {
						} else {
							r.EncodeInt(int64(yy1933))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1935 := *x.TerminationGracePeriodSeconds
						yym1936 := z.EncBinary()
						_ = yym1936
						if false {
						} else {
							r.EncodeInt(int64(yy1935))
						}
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1938 := *x.ActiveDeadlineSeconds
						yym1939 := z.EncBinary()
						_ = yym1939
						if false {
						} else {
							r.EncodeInt(int64(yy1938))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1940 := *x.ActiveDeadlineSeconds
						yym1941 := z.EncBinary()
						_ = yym1941
						if false {
						} else {
							r.EncodeInt(int64(yy1940))
						}
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1944 := z.EncBinary()
						_ = yym1944
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1945 := z.EncBinary()
						_ = yym1945
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1947 := z.EncBinary()
				_ = yym1947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1948 := z.EncBinary()
				_ = yym1948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[8] {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1954 := z.EncBinary()
						_ = yym1954
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[11] {
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[12] {
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1961 := z.EncBinary()
					_ = yym1961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1962 := z.DecBinary()
	_ = yym1962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1963 := r.ContainerType()
		if yyct1963 == codecSelferValueTypeMap1234 {
			yyl1963 := r.ReadMapStart()
			if yyl1963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1963, d)
			}
		} else if yyct1963 == codecSelferValueTypeArray1234 {
			yyl1963 := r.ReadArrayStart()
			if yyl1963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1964Slc
	var yyhl1964 bool = l >= 0
	for yyj1964 := 0; ; yyj1964++ {
		if yyhl1964 {
			if yyj1964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1964Slc = r.DecodeBytes(yys1964Slc, true, true)
		yys1964 := string(yys1964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1964 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1965 := &x.Volumes
				yym1966 := z.DecBinary()
				_ = yym1966
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1965), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1967 := &x.Containers
				yym1968 := z.DecBinary()
				_ = yym1968
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1967), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1971 := z.DecBinary()
				_ = yym1971
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1973 := z.DecBinary()
				_ = yym1973
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1975 := &x.NodeSelector
				yym1976 := z.DecBinary()
				_ = yym1976
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1975, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1980 := &x.ImagePullSecrets
				yym1981 := z.DecBinary()
				_ = yym1981
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1980), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1964)
		} // end switch yys1964
	} // end for yyj1964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1985 := &x.Volumes
		yym1986 := z.DecBinary()
		_ = yym1986
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1985), d)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1987 := &x.Containers
		yym1988 := z.DecBinary()
		_ = yym1988
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1987), d)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1991 := z.DecBinary()
		_ = yym1991
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1993 := z.DecBinary()
		_ = yym1993
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1995 := &x.NodeSelector
		yym1996 := z.DecBinary()
		_ = yym1996
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1995, false, d)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2000 := &x.ImagePullSecrets
		yym2001 := z.DecBinary()
		_ = yym2001
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2000), d)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2004 := z.EncBinary()
		_ = yym2004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2005 := !z.EncBinary()
			yy2arr2005 := z.EncBasicHandle().StructToArray
			var yyq2005 [8]bool
			_, _, _ = yysep2005, yyq2005, yy2arr2005
			const yyr2005 bool = false
			yyq2005[0] = x.HostNetwork != false
			yyq2005[1] = x.HostPID != false
			yyq2005[2] = x.HostIPC != false
			yyq2005[3] = x.SELinuxOptions != nil
			yyq2005[4] = x.RunAsUser != nil
			yyq2005[5] = x.RunAsNonRoot != nil
			yyq2005[6] = len(x.SupplementalGroups) != 0
			yyq2005[7] = x.FSGroup != nil
			var yynn2005 int
			if yyr2005 || yy2arr2005 {
				r.EncodeArrayStart(8)
			} else {
				yynn2005 = 0
				for _, b := range yyq2005 {
					if b {
						yynn2005++
					}
				}
				r.EncodeMapStart(yynn2005)
				yynn2005 = 0
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[0] {
					yym2007 := z.EncBinary()
					_ = yym2007
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2005[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[1] {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2005[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[2] {
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2005[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2017 := *x.RunAsUser
						yym2018 := z.EncBinary()
						_ = yym2018
						if false {
						} else {
							r.EncodeInt(int64(yy2017))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2019 := *x.RunAsUser
						yym2020 := z.EncBinary()
						_ = yym2020
						if false {
						} else {
							r.EncodeInt(int64(yy2019))
						}
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2022 := *x.RunAsNonRoot
						yym2023 := z.EncBinary()
						_ = yym2023
						if false {
						} else {
							r.EncodeBool(bool(yy2022))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2024 := *x.RunAsNonRoot
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							r.EncodeBool(bool(yy2024))
						}
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2028 := z.EncBinary()
						_ = yym2028
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2030 := *x.FSGroup
						yym2031 := z.EncBinary()
						_ = yym2031
						if false {
						} else {
							r.EncodeInt(int64(yy2030))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2032 := *x.FSGroup
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							r.EncodeInt(int64(yy2032))
						}
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2034 := z.DecBinary()
	_ = yym2034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2035 := r.ContainerType()
		if yyct2035 == codecSelferValueTypeMap1234 {
			yyl2035 := r.ReadMapStart()
			if yyl2035 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2035, d)
			}
		} else if yyct2035 == codecSelferValueTypeArray1234 {
			yyl2035 := r.ReadArrayStart()
			if yyl2035 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2036Slc
	var yyhl2036 bool = l >= 0
	for yyj2036 := 0; ; yyj2036++ {
		if yyhl2036 {
			if yyj2036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2036Slc = r.DecodeBytes(yys2036Slc, true, true)
		yys2036 := string(yys2036Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2036 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2042 := z.DecBinary()
				_ = yym2042
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2044 := z.DecBinary()
				_ = yym2044
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2045 := &x.SupplementalGroups
				yym2046 := z.DecBinary()
				_ = yym2046
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2045, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2036)
		} // end switch yys2036
	} // end for yyj2036
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2049 int
	var yyb2049 bool
	var yyhl2049 bool = l >= 0
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2055 := z.DecBinary()
		_ = yym2055
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2057 := z.DecBinary()
		_ = yym2057
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2058 := &x.SupplementalGroups
		yym2059 := z.DecBinary()
		_ = yym2059
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2058, false, d)
		}
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2061 := z.DecBinary()
		_ = yym2061
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2049++
		if yyhl2049 {
			yyb2049 = yyj2049 > l
		} else {
			yyb2049 = r.CheckBreak()
		}
		if yyb2049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2062 := z.EncBinary()
		_ = yym2062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2063 := !z.EncBinary()
			yy2arr2063 := z.EncBasicHandle().StructToArray
			var yyq2063 [8]bool
			_, _, _ = yysep2063, yyq2063, yy2arr2063
			const yyr2063 bool = false
			yyq2063[0] = x.Phase != ""
			yyq2063[1] = len(x.Conditions) != 0
			yyq2063[2] = x.Message != ""
			yyq2063[3] = x.Reason != ""
			yyq2063[4] = x.HostIP != ""
			yyq2063[5] = x.PodIP != ""
			yyq2063[6] = x.StartTime != nil
			yyq2063[7] = len(x.ContainerStatuses) != 0
			var yynn2063 int
			if yyr2063 || yy2arr2063 {
				r.EncodeArrayStart(8)
			} else {
				yynn2063 = 0
				for _, b := range yyq2063 {
					if b {
						yynn2063++
					}
				}
				r.EncodeMapStart(yynn2063)
				yynn2063 = 0
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2066 := z.EncBinary()
						_ = yym2066
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2067 := z.EncBinary()
						_ = yym2067
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[2] {
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2070 := z.EncBinary()
					_ = yym2070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[3] {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[4] {
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[5] {
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2081 := z.EncBinary()
						_ = yym2081
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2081 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2081 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2063[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2082 := z.EncBinary()
						_ = yym2082
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2082 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2082 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2084 := z.EncBinary()
						_ = yym2084
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2063[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2085 := z.EncBinary()
						_ = yym2085
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2086 := z.DecBinary()
	_ = yym2086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2087 := r.ContainerType()
		if yyct2087 == codecSelferValueTypeMap1234 {
			yyl2087 := r.ReadMapStart()
			if yyl2087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2087, d)
			}
		} else if yyct2087 == codecSelferValueTypeArray1234 {
			yyl2087 := r.ReadArrayStart()
			if yyl2087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2088Slc
	var yyhl2088 bool = l >= 0
	for yyj2088 := 0; ; yyj2088++ {
		if yyhl2088 {
			if yyj2088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2088Slc = r.DecodeBytes(yys2088Slc, true, true)
		yys2088 := string(yys2088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2088 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2090 := &x.Conditions
				yym2091 := z.DecBinary()
				_ = yym2091
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2090), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2097 := z.DecBinary()
				_ = yym2097
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2097 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2097 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2098 := &x.ContainerStatuses
				yym2099 := z.DecBinary()
				_ = yym2099
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2098), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2088)
		} // end switch yys2088
	} // end for yyj2088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2102 := &x.Conditions
		yym2103 := z.DecBinary()
		_ = yym2103
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2102), d)
		}
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2109 := z.DecBinary()
		_ = yym2109
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2109 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2109 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2110 := &x.ContainerStatuses
		yym2111 := z.DecBinary()
		_ = yym2111
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2110), d)
		}
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2112 := z.EncBinary()
		_ = yym2112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2113 := !z.EncBinary()
			yy2arr2113 := z.EncBasicHandle().StructToArray
			var yyq2113 [4]bool
			_, _, _ = yysep2113, yyq2113, yy2arr2113
			const yyr2113 bool = false
			yyq2113[0] = x.Kind != ""
			yyq2113[1] = x.APIVersion != ""
			yyq2113[2] = true
			yyq2113[3] = true
			var yynn2113 int
			if yyr2113 || yy2arr2113 {
				r.EncodeArrayStart(4)
			} else {
				yynn2113 = 0
				for _, b := range yyq2113 {
					if b {
						yynn2113++
					}
				}
				r.EncodeMapStart(yynn2113)
				yynn2113 = 0
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[0] {
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[1] {
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[2] {
					yy2121 := &x.ObjectMeta
					yy2121.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2122 := &x.ObjectMeta
					yy2122.CodecEncodeSelf(e)
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2113[3] {
					yy2124 := &x.Status
					yy2124.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2113[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2125 := &x.Status
					yy2125.CodecEncodeSelf(e)
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2126 := z.DecBinary()
	_ = yym2126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2127 := r.ContainerType()
		if yyct2127 == codecSelferValueTypeMap1234 {
			yyl2127 := r.ReadMapStart()
			if yyl2127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2127, d)
			}
		} else if yyct2127 == codecSelferValueTypeArray1234 {
			yyl2127 := r.ReadArrayStart()
			if yyl2127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2128Slc
	var yyhl2128 bool = l >= 0
	for yyj2128 := 0; ; yyj2128++ {
		if yyhl2128 {
			if yyj2128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2128Slc = r.DecodeBytes(yys2128Slc, true, true)
		yys2128 := string(yys2128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2128 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2131 := &x.ObjectMeta
				yyv2131.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2132 := &x.Status
				yyv2132.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2128)
		} // end switch yys2128
	} // end for yyj2128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2133 int
	var yyb2133 bool
	var yyhl2133 bool = l >= 0
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2136 := &x.ObjectMeta
		yyv2136.CodecDecodeSelf(d)
	}
	yyj2133++
	if yyhl2133 {
		yyb2133 = yyj2133 > l
	} else {
		yyb2133 = r.CheckBreak()
	}
	if yyb2133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2137 := &x.Status
		yyv2137.CodecDecodeSelf(d)
	}
	for {
		yyj2133++
		if yyhl2133 {
			yyb2133 = yyj2133 > l
		} else {
			yyb2133 = r.CheckBreak()
		}
		if yyb2133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2138 := z.EncBinary()
		_ = yym2138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2139 := !z.EncBinary()
			yy2arr2139 := z.EncBasicHandle().StructToArray
			var yyq2139 [5]bool
			_, _, _ = yysep2139, yyq2139, yy2arr2139
			const yyr2139 bool = false
			yyq2139[0] = x.Kind != ""
			yyq2139[1] = x.APIVersion != ""
			yyq2139[2] = true
			yyq2139[3] = true
			yyq2139[4] = true
			var yynn2139 int
			if yyr2139 || yy2arr2139 {
				r.EncodeArrayStart(5)
			} else {
				yynn2139 = 0
				for _, b := range yyq2139 {
					if b {
						yynn2139++
					}
				}
				r.EncodeMapStart(yynn2139)
				yynn2139 = 0
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[0] {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[1] {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[2] {
					yy2147 := &x.ObjectMeta
					yy2147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2148 := &x.ObjectMeta
					yy2148.CodecEncodeSelf(e)
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[3] {
					yy2150 := &x.Spec
					yy2150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2151 := &x.Spec
					yy2151.CodecEncodeSelf(e)
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[4] {
					yy2153 := &x.Status
					yy2153.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2154 := &x.Status
					yy2154.CodecEncodeSelf(e)
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2156 := r.ContainerType()
		if yyct2156 == codecSelferValueTypeMap1234 {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if yyct2156 == codecSelferValueTypeArray1234 {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2160 := &x.ObjectMeta
				yyv2160.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2161 := &x.Spec
				yyv2161.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2162 := &x.Status
				yyv2162.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2163 int
	var yyb2163 bool
	var yyhl2163 bool = l >= 0
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2166 := &x.ObjectMeta
		yyv2166.CodecDecodeSelf(d)
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2167 := &x.Spec
		yyv2167.CodecDecodeSelf(d)
	}
	yyj2163++
	if yyhl2163 {
		yyb2163 = yyj2163 > l
	} else {
		yyb2163 = r.CheckBreak()
	}
	if yyb2163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2168 := &x.Status
		yyv2168.CodecDecodeSelf(d)
	}
	for {
		yyj2163++
		if yyhl2163 {
			yyb2163 = yyj2163 > l
		} else {
			yyb2163 = r.CheckBreak()
		}
		if yyb2163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2169 := z.EncBinary()
		_ = yym2169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2170 := !z.EncBinary()
			yy2arr2170 := z.EncBasicHandle().StructToArray
			var yyq2170 [2]bool
			_, _, _ = yysep2170, yyq2170, yy2arr2170
			const yyr2170 bool = false
			yyq2170[0] = true
			yyq2170[1] = true
			var yynn2170 int
			if yyr2170 || yy2arr2170 {
				r.EncodeArrayStart(2)
			} else {
				yynn2170 = 0
				for _, b := range yyq2170 {
					if b {
						yynn2170++
					}
				}
				r.EncodeMapStart(yynn2170)
				yynn2170 = 0
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[0] {
					yy2172 := &x.ObjectMeta
					yy2172.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2173 := &x.ObjectMeta
					yy2173.CodecEncodeSelf(e)
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2170[1] {
					yy2175 := &x.Spec
					yy2175.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2176 := &x.Spec
					yy2176.CodecEncodeSelf(e)
				}
			}
			if yyr2170 || yy2arr2170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2177 := z.DecBinary()
	_ = yym2177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2178 := r.ContainerType()
		if yyct2178 == codecSelferValueTypeMap1234 {
			yyl2178 := r.ReadMapStart()
			if yyl2178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2178, d)
			}
		} else if yyct2178 == codecSelferValueTypeArray1234 {
			yyl2178 := r.ReadArrayStart()
			if yyl2178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2179Slc
	var yyhl2179 bool = l >= 0
	for yyj2179 := 0; ; yyj2179++ {
		if yyhl2179 {
			if yyj2179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2179Slc = r.DecodeBytes(yys2179Slc, true, true)
		yys2179 := string(yys2179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2179 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2180 := &x.ObjectMeta
				yyv2180.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2181 := &x.Spec
				yyv2181.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2179)
		} // end switch yys2179
	} // end for yyj2179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2182 int
	var yyb2182 bool
	var yyhl2182 bool = l >= 0
	yyj2182++
	if yyhl2182 {
		yyb2182 = yyj2182 > l
	} else {
		yyb2182 = r.CheckBreak()
	}
	if yyb2182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2183 := &x.ObjectMeta
		yyv2183.CodecDecodeSelf(d)
	}
	yyj2182++
	if yyhl2182 {
		yyb2182 = yyj2182 > l
	} else {
		yyb2182 = r.CheckBreak()
	}
	if yyb2182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2184 := &x.Spec
		yyv2184.CodecDecodeSelf(d)
	}
	for {
		yyj2182++
		if yyhl2182 {
			yyb2182 = yyj2182 > l
		} else {
			yyb2182 = r.CheckBreak()
		}
		if yyb2182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2185 := z.EncBinary()
		_ = yym2185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2186 := !z.EncBinary()
			yy2arr2186 := z.EncBasicHandle().StructToArray
			var yyq2186 [4]bool
			_, _, _ = yysep2186, yyq2186, yy2arr2186
			const yyr2186 bool = false
			yyq2186[0] = x.Kind != ""
			yyq2186[1] = x.APIVersion != ""
			yyq2186[2] = true
			yyq2186[3] = true
			var yynn2186 int
			if yyr2186 || yy2arr2186 {
				r.EncodeArrayStart(4)
			} else {
				yynn2186 = 0
				for _, b := range yyq2186 {
					if b {
						yynn2186++
					}
				}
				r.EncodeMapStart(yynn2186)
				yynn2186 = 0
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[0] {
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2186[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[1] {
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2186[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[2] {
					yy2194 := &x.ObjectMeta
					yy2194.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2186[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2195 := &x.ObjectMeta
					yy2195.CodecEncodeSelf(e)
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2186[3] {
					yy2197 := &x.Template
					yy2197.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2186[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2198 := &x.Template
					yy2198.CodecEncodeSelf(e)
				}
			}
			if yyr2186 || yy2arr2186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2199 := z.DecBinary()
	_ = yym2199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2200 := r.ContainerType()
		if yyct2200 == codecSelferValueTypeMap1234 {
			yyl2200 := r.ReadMapStart()
			if yyl2200 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2200, d)
			}
		} else if yyct2200 == codecSelferValueTypeArray1234 {
			yyl2200 := r.ReadArrayStart()
			if yyl2200 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2200, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2201Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2201Slc
	var yyhl2201 bool = l >= 0
	for yyj2201 := 0; ; yyj2201++ {
		if yyhl2201 {
			if yyj2201 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2201Slc = r.DecodeBytes(yys2201Slc, true, true)
		yys2201 := string(yys2201Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2201 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2204 := &x.ObjectMeta
				yyv2204.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2205 := &x.Template
				yyv2205.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2201)
		} // end switch yys2201
	} // end for yyj2201
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2206 int
	var yyb2206 bool
	var yyhl2206 bool = l >= 0
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2209 := &x.ObjectMeta
		yyv2209.CodecDecodeSelf(d)
	}
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2210 := &x.Template
		yyv2210.CodecDecodeSelf(d)
	}
	for {
		yyj2206++
		if yyhl2206 {
			yyb2206 = yyj2206 > l
		} else {
			yyb2206 = r.CheckBreak()
		}
		if yyb2206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2211 := z.EncBinary()
		_ = yym2211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2212 := !z.EncBinary()
			yy2arr2212 := z.EncBasicHandle().StructToArray
			var yyq2212 [4]bool
			_, _, _ = yysep2212, yyq2212, yy2arr2212
			const yyr2212 bool = false
			yyq2212[0] = x.Kind != ""
			yyq2212[1] = x.APIVersion != ""
			yyq2212[2] = true
			var yynn2212 int
			if yyr2212 || yy2arr2212 {
				r.EncodeArrayStart(4)
			} else {
				yynn2212 = 1
				for _, b := range yyq2212 {
					if b {
						yynn2212++
					}
				}
				r.EncodeMapStart(yynn2212)
				yynn2212 = 0
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2212[0] {
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2212[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2212[1] {
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2212[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2212[2] {
					yy2220 := &x.ListMeta
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2220) {
					} else {
						z.EncFallback(yy2220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2212[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2222 := &x.ListMeta
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2222) {
					} else {
						z.EncFallback(yy2222)
					}
				}
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2212 || yy2arr2212 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2227 := z.DecBinary()
	_ = yym2227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2228 := r.ContainerType()
		if yyct2228 == codecSelferValueTypeMap1234 {
			yyl2228 := r.ReadMapStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2228, d)
			}
		} else if yyct2228 == codecSelferValueTypeArray1234 {
			yyl2228 := r.ReadArrayStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2229Slc
	var yyhl2229 bool = l >= 0
	for yyj2229 := 0; ; yyj2229++ {
		if yyhl2229 {
			if yyj2229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2229Slc = r.DecodeBytes(yys2229Slc, true, true)
		yys2229 := string(yys2229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2229 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2232 := &x.ListMeta
				yym2233 := z.DecBinary()
				_ = yym2233
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2232) {
				} else {
					z.DecFallback(yyv2232, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2234 := &x.Items
				yym2235 := z.DecBinary()
				_ = yym2235
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2234), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2229)
		} // end switch yys2229
	} // end for yyj2229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2236 int
	var yyb2236 bool
	var yyhl2236 bool = l >= 0
	yyj2236++
	if yyhl2236 {
		yyb2236 = yyj2236 > l
	} else {
		yyb2236 = r.CheckBreak()
	}
	if yyb2236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2236++
	if yyhl2236 {
		yyb2236 = yyj2236 > l
	} else {
		yyb2236 = r.CheckBreak()
	}
	if yyb2236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2236++
	if yyhl2236 {
		yyb2236 = yyj2236 > l
	} else {
		yyb2236 = r.CheckBreak()
	}
	if yyb2236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2239 := &x.ListMeta
		yym2240 := z.DecBinary()
		_ = yym2240
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2239) {
		} else {
			z.DecFallback(yyv2239, false)
		}
	}
	yyj2236++
	if yyhl2236 {
		yyb2236 = yyj2236 > l
	} else {
		yyb2236 = r.CheckBreak()
	}
	if yyb2236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2241 := &x.Items
		yym2242 := z.DecBinary()
		_ = yym2242
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2241), d)
		}
	}
	for {
		yyj2236++
		if yyhl2236 {
			yyb2236 = yyj2236 > l
		} else {
			yyb2236 = r.CheckBreak()
		}
		if yyb2236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2243 := z.EncBinary()
		_ = yym2243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2244 := !z.EncBinary()
			yy2arr2244 := z.EncBasicHandle().StructToArray
			var yyq2244 [3]bool
			_, _, _ = yysep2244, yyq2244, yy2arr2244
			const yyr2244 bool = false
			yyq2244[2] = x.Template != nil
			var yynn2244 int
			if yyr2244 || yy2arr2244 {
				r.EncodeArrayStart(3)
			} else {
				yynn2244 = 2
				for _, b := range yyq2244 {
					if b {
						yynn2244++
					}
				}
				r.EncodeMapStart(yynn2244)
				yynn2244 = 0
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2246 := z.EncBinary()
				_ = yym2246
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2244[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2244 || yy2arr2244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2252 := z.DecBinary()
	_ = yym2252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2253 := r.ContainerType()
		if yyct2253 == codecSelferValueTypeMap1234 {
			yyl2253 := r.ReadMapStart()
			if yyl2253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2253, d)
			}
		} else if yyct2253 == codecSelferValueTypeArray1234 {
			yyl2253 := r.ReadArrayStart()
			if yyl2253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2254Slc
	var yyhl2254 bool = l >= 0
	for yyj2254 := 0; ; yyj2254++ {
		if yyhl2254 {
			if yyj2254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2254Slc = r.DecodeBytes(yys2254Slc, true, true)
		yys2254 := string(yys2254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2254 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2256 := &x.Selector
				yym2257 := z.DecBinary()
				_ = yym2257
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2256, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2254)
		} // end switch yys2254
	} // end for yyj2254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2259 int
	var yyb2259 bool
	var yyhl2259 bool = l >= 0
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2261 := &x.Selector
		yym2262 := z.DecBinary()
		_ = yym2262
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2261, false, d)
		}
	}
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2259++
		if yyhl2259 {
			yyb2259 = yyj2259 > l
		} else {
			yyb2259 = r.CheckBreak()
		}
		if yyb2259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2264 := z.EncBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2265 := !z.EncBinary()
			yy2arr2265 := z.EncBasicHandle().StructToArray
			var yyq2265 [3]bool
			_, _, _ = yysep2265, yyq2265, yy2arr2265
			const yyr2265 bool = false
			yyq2265[1] = x.FullyLabeledReplicas != 0
			yyq2265[2] = x.ObservedGeneration != 0
			var yynn2265 int
			if yyr2265 || yy2arr2265 {
				r.EncodeArrayStart(3)
			} else {
				yynn2265 = 1
				for _, b := range yyq2265 {
					if b {
						yynn2265++
					}
				}
				r.EncodeMapStart(yynn2265)
				yynn2265 = 0
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2268 := z.EncBinary()
				_ = yym2268
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[1] {
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2265[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2271 := z.EncBinary()
					_ = yym2271
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[2] {
					yym2273 := z.EncBinary()
					_ = yym2273
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2265[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2274 := z.EncBinary()
					_ = yym2274
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2275 := z.DecBinary()
	_ = yym2275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2276 := r.ContainerType()
		if yyct2276 == codecSelferValueTypeMap1234 {
			yyl2276 := r.ReadMapStart()
			if yyl2276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2276, d)
			}
		} else if yyct2276 == codecSelferValueTypeArray1234 {
			yyl2276 := r.ReadArrayStart()
			if yyl2276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2277Slc
	var yyhl2277 bool = l >= 0
	for yyj2277 := 0; ; yyj2277++ {
		if yyhl2277 {
			if yyj2277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2277Slc = r.DecodeBytes(yys2277Slc, true, true)
		yys2277 := string(yys2277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2277 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2277)
		} // end switch yys2277
	} // end for yyj2277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2281 int
	var yyb2281 bool
	var yyhl2281 bool = l >= 0
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2281++
	if yyhl2281 {
		yyb2281 = yyj2281 > l
	} else {
		yyb2281 = r.CheckBreak()
	}
	if yyb2281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2281++
		if yyhl2281 {
			yyb2281 = yyj2281 > l
		} else {
			yyb2281 = r.CheckBreak()
		}
		if yyb2281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2285 := z.EncBinary()
		_ = yym2285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2286 := !z.EncBinary()
			yy2arr2286 := z.EncBasicHandle().StructToArray
			var yyq2286 [5]bool
			_, _, _ = yysep2286, yyq2286, yy2arr2286
			const yyr2286 bool = false
			yyq2286[0] = x.Kind != ""
			yyq2286[1] = x.APIVersion != ""
			yyq2286[2] = true
			yyq2286[3] = true
			yyq2286[4] = true
			var yynn2286 int
			if yyr2286 || yy2arr2286 {
				r.EncodeArrayStart(5)
			} else {
				yynn2286 = 0
				for _, b := range yyq2286 {
					if b {
						yynn2286++
					}
				}
				r.EncodeMapStart(yynn2286)
				yynn2286 = 0
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[0] {
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2289 := z.EncBinary()
					_ = yym2289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[1] {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[2] {
					yy2294 := &x.ObjectMeta
					yy2294.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2295 := &x.ObjectMeta
					yy2295.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[3] {
					yy2297 := &x.Spec
					yy2297.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2298 := &x.Spec
					yy2298.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[4] {
					yy2300 := &x.Status
					yy2300.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2301 := &x.Status
					yy2301.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2302 := z.DecBinary()
	_ = yym2302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2303 := r.ContainerType()
		if yyct2303 == codecSelferValueTypeMap1234 {
			yyl2303 := r.ReadMapStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2303, d)
			}
		} else if yyct2303 == codecSelferValueTypeArray1234 {
			yyl2303 := r.ReadArrayStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2304Slc
	var yyhl2304 bool = l >= 0
	for yyj2304 := 0; ; yyj2304++ {
		if yyhl2304 {
			if yyj2304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2304Slc = r.DecodeBytes(yys2304Slc, true, true)
		yys2304 := string(yys2304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2304 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2307 := &x.ObjectMeta
				yyv2307.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2308 := &x.Spec
				yyv2308.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2309 := &x.Status
				yyv2309.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2304)
		} // end switch yys2304
	} // end for yyj2304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2310 int
	var yyb2310 bool
	var yyhl2310 bool = l >= 0
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2313 := &x.ObjectMeta
		yyv2313.CodecDecodeSelf(d)
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2314 := &x.Spec
		yyv2314.CodecDecodeSelf(d)
	}
	yyj2310++
	if yyhl2310 {
		yyb2310 = yyj2310 > l
	} else {
		yyb2310 = r.CheckBreak()
	}
	if yyb2310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2315 := &x.Status
		yyv2315.CodecDecodeSelf(d)
	}
	for {
		yyj2310++
		if yyhl2310 {
			yyb2310 = yyj2310 > l
		} else {
			yyb2310 = r.CheckBreak()
		}
		if yyb2310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2316 := z.EncBinary()
		_ = yym2316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2317 := !z.EncBinary()
			yy2arr2317 := z.EncBasicHandle().StructToArray
			var yyq2317 [4]bool
			_, _, _ = yysep2317, yyq2317, yy2arr2317
			const yyr2317 bool = false
			yyq2317[0] = x.Kind != ""
			yyq2317[1] = x.APIVersion != ""
			yyq2317[2] = true
			var yynn2317 int
			if yyr2317 || yy2arr2317 {
				r.EncodeArrayStart(4)
			} else {
				yynn2317 = 1
				for _, b := range yyq2317 {
					if b {
						yynn2317++
					}
				}
				r.EncodeMapStart(yynn2317)
				yynn2317 = 0
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2317[0] {
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2317[1] {
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2317[2] {
					yy2325 := &x.ListMeta
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2325) {
					} else {
						z.EncFallback(yy2325)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2327 := &x.ListMeta
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2327) {
					} else {
						z.EncFallback(yy2327)
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2317 || yy2arr2317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2332 := z.DecBinary()
	_ = yym2332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2333 := r.ContainerType()
		if yyct2333 == codecSelferValueTypeMap1234 {
			yyl2333 := r.ReadMapStart()
			if yyl2333 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2333, d)
			}
		} else if yyct2333 == codecSelferValueTypeArray1234 {
			yyl2333 := r.ReadArrayStart()
			if yyl2333 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2334Slc
	var yyhl2334 bool = l >= 0
	for yyj2334 := 0; ; yyj2334++ {
		if yyhl2334 {
			if yyj2334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2334Slc = r.DecodeBytes(yys2334Slc, true, true)
		yys2334 := string(yys2334Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2337 := &x.ListMeta
				yym2338 := z.DecBinary()
				_ = yym2338
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2337) {
				} else {
					z.DecFallback(yyv2337, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2339 := &x.Items
				yym2340 := z.DecBinary()
				_ = yym2340
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2339), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2334)
		} // end switch yys2334
	} // end for yyj2334
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2341 int
	var yyb2341 bool
	var yyhl2341 bool = l >= 0
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2344 := &x.ListMeta
		yym2345 := z.DecBinary()
		_ = yym2345
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2344) {
		} else {
			z.DecFallback(yyv2344, false)
		}
	}
	yyj2341++
	if yyhl2341 {
		yyb2341 = yyj2341 > l
	} else {
		yyb2341 = r.CheckBreak()
	}
	if yyb2341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2346 := &x.Items
		yym2347 := z.DecBinary()
		_ = yym2347
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2346), d)
		}
	}
	for {
		yyj2341++
		if yyhl2341 {
			yyb2341 = yyj2341 > l
		} else {
			yyb2341 = r.CheckBreak()
		}
		if yyb2341 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2341-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2348 := z.EncBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2349 := !z.EncBinary()
			yy2arr2349 := z.EncBasicHandle().StructToArray
			var yyq2349 [4]bool
			_, _, _ = yysep2349, yyq2349, yy2arr2349
			const yyr2349 bool = false
			yyq2349[0] = x.Kind != ""
			yyq2349[1] = x.APIVersion != ""
			yyq2349[2] = true
			var yynn2349 int
			if yyr2349 || yy2arr2349 {
				r.EncodeArrayStart(4)
			} else {
				yynn2349 = 1
				for _, b := range yyq2349 {
					if b {
						yynn2349++
					}
				}
				r.EncodeMapStart(yynn2349)
				yynn2349 = 0
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[0] {
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[1] {
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[2] {
					yy2357 := &x.ListMeta
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2357) {
					} else {
						z.EncFallback(yy2357)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2359 := &x.ListMeta
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2359) {
					} else {
						z.EncFallback(yy2359)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2364 := z.DecBinary()
	_ = yym2364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2365 := r.ContainerType()
		if yyct2365 == codecSelferValueTypeMap1234 {
			yyl2365 := r.ReadMapStart()
			if yyl2365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2365, d)
			}
		} else if yyct2365 == codecSelferValueTypeArray1234 {
			yyl2365 := r.ReadArrayStart()
			if yyl2365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2366Slc
	var yyhl2366 bool = l >= 0
	for yyj2366 := 0; ; yyj2366++ {
		if yyhl2366 {
			if yyj2366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2366Slc = r.DecodeBytes(yys2366Slc, true, true)
		yys2366 := string(yys2366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2366 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2369 := &x.ListMeta
				yym2370 := z.DecBinary()
				_ = yym2370
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2369) {
				} else {
					z.DecFallback(yyv2369, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2371 := &x.Items
				yym2372 := z.DecBinary()
				_ = yym2372
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2371), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2366)
		} // end switch yys2366
	} // end for yyj2366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2373 int
	var yyb2373 bool
	var yyhl2373 bool = l >= 0
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2376 := &x.ListMeta
		yym2377 := z.DecBinary()
		_ = yym2377
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2376) {
		} else {
			z.DecFallback(yyv2376, false)
		}
	}
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2378 := &x.Items
		yym2379 := z.DecBinary()
		_ = yym2379
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2378), d)
		}
	}
	for {
		yyj2373++
		if yyhl2373 {
			yyb2373 = yyj2373 > l
		} else {
			yyb2373 = r.CheckBreak()
		}
		if yyb2373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2380 := z.EncBinary()
	_ = yym2380
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2381 := z.DecBinary()
	_ = yym2381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2382 := z.EncBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2383 := z.DecBinary()
	_ = yym2383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2384 := z.EncBinary()
		_ = yym2384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2385 := !z.EncBinary()
			yy2arr2385 := z.EncBasicHandle().StructToArray
			var yyq2385 [1]bool
			_, _, _ = yysep2385, yyq2385, yy2arr2385
			const yyr2385 bool = false
			yyq2385[0] = true
			var yynn2385 int
			if yyr2385 || yy2arr2385 {
				r.EncodeArrayStart(1)
			} else {
				yynn2385 = 0
				for _, b := range yyq2385 {
					if b {
						yynn2385++
					}
				}
				r.EncodeMapStart(yynn2385)
				yynn2385 = 0
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2385[0] {
					yy2387 := &x.LoadBalancer
					yy2387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2388 := &x.LoadBalancer
					yy2388.CodecEncodeSelf(e)
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2390 := r.ContainerType()
		if yyct2390 == codecSelferValueTypeMap1234 {
			yyl2390 := r.ReadMapStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2390, d)
			}
		} else if yyct2390 == codecSelferValueTypeArray1234 {
			yyl2390 := r.ReadArrayStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2391Slc
	var yyhl2391 bool = l >= 0
	for yyj2391 := 0; ; yyj2391++ {
		if yyhl2391 {
			if yyj2391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2391Slc = r.DecodeBytes(yys2391Slc, true, true)
		yys2391 := string(yys2391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2391 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2392 := &x.LoadBalancer
				yyv2392.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2391)
		} // end switch yys2391
	} // end for yyj2391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2393 int
	var yyb2393 bool
	var yyhl2393 bool = l >= 0
	yyj2393++
	if yyhl2393 {
		yyb2393 = yyj2393 > l
	} else {
		yyb2393 = r.CheckBreak()
	}
	if yyb2393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2394 := &x.LoadBalancer
		yyv2394.CodecDecodeSelf(d)
	}
	for {
		yyj2393++
		if yyhl2393 {
			yyb2393 = yyj2393 > l
		} else {
			yyb2393 = r.CheckBreak()
		}
		if yyb2393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2395 := z.EncBinary()
		_ = yym2395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2396 := !z.EncBinary()
			yy2arr2396 := z.EncBasicHandle().StructToArray
			var yyq2396 [1]bool
			_, _, _ = yysep2396, yyq2396, yy2arr2396
			const yyr2396 bool = false
			yyq2396[0] = len(x.Ingress) != 0
			var yynn2396 int
			if yyr2396 || yy2arr2396 {
				r.EncodeArrayStart(1)
			} else {
				yynn2396 = 0
				for _, b := range yyq2396 {
					if b {
						yynn2396++
					}
				}
				r.EncodeMapStart(yynn2396)
				yynn2396 = 0
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2398 := z.EncBinary()
						_ = yym2398
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2399 := z.EncBinary()
						_ = yym2399
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2401 := r.ContainerType()
		if yyct2401 == codecSelferValueTypeMap1234 {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if yyct2401 == codecSelferValueTypeArray1234 {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2402 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2403 := &x.Ingress
				yym2404 := z.DecBinary()
				_ = yym2404
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2403), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2405 int
	var yyb2405 bool
	var yyhl2405 bool = l >= 0
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2406 := &x.Ingress
		yym2407 := z.DecBinary()
		_ = yym2407
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2406), d)
		}
	}
	for {
		yyj2405++
		if yyhl2405 {
			yyb2405 = yyj2405 > l
		} else {
			yyb2405 = r.CheckBreak()
		}
		if yyb2405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2408 := z.EncBinary()
		_ = yym2408
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2409 := !z.EncBinary()
			yy2arr2409 := z.EncBasicHandle().StructToArray
			var yyq2409 [2]bool
			_, _, _ = yysep2409, yyq2409, yy2arr2409
			const yyr2409 bool = false
			yyq2409[0] = x.IP != ""
			yyq2409[1] = x.Hostname != ""
			var yynn2409 int
			if yyr2409 || yy2arr2409 {
				r.EncodeArrayStart(2)
			} else {
				yynn2409 = 0
				for _, b := range yyq2409 {
					if b {
						yynn2409++
					}
				}
				r.EncodeMapStart(yynn2409)
				yynn2409 = 0
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[0] {
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2409[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[1] {
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2409[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2416 := z.DecBinary()
	_ = yym2416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2417 := r.ContainerType()
		if yyct2417 == codecSelferValueTypeMap1234 {
			yyl2417 := r.ReadMapStart()
			if yyl2417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2417, d)
			}
		} else if yyct2417 == codecSelferValueTypeArray1234 {
			yyl2417 := r.ReadArrayStart()
			if yyl2417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2418Slc
	var yyhl2418 bool = l >= 0
	for yyj2418 := 0; ; yyj2418++ {
		if yyhl2418 {
			if yyj2418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2418Slc = r.DecodeBytes(yys2418Slc, true, true)
		yys2418 := string(yys2418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2418 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2418)
		} // end switch yys2418
	} // end for yyj2418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2421 int
	var yyb2421 bool
	var yyhl2421 bool = l >= 0
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2421++
		if yyhl2421 {
			yyb2421 = yyj2421 > l
		} else {
			yyb2421 = r.CheckBreak()
		}
		if yyb2421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2424 := z.EncBinary()
		_ = yym2424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2425 := !z.EncBinary()
			yy2arr2425 := z.EncBasicHandle().StructToArray
			var yyq2425 [8]bool
			_, _, _ = yysep2425, yyq2425, yy2arr2425
			const yyr2425 bool = false
			yyq2425[0] = x.Type != ""
			yyq2425[3] = x.ClusterIP != ""
			yyq2425[4] = len(x.ExternalIPs) != 0
			yyq2425[5] = x.LoadBalancerIP != ""
			yyq2425[6] = x.SessionAffinity != ""
			yyq2425[7] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2425 int
			if yyr2425 || yy2arr2425 {
				r.EncodeArrayStart(8)
			} else {
				yynn2425 = 2
				for _, b := range yyq2425 {
					if b {
						yynn2425++
					}
				}
				r.EncodeMapStart(yynn2425)
				yynn2425 = 0
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[3] {
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2437 := z.EncBinary()
						_ = yym2437
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2438 := z.EncBinary()
						_ = yym2438
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[5] {
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[7] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2444 := z.EncBinary()
						_ = yym2444
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2445 := z.EncBinary()
						_ = yym2445
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2446 := z.DecBinary()
	_ = yym2446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2447 := r.ContainerType()
		if yyct2447 == codecSelferValueTypeMap1234 {
			yyl2447 := r.ReadMapStart()
			if yyl2447 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2447, d)
			}
		} else if yyct2447 == codecSelferValueTypeArray1234 {
			yyl2447 := r.ReadArrayStart()
			if yyl2447 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2447, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2448Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2448Slc
	var yyhl2448 bool = l >= 0
	for yyj2448 := 0; ; yyj2448++ {
		if yyhl2448 {
			if yyj2448 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2448Slc = r.DecodeBytes(yys2448Slc, true, true)
		yys2448 := string(yys2448Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2448 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2450 := &x.Ports
				yym2451 := z.DecBinary()
				_ = yym2451
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2450), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2452 := &x.Selector
				yym2453 := z.DecBinary()
				_ = yym2453
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2452, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2455 := &x.ExternalIPs
				yym2456 := z.DecBinary()
				_ = yym2456
				if false {
				} else {
					z.F.DecSliceStringX(yyv2455, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2459 := &x.LoadBalancerSourceRanges
				yym2460 := z.DecBinary()
				_ = yym2460
				if false {
				} else {
					z.F.DecSliceStringX(yyv2459, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2448)
		} // end switch yys2448
	} // end for yyj2448
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2461 int
	var yyb2461 bool
	var yyhl2461 bool = l >= 0
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2463 := &x.Ports
		yym2464 := z.DecBinary()
		_ = yym2464
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2463), d)
		}
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2465 := &x.Selector
		yym2466 := z.DecBinary()
		_ = yym2466
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2465, false, d)
		}
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2468 := &x.ExternalIPs
		yym2469 := z.DecBinary()
		_ = yym2469
		if false {
		} else {
			z.F.DecSliceStringX(yyv2468, false, d)
		}
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2472 := &x.LoadBalancerSourceRanges
		yym2473 := z.DecBinary()
		_ = yym2473
		if false {
		} else {
			z.F.DecSliceStringX(yyv2472, false, d)
		}
	}
	for {
		yyj2461++
		if yyhl2461 {
			yyb2461 = yyj2461 > l
		} else {
			yyb2461 = r.CheckBreak()
		}
		if yyb2461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2474 := z.EncBinary()
		_ = yym2474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2475 := !z.EncBinary()
			yy2arr2475 := z.EncBasicHandle().StructToArray
			var yyq2475 [5]bool
			_, _, _ = yysep2475, yyq2475, yy2arr2475
			const yyr2475 bool = false
			var yynn2475 int
			if yyr2475 || yy2arr2475 {
				r.EncodeArrayStart(5)
			} else {
				yynn2475 = 5
				for _, b := range yyq2475 {
					if b {
						yynn2475++
					}
				}
				r.EncodeMapStart(yynn2475)
				yynn2475 = 0
			}
			if yyr2475 || yy2arr2475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2477 := z.EncBinary()
				_ = yym2477
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2478 := z.EncBinary()
				_ = yym2478
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2475 || yy2arr2475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2475 || yy2arr2475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2481 := z.EncBinary()
				_ = yym2481
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2482 := z.EncBinary()
				_ = yym2482
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2475 || yy2arr2475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2484 := &x.TargetPort
				yym2485 := z.EncBinary()
				_ = yym2485
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2484) {
				} else if !yym2485 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2484)
				} else {
					z.EncFallback(yy2484)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2486 := &x.TargetPort
				yym2487 := z.EncBinary()
				_ = yym2487
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2486) {
				} else if !yym2487 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2486)
				} else {
					z.EncFallback(yy2486)
				}
			}
			if yyr2475 || yy2arr2475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2489 := z.EncBinary()
				_ = yym2489
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2490 := z.EncBinary()
				_ = yym2490
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2475 || yy2arr2475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2491 := z.DecBinary()
	_ = yym2491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2492 := r.ContainerType()
		if yyct2492 == codecSelferValueTypeMap1234 {
			yyl2492 := r.ReadMapStart()
			if yyl2492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2492, d)
			}
		} else if yyct2492 == codecSelferValueTypeArray1234 {
			yyl2492 := r.ReadArrayStart()
			if yyl2492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2493Slc
	var yyhl2493 bool = l >= 0
	for yyj2493 := 0; ; yyj2493++ {
		if yyhl2493 {
			if yyj2493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2493Slc = r.DecodeBytes(yys2493Slc, true, true)
		yys2493 := string(yys2493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2493 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2497 := &x.TargetPort
				yym2498 := z.DecBinary()
				_ = yym2498
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2497) {
				} else if !yym2498 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2497)
				} else {
					z.DecFallback(yyv2497, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2493)
		} // end switch yys2493
	} // end for yyj2493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2500 int
	var yyb2500 bool
	var yyhl2500 bool = l >= 0
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2504 := &x.TargetPort
		yym2505 := z.DecBinary()
		_ = yym2505
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2504) {
		} else if !yym2505 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2504)
		} else {
			z.DecFallback(yyv2504, false)
		}
	}
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2500++
		if yyhl2500 {
			yyb2500 = yyj2500 > l
		} else {
			yyb2500 = r.CheckBreak()
		}
		if yyb2500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2507 := z.EncBinary()
		_ = yym2507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2508 := !z.EncBinary()
			yy2arr2508 := z.EncBasicHandle().StructToArray
			var yyq2508 [5]bool
			_, _, _ = yysep2508, yyq2508, yy2arr2508
			const yyr2508 bool = false
			yyq2508[0] = x.Kind != ""
			yyq2508[1] = x.APIVersion != ""
			yyq2508[2] = true
			yyq2508[3] = true
			yyq2508[4] = true
			var yynn2508 int
			if yyr2508 || yy2arr2508 {
				r.EncodeArrayStart(5)
			} else {
				yynn2508 = 0
				for _, b := range yyq2508 {
					if b {
						yynn2508++
					}
				}
				r.EncodeMapStart(yynn2508)
				yynn2508 = 0
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[0] {
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[1] {
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2514 := z.EncBinary()
					_ = yym2514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[2] {
					yy2516 := &x.ObjectMeta
					yy2516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2517 := &x.ObjectMeta
					yy2517.CodecEncodeSelf(e)
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[3] {
					yy2519 := &x.Spec
					yy2519.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2520 := &x.Spec
					yy2520.CodecEncodeSelf(e)
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2508[4] {
					yy2522 := &x.Status
					yy2522.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2508[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2523 := &x.Status
					yy2523.CodecEncodeSelf(e)
				}
			}
			if yyr2508 || yy2arr2508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2524 := z.DecBinary()
	_ = yym2524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2525 := r.ContainerType()
		if yyct2525 == codecSelferValueTypeMap1234 {
			yyl2525 := r.ReadMapStart()
			if yyl2525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2525, d)
			}
		} else if yyct2525 == codecSelferValueTypeArray1234 {
			yyl2525 := r.ReadArrayStart()
			if yyl2525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2526Slc
	var yyhl2526 bool = l >= 0
	for yyj2526 := 0; ; yyj2526++ {
		if yyhl2526 {
			if yyj2526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2526Slc = r.DecodeBytes(yys2526Slc, true, true)
		yys2526 := string(yys2526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2529 := &x.ObjectMeta
				yyv2529.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2530 := &x.Spec
				yyv2530.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2531 := &x.Status
				yyv2531.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2526)
		} // end switch yys2526
	} // end for yyj2526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2532 int
	var yyb2532 bool
	var yyhl2532 bool = l >= 0
	yyj2532++
	if yyhl2532 {
		yyb2532 = yyj2532 > l
	} else {
		yyb2532 = r.CheckBreak()
	}
	if yyb2532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2532++
	if yyhl2532 {
		yyb2532 = yyj2532 > l
	} else {
		yyb2532 = r.CheckBreak()
	}
	if yyb2532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2532++
	if yyhl2532 {
		yyb2532 = yyj2532 > l
	} else {
		yyb2532 = r.CheckBreak()
	}
	if yyb2532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2535 := &x.ObjectMeta
		yyv2535.CodecDecodeSelf(d)
	}
	yyj2532++
	if yyhl2532 {
		yyb2532 = yyj2532 > l
	} else {
		yyb2532 = r.CheckBreak()
	}
	if yyb2532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2536 := &x.Spec
		yyv2536.CodecDecodeSelf(d)
	}
	yyj2532++
	if yyhl2532 {
		yyb2532 = yyj2532 > l
	} else {
		yyb2532 = r.CheckBreak()
	}
	if yyb2532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2537 := &x.Status
		yyv2537.CodecDecodeSelf(d)
	}
	for {
		yyj2532++
		if yyhl2532 {
			yyb2532 = yyj2532 > l
		} else {
			yyb2532 = r.CheckBreak()
		}
		if yyb2532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2538 := z.EncBinary()
		_ = yym2538
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2539 := !z.EncBinary()
			yy2arr2539 := z.EncBasicHandle().StructToArray
			var yyq2539 [5]bool
			_, _, _ = yysep2539, yyq2539, yy2arr2539
			const yyr2539 bool = false
			yyq2539[0] = x.Kind != ""
			yyq2539[1] = x.APIVersion != ""
			yyq2539[2] = true
			yyq2539[4] = len(x.ImagePullSecrets) != 0
			var yynn2539 int
			if yyr2539 || yy2arr2539 {
				r.EncodeArrayStart(5)
			} else {
				yynn2539 = 1
				for _, b := range yyq2539 {
					if b {
						yynn2539++
					}
				}
				r.EncodeMapStart(yynn2539)
				yynn2539 = 0
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[0] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[1] {
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[2] {
					yy2547 := &x.ObjectMeta
					yy2547.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2548 := &x.ObjectMeta
					yy2548.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2553 := z.EncBinary()
						_ = yym2553
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2554 := z.EncBinary()
						_ = yym2554
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2555 := z.DecBinary()
	_ = yym2555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2556 := r.ContainerType()
		if yyct2556 == codecSelferValueTypeMap1234 {
			yyl2556 := r.ReadMapStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2556, d)
			}
		} else if yyct2556 == codecSelferValueTypeArray1234 {
			yyl2556 := r.ReadArrayStart()
			if yyl2556 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2556, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2557Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2557Slc
	var yyhl2557 bool = l >= 0
	for yyj2557 := 0; ; yyj2557++ {
		if yyhl2557 {
			if yyj2557 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2557Slc = r.DecodeBytes(yys2557Slc, true, true)
		yys2557 := string(yys2557Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2557 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2560 := &x.ObjectMeta
				yyv2560.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2561 := &x.Secrets
				yym2562 := z.DecBinary()
				_ = yym2562
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2561), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2563 := &x.ImagePullSecrets
				yym2564 := z.DecBinary()
				_ = yym2564
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2563), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2557)
		} // end switch yys2557
	} // end for yyj2557
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2565 int
	var yyb2565 bool
	var yyhl2565 bool = l >= 0
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2568 := &x.ObjectMeta
		yyv2568.CodecDecodeSelf(d)
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2569 := &x.Secrets
		yym2570 := z.DecBinary()
		_ = yym2570
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2569), d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2571 := &x.ImagePullSecrets
		yym2572 := z.DecBinary()
		_ = yym2572
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2571), d)
		}
	}
	for {
		yyj2565++
		if yyhl2565 {
			yyb2565 = yyj2565 > l
		} else {
			yyb2565 = r.CheckBreak()
		}
		if yyb2565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2573 := z.EncBinary()
		_ = yym2573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2574 := !z.EncBinary()
			yy2arr2574 := z.EncBasicHandle().StructToArray
			var yyq2574 [4]bool
			_, _, _ = yysep2574, yyq2574, yy2arr2574
			const yyr2574 bool = false
			yyq2574[0] = x.Kind != ""
			yyq2574[1] = x.APIVersion != ""
			yyq2574[2] = true
			var yynn2574 int
			if yyr2574 || yy2arr2574 {
				r.EncodeArrayStart(4)
			} else {
				yynn2574 = 1
				for _, b := range yyq2574 {
					if b {
						yynn2574++
					}
				}
				r.EncodeMapStart(yynn2574)
				yynn2574 = 0
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[0] {
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[1] {
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2574[2] {
					yy2582 := &x.ListMeta
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2582) {
					} else {
						z.EncFallback(yy2582)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2574[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2584 := &x.ListMeta
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2584) {
					} else {
						z.EncFallback(yy2584)
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2574 || yy2arr2574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2589 := z.DecBinary()
	_ = yym2589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2590 := r.ContainerType()
		if yyct2590 == codecSelferValueTypeMap1234 {
			yyl2590 := r.ReadMapStart()
			if yyl2590 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2590, d)
			}
		} else if yyct2590 == codecSelferValueTypeArray1234 {
			yyl2590 := r.ReadArrayStart()
			if yyl2590 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2591Slc
	var yyhl2591 bool = l >= 0
	for yyj2591 := 0; ; yyj2591++ {
		if yyhl2591 {
			if yyj2591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2591Slc = r.DecodeBytes(yys2591Slc, true, true)
		yys2591 := string(yys2591Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2591 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2594 := &x.ListMeta
				yym2595 := z.DecBinary()
				_ = yym2595
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2594) {
				} else {
					z.DecFallback(yyv2594, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2596 := &x.Items
				yym2597 := z.DecBinary()
				_ = yym2597
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2596), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2591)
		} // end switch yys2591
	} // end for yyj2591
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2598 int
	var yyb2598 bool
	var yyhl2598 bool = l >= 0
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2601 := &x.ListMeta
		yym2602 := z.DecBinary()
		_ = yym2602
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2601) {
		} else {
			z.DecFallback(yyv2601, false)
		}
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2603 := &x.Items
		yym2604 := z.DecBinary()
		_ = yym2604
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2603), d)
		}
	}
	for {
		yyj2598++
		if yyhl2598 {
			yyb2598 = yyj2598 > l
		} else {
			yyb2598 = r.CheckBreak()
		}
		if yyb2598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2605 := z.EncBinary()
		_ = yym2605
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2606 := !z.EncBinary()
			yy2arr2606 := z.EncBasicHandle().StructToArray
			var yyq2606 [4]bool
			_, _, _ = yysep2606, yyq2606, yy2arr2606
			const yyr2606 bool = false
			yyq2606[0] = x.Kind != ""
			yyq2606[1] = x.APIVersion != ""
			yyq2606[2] = true
			var yynn2606 int
			if yyr2606 || yy2arr2606 {
				r.EncodeArrayStart(4)
			} else {
				yynn2606 = 1
				for _, b := range yyq2606 {
					if b {
						yynn2606++
					}
				}
				r.EncodeMapStart(yynn2606)
				yynn2606 = 0
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[0] {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2606[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[1] {
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2606[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2606[2] {
					yy2614 := &x.ObjectMeta
					yy2614.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2606[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2615 := &x.ObjectMeta
					yy2615.CodecEncodeSelf(e)
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2606 || yy2arr2606 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2619 := z.DecBinary()
	_ = yym2619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2620 := r.ContainerType()
		if yyct2620 == codecSelferValueTypeMap1234 {
			yyl2620 := r.ReadMapStart()
			if yyl2620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2620, d)
			}
		} else if yyct2620 == codecSelferValueTypeArray1234 {
			yyl2620 := r.ReadArrayStart()
			if yyl2620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2621Slc
	var yyhl2621 bool = l >= 0
	for yyj2621 := 0; ; yyj2621++ {
		if yyhl2621 {
			if yyj2621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2621Slc = r.DecodeBytes(yys2621Slc, true, true)
		yys2621 := string(yys2621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2621 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2624 := &x.ObjectMeta
				yyv2624.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2625 := &x.Subsets
				yym2626 := z.DecBinary()
				_ = yym2626
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2625), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2621)
		} // end switch yys2621
	} // end for yyj2621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2627 int
	var yyb2627 bool
	var yyhl2627 bool = l >= 0
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2630 := &x.ObjectMeta
		yyv2630.CodecDecodeSelf(d)
	}
	yyj2627++
	if yyhl2627 {
		yyb2627 = yyj2627 > l
	} else {
		yyb2627 = r.CheckBreak()
	}
	if yyb2627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2631 := &x.Subsets
		yym2632 := z.DecBinary()
		_ = yym2632
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2631), d)
		}
	}
	for {
		yyj2627++
		if yyhl2627 {
			yyb2627 = yyj2627 > l
		} else {
			yyb2627 = r.CheckBreak()
		}
		if yyb2627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2633 := z.EncBinary()
		_ = yym2633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2634 := !z.EncBinary()
			yy2arr2634 := z.EncBasicHandle().StructToArray
			var yyq2634 [3]bool
			_, _, _ = yysep2634, yyq2634, yy2arr2634
			const yyr2634 bool = false
			var yynn2634 int
			if yyr2634 || yy2arr2634 {
				r.EncodeArrayStart(3)
			} else {
				yynn2634 = 3
				for _, b := range yyq2634 {
					if b {
						yynn2634++
					}
				}
				r.EncodeMapStart(yynn2634)
				yynn2634 = 0
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2644 := z.DecBinary()
	_ = yym2644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2645 := r.ContainerType()
		if yyct2645 == codecSelferValueTypeMap1234 {
			yyl2645 := r.ReadMapStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2645, d)
			}
		} else if yyct2645 == codecSelferValueTypeArray1234 {
			yyl2645 := r.ReadArrayStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2646Slc
	var yyhl2646 bool = l >= 0
	for yyj2646 := 0; ; yyj2646++ {
		if yyhl2646 {
			if yyj2646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2646Slc = r.DecodeBytes(yys2646Slc, true, true)
		yys2646 := string(yys2646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2646 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2647 := &x.Addresses
				yym2648 := z.DecBinary()
				_ = yym2648
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2647), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2649 := &x.NotReadyAddresses
				yym2650 := z.DecBinary()
				_ = yym2650
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2649), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2651 := &x.Ports
				yym2652 := z.DecBinary()
				_ = yym2652
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2651), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2646)
		} // end switch yys2646
	} // end for yyj2646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2653 int
	var yyb2653 bool
	var yyhl2653 bool = l >= 0
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2654 := &x.Addresses
		yym2655 := z.DecBinary()
		_ = yym2655
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2654), d)
		}
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2656 := &x.NotReadyAddresses
		yym2657 := z.DecBinary()
		_ = yym2657
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2656), d)
		}
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2658 := &x.Ports
		yym2659 := z.DecBinary()
		_ = yym2659
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2658), d)
		}
	}
	for {
		yyj2653++
		if yyhl2653 {
			yyb2653 = yyj2653 > l
		} else {
			yyb2653 = r.CheckBreak()
		}
		if yyb2653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2660 := z.EncBinary()
		_ = yym2660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2661 := !z.EncBinary()
			yy2arr2661 := z.EncBasicHandle().StructToArray
			var yyq2661 [4]bool
			_, _, _ = yysep2661, yyq2661, yy2arr2661
			const yyr2661 bool = false
			yyq2661[1] = x.Hostname != ""
			yyq2661[2] = x.NodeName != nil
			var yynn2661 int
			if yyr2661 || yy2arr2661 {
				r.EncodeArrayStart(4)
			} else {
				yynn2661 = 2
				for _, b := range yyq2661 {
					if b {
						yynn2661++
					}
				}
				r.EncodeMapStart(yynn2661)
				yynn2661 = 0
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2663 := z.EncBinary()
				_ = yym2663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2664 := z.EncBinary()
				_ = yym2664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2661[1] {
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2661[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2669 := *x.NodeName
						yym2670 := z.EncBinary()
						_ = yym2670
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2669))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2671 := *x.NodeName
						yym2672 := z.EncBinary()
						_ = yym2672
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2671))
						}
					}
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2661 || yy2arr2661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2674 := z.DecBinary()
	_ = yym2674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2675 := r.ContainerType()
		if yyct2675 == codecSelferValueTypeMap1234 {
			yyl2675 := r.ReadMapStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2675, d)
			}
		} else if yyct2675 == codecSelferValueTypeArray1234 {
			yyl2675 := r.ReadArrayStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2676Slc
	var yyhl2676 bool = l >= 0
	for yyj2676 := 0; ; yyj2676++ {
		if yyhl2676 {
			if yyj2676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2676Slc = r.DecodeBytes(yys2676Slc, true, true)
		yys2676 := string(yys2676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2676 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2680 := z.DecBinary()
				_ = yym2680
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2676)
		} // end switch yys2676
	} // end for yyj2676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2682 int
	var yyb2682 bool
	var yyhl2682 bool = l >= 0
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2686 := z.DecBinary()
		_ = yym2686
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2682++
		if yyhl2682 {
			yyb2682 = yyj2682 > l
		} else {
			yyb2682 = r.CheckBreak()
		}
		if yyb2682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2688 := z.EncBinary()
		_ = yym2688
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2689 := !z.EncBinary()
			yy2arr2689 := z.EncBasicHandle().StructToArray
			var yyq2689 [3]bool
			_, _, _ = yysep2689, yyq2689, yy2arr2689
			const yyr2689 bool = false
			var yynn2689 int
			if yyr2689 || yy2arr2689 {
				r.EncodeArrayStart(3)
			} else {
				yynn2689 = 3
				for _, b := range yyq2689 {
					if b {
						yynn2689++
					}
				}
				r.EncodeMapStart(yynn2689)
				yynn2689 = 0
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2691 := z.EncBinary()
				_ = yym2691
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2692 := z.EncBinary()
				_ = yym2692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2694 := z.EncBinary()
				_ = yym2694
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2695 := z.EncBinary()
				_ = yym2695
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2689 || yy2arr2689 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2697 := z.DecBinary()
	_ = yym2697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2698 := r.ContainerType()
		if yyct2698 == codecSelferValueTypeMap1234 {
			yyl2698 := r.ReadMapStart()
			if yyl2698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2698, d)
			}
		} else if yyct2698 == codecSelferValueTypeArray1234 {
			yyl2698 := r.ReadArrayStart()
			if yyl2698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2699Slc
	var yyhl2699 bool = l >= 0
	for yyj2699 := 0; ; yyj2699++ {
		if yyhl2699 {
			if yyj2699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2699Slc = r.DecodeBytes(yys2699Slc, true, true)
		yys2699 := string(yys2699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2699 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2699)
		} // end switch yys2699
	} // end for yyj2699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2703 int
	var yyb2703 bool
	var yyhl2703 bool = l >= 0
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2703++
		if yyhl2703 {
			yyb2703 = yyj2703 > l
		} else {
			yyb2703 = r.CheckBreak()
		}
		if yyb2703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2707 := z.EncBinary()
		_ = yym2707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2708 := !z.EncBinary()
			yy2arr2708 := z.EncBasicHandle().StructToArray
			var yyq2708 [4]bool
			_, _, _ = yysep2708, yyq2708, yy2arr2708
			const yyr2708 bool = false
			yyq2708[0] = x.Kind != ""
			yyq2708[1] = x.APIVersion != ""
			yyq2708[2] = true
			var yynn2708 int
			if yyr2708 || yy2arr2708 {
				r.EncodeArrayStart(4)
			} else {
				yynn2708 = 1
				for _, b := range yyq2708 {
					if b {
						yynn2708++
					}
				}
				r.EncodeMapStart(yynn2708)
				yynn2708 = 0
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[0] {
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[1] {
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[2] {
					yy2716 := &x.ListMeta
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2716) {
					} else {
						z.EncFallback(yy2716)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2718 := &x.ListMeta
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2718) {
					} else {
						z.EncFallback(yy2718)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2723 := z.DecBinary()
	_ = yym2723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2724 := r.ContainerType()
		if yyct2724 == codecSelferValueTypeMap1234 {
			yyl2724 := r.ReadMapStart()
			if yyl2724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2724, d)
			}
		} else if yyct2724 == codecSelferValueTypeArray1234 {
			yyl2724 := r.ReadArrayStart()
			if yyl2724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2725Slc
	var yyhl2725 bool = l >= 0
	for yyj2725 := 0; ; yyj2725++ {
		if yyhl2725 {
			if yyj2725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2725Slc = r.DecodeBytes(yys2725Slc, true, true)
		yys2725 := string(yys2725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2728 := &x.ListMeta
				yym2729 := z.DecBinary()
				_ = yym2729
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2728) {
				} else {
					z.DecFallback(yyv2728, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2730 := &x.Items
				yym2731 := z.DecBinary()
				_ = yym2731
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2725)
		} // end switch yys2725
	} // end for yyj2725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2732 int
	var yyb2732 bool
	var yyhl2732 bool = l >= 0
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2735 := &x.ListMeta
		yym2736 := z.DecBinary()
		_ = yym2736
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2735) {
		} else {
			z.DecFallback(yyv2735, false)
		}
	}
	yyj2732++
	if yyhl2732 {
		yyb2732 = yyj2732 > l
	} else {
		yyb2732 = r.CheckBreak()
	}
	if yyb2732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2737 := &x.Items
		yym2738 := z.DecBinary()
		_ = yym2738
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2737), d)
		}
	}
	for {
		yyj2732++
		if yyhl2732 {
			yyb2732 = yyj2732 > l
		} else {
			yyb2732 = r.CheckBreak()
		}
		if yyb2732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2739 := z.EncBinary()
		_ = yym2739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2740 := !z.EncBinary()
			yy2arr2740 := z.EncBasicHandle().StructToArray
			var yyq2740 [4]bool
			_, _, _ = yysep2740, yyq2740, yy2arr2740
			const yyr2740 bool = false
			yyq2740[0] = x.PodCIDR != ""
			yyq2740[1] = x.ExternalID != ""
			yyq2740[2] = x.ProviderID != ""
			yyq2740[3] = x.Unschedulable != false
			var yynn2740 int
			if yyr2740 || yy2arr2740 {
				r.EncodeArrayStart(4)
			} else {
				yynn2740 = 0
				for _, b := range yyq2740 {
					if b {
						yynn2740++
					}
				}
				r.EncodeMapStart(yynn2740)
				yynn2740 = 0
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[0] {
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2740[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[1] {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2740[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[2] {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2740[3] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2740[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2740 || yy2arr2740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2753 := z.DecBinary()
	_ = yym2753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2754 := r.ContainerType()
		if yyct2754 == codecSelferValueTypeMap1234 {
			yyl2754 := r.ReadMapStart()
			if yyl2754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2754, d)
			}
		} else if yyct2754 == codecSelferValueTypeArray1234 {
			yyl2754 := r.ReadArrayStart()
			if yyl2754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2755Slc
	var yyhl2755 bool = l >= 0
	for yyj2755 := 0; ; yyj2755++ {
		if yyhl2755 {
			if yyj2755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2755Slc = r.DecodeBytes(yys2755Slc, true, true)
		yys2755 := string(yys2755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2755 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2755)
		} // end switch yys2755
	} // end for yyj2755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2760 int
	var yyb2760 bool
	var yyhl2760 bool = l >= 0
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2760++
		if yyhl2760 {
			yyb2760 = yyj2760 > l
		} else {
			yyb2760 = r.CheckBreak()
		}
		if yyb2760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2765 := z.EncBinary()
		_ = yym2765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2766 := !z.EncBinary()
			yy2arr2766 := z.EncBasicHandle().StructToArray
			var yyq2766 [1]bool
			_, _, _ = yysep2766, yyq2766, yy2arr2766
			const yyr2766 bool = false
			var yynn2766 int
			if yyr2766 || yy2arr2766 {
				r.EncodeArrayStart(1)
			} else {
				yynn2766 = 1
				for _, b := range yyq2766 {
					if b {
						yynn2766++
					}
				}
				r.EncodeMapStart(yynn2766)
				yynn2766 = 0
			}
			if yyr2766 || yy2arr2766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2768 := z.EncBinary()
				_ = yym2768
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2769 := z.EncBinary()
				_ = yym2769
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2766 || yy2arr2766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2770 := z.DecBinary()
	_ = yym2770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2771 := r.ContainerType()
		if yyct2771 == codecSelferValueTypeMap1234 {
			yyl2771 := r.ReadMapStart()
			if yyl2771 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2771, d)
			}
		} else if yyct2771 == codecSelferValueTypeArray1234 {
			yyl2771 := r.ReadArrayStart()
			if yyl2771 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2772Slc
	var yyhl2772 bool = l >= 0
	for yyj2772 := 0; ; yyj2772++ {
		if yyhl2772 {
			if yyj2772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2772Slc = r.DecodeBytes(yys2772Slc, true, true)
		yys2772 := string(yys2772Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2772 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2772)
		} // end switch yys2772
	} // end for yyj2772
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2774 int
	var yyb2774 bool
	var yyhl2774 bool = l >= 0
	yyj2774++
	if yyhl2774 {
		yyb2774 = yyj2774 > l
	} else {
		yyb2774 = r.CheckBreak()
	}
	if yyb2774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2774++
		if yyhl2774 {
			yyb2774 = yyj2774 > l
		} else {
			yyb2774 = r.CheckBreak()
		}
		if yyb2774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2776 := z.EncBinary()
		_ = yym2776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2777 := !z.EncBinary()
			yy2arr2777 := z.EncBasicHandle().StructToArray
			var yyq2777 [1]bool
			_, _, _ = yysep2777, yyq2777, yy2arr2777
			const yyr2777 bool = false
			yyq2777[0] = true
			var yynn2777 int
			if yyr2777 || yy2arr2777 {
				r.EncodeArrayStart(1)
			} else {
				yynn2777 = 0
				for _, b := range yyq2777 {
					if b {
						yynn2777++
					}
				}
				r.EncodeMapStart(yynn2777)
				yynn2777 = 0
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2777[0] {
					yy2779 := &x.KubeletEndpoint
					yy2779.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2777[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2780 := &x.KubeletEndpoint
					yy2780.CodecEncodeSelf(e)
				}
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2781 := z.DecBinary()
	_ = yym2781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2782 := r.ContainerType()
		if yyct2782 == codecSelferValueTypeMap1234 {
			yyl2782 := r.ReadMapStart()
			if yyl2782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2782, d)
			}
		} else if yyct2782 == codecSelferValueTypeArray1234 {
			yyl2782 := r.ReadArrayStart()
			if yyl2782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2783Slc
	var yyhl2783 bool = l >= 0
	for yyj2783 := 0; ; yyj2783++ {
		if yyhl2783 {
			if yyj2783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2783Slc = r.DecodeBytes(yys2783Slc, true, true)
		yys2783 := string(yys2783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2783 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2784 := &x.KubeletEndpoint
				yyv2784.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2783)
		} // end switch yys2783
	} // end for yyj2783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2785 int
	var yyb2785 bool
	var yyhl2785 bool = l >= 0
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2786 := &x.KubeletEndpoint
		yyv2786.CodecDecodeSelf(d)
	}
	for {
		yyj2785++
		if yyhl2785 {
			yyb2785 = yyj2785 > l
		} else {
			yyb2785 = r.CheckBreak()
		}
		if yyb2785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2787 := z.EncBinary()
		_ = yym2787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2788 := !z.EncBinary()
			yy2arr2788 := z.EncBasicHandle().StructToArray
			var yyq2788 [10]bool
			_, _, _ = yysep2788, yyq2788, yy2arr2788
			const yyr2788 bool = false
			var yynn2788 int
			if yyr2788 || yy2arr2788 {
				r.EncodeArrayStart(10)
			} else {
				yynn2788 = 10
				for _, b := range yyq2788 {
					if b {
						yynn2788++
					}
				}
				r.EncodeMapStart(yynn2788)
				yynn2788 = 0
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2793 := z.EncBinary()
				_ = yym2793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2796 := z.EncBinary()
				_ = yym2796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2797 := z.EncBinary()
				_ = yym2797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2799 := z.EncBinary()
				_ = yym2799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2800 := z.EncBinary()
				_ = yym2800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2802 := z.EncBinary()
				_ = yym2802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2803 := z.EncBinary()
				_ = yym2803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2805 := z.EncBinary()
				_ = yym2805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2806 := z.EncBinary()
				_ = yym2806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2808 := z.EncBinary()
				_ = yym2808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2809 := z.EncBinary()
				_ = yym2809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2811 := z.EncBinary()
				_ = yym2811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2817 := z.EncBinary()
				_ = yym2817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2788 || yy2arr2788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2819 := z.DecBinary()
	_ = yym2819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2820 := r.ContainerType()
		if yyct2820 == codecSelferValueTypeMap1234 {
			yyl2820 := r.ReadMapStart()
			if yyl2820 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2820, d)
			}
		} else if yyct2820 == codecSelferValueTypeArray1234 {
			yyl2820 := r.ReadArrayStart()
			if yyl2820 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2820, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2821Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2821Slc
	var yyhl2821 bool = l >= 0
	for yyj2821 := 0; ; yyj2821++ {
		if yyhl2821 {
			if yyj2821 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2821Slc = r.DecodeBytes(yys2821Slc, true, true)
		yys2821 := string(yys2821Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2821 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2821)
		} // end switch yys2821
	} // end for yyj2821
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2832 int
	var yyb2832 bool
	var yyhl2832 bool = l >= 0
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2832++
		if yyhl2832 {
			yyb2832 = yyj2832 > l
		} else {
			yyb2832 = r.CheckBreak()
		}
		if yyb2832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [10]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			yyq2844[0] = len(x.Capacity) != 0
			yyq2844[1] = len(x.Allocatable) != 0
			yyq2844[2] = x.Phase != ""
			yyq2844[3] = len(x.Conditions) != 0
			yyq2844[4] = len(x.Addresses) != 0
			yyq2844[5] = true
			yyq2844[6] = true
			yyq2844[7] = len(x.Images) != 0
			yyq2844[8] = len(x.VolumesInUse) != 0
			yyq2844[9] = len(x.VolumesAttached) != 0
			var yynn2844 int
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(10)
			} else {
				yynn2844 = 0
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
				yynn2844 = 0
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2849 := z.EncBinary()
						_ = yym2849
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2850 := z.EncBinary()
						_ = yym2850
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2852 := z.EncBinary()
						_ = yym2852
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2853 := z.EncBinary()
						_ = yym2853
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[5] {
					yy2855 := &x.DaemonEndpoints
					yy2855.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2856 := &x.DaemonEndpoints
					yy2856.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[6] {
					yy2858 := &x.NodeInfo
					yy2858.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2859 := &x.NodeInfo
					yy2859.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2861 := z.EncBinary()
						_ = yym2861
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2862 := z.EncBinary()
						_ = yym2862
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2864 := z.EncBinary()
						_ = yym2864
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2865 := z.EncBinary()
						_ = yym2865
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2867 := z.EncBinary()
						_ = yym2867
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2868 := z.EncBinary()
						_ = yym2868
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2869 := z.DecBinary()
	_ = yym2869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2870 := r.ContainerType()
		if yyct2870 == codecSelferValueTypeMap1234 {
			yyl2870 := r.ReadMapStart()
			if yyl2870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2870, d)
			}
		} else if yyct2870 == codecSelferValueTypeArray1234 {
			yyl2870 := r.ReadArrayStart()
			if yyl2870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2871Slc
	var yyhl2871 bool = l >= 0
	for yyj2871 := 0; ; yyj2871++ {
		if yyhl2871 {
			if yyj2871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2871Slc = r.DecodeBytes(yys2871Slc, true, true)
		yys2871 := string(yys2871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2871 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2872 := &x.Capacity
				yyv2872.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2873 := &x.Allocatable
				yyv2873.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2875 := &x.Conditions
				yym2876 := z.DecBinary()
				_ = yym2876
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2875), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2877 := &x.Addresses
				yym2878 := z.DecBinary()
				_ = yym2878
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2877), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2879 := &x.DaemonEndpoints
				yyv2879.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2880 := &x.NodeInfo
				yyv2880.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2881 := &x.Images
				yym2882 := z.DecBinary()
				_ = yym2882
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2881), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2883 := &x.VolumesInUse
				yym2884 := z.DecBinary()
				_ = yym2884
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2883), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2885 := &x.VolumesAttached
				yym2886 := z.DecBinary()
				_ = yym2886
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2885), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2871)
		} // end switch yys2871
	} // end for yyj2871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2887 int
	var yyb2887 bool
	var yyhl2887 bool = l >= 0
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2888 := &x.Capacity
		yyv2888.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2889 := &x.Allocatable
		yyv2889.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2891 := &x.Conditions
		yym2892 := z.DecBinary()
		_ = yym2892
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2891), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2893 := &x.Addresses
		yym2894 := z.DecBinary()
		_ = yym2894
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2893), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2895 := &x.DaemonEndpoints
		yyv2895.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2896 := &x.NodeInfo
		yyv2896.CodecDecodeSelf(d)
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2897 := &x.Images
		yym2898 := z.DecBinary()
		_ = yym2898
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2897), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2899 := &x.VolumesInUse
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2899), d)
		}
	}
	yyj2887++
	if yyhl2887 {
		yyb2887 = yyj2887 > l
	} else {
		yyb2887 = r.CheckBreak()
	}
	if yyb2887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2901 := &x.VolumesAttached
		yym2902 := z.DecBinary()
		_ = yym2902
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2901), d)
		}
	}
	for {
		yyj2887++
		if yyhl2887 {
			yyb2887 = yyj2887 > l
		} else {
			yyb2887 = r.CheckBreak()
		}
		if yyb2887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2903 := z.EncBinary()
	_ = yym2903
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2904 := z.DecBinary()
	_ = yym2904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2905 := z.EncBinary()
		_ = yym2905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2906 := !z.EncBinary()
			yy2arr2906 := z.EncBasicHandle().StructToArray
			var yyq2906 [2]bool
			_, _, _ = yysep2906, yyq2906, yy2arr2906
			const yyr2906 bool = false
			var yynn2906 int
			if yyr2906 || yy2arr2906 {
				r.EncodeArrayStart(2)
			} else {
				yynn2906 = 2
				for _, b := range yyq2906 {
					if b {
						yynn2906++
					}
				}
				r.EncodeMapStart(yynn2906)
				yynn2906 = 0
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2910 := z.EncBinary()
				_ = yym2910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2911 := z.DecBinary()
	_ = yym2911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2912 := r.ContainerType()
		if yyct2912 == codecSelferValueTypeMap1234 {
			yyl2912 := r.ReadMapStart()
			if yyl2912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2912, d)
			}
		} else if yyct2912 == codecSelferValueTypeArray1234 {
			yyl2912 := r.ReadArrayStart()
			if yyl2912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2913Slc
	var yyhl2913 bool = l >= 0
	for yyj2913 := 0; ; yyj2913++ {
		if yyhl2913 {
			if yyj2913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2913Slc = r.DecodeBytes(yys2913Slc, true, true)
		yys2913 := string(yys2913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2913 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2913)
		} // end switch yys2913
	} // end for yyj2913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2916 int
	var yyb2916 bool
	var yyhl2916 bool = l >= 0
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2916++
		if yyhl2916 {
			yyb2916 = yyj2916 > l
		} else {
			yyb2916 = r.CheckBreak()
		}
		if yyb2916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2919 := z.EncBinary()
		_ = yym2919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2920 := !z.EncBinary()
			yy2arr2920 := z.EncBasicHandle().StructToArray
			var yyq2920 [1]bool
			_, _, _ = yysep2920, yyq2920, yy2arr2920
			const yyr2920 bool = false
			yyq2920[0] = len(x.PreferAvoidPods) != 0
			var yynn2920 int
			if yyr2920 || yy2arr2920 {
				r.EncodeArrayStart(1)
			} else {
				yynn2920 = 0
				for _, b := range yyq2920 {
					if b {
						yynn2920++
					}
				}
				r.EncodeMapStart(yynn2920)
				yynn2920 = 0
			}
			if yyr2920 || yy2arr2920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2920[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2922 := z.EncBinary()
						_ = yym2922
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2920[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2923 := z.EncBinary()
						_ = yym2923
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2920 || yy2arr2920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2924 := z.DecBinary()
	_ = yym2924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2925 := r.ContainerType()
		if yyct2925 == codecSelferValueTypeMap1234 {
			yyl2925 := r.ReadMapStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2925, d)
			}
		} else if yyct2925 == codecSelferValueTypeArray1234 {
			yyl2925 := r.ReadArrayStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2926Slc
	var yyhl2926 bool = l >= 0
	for yyj2926 := 0; ; yyj2926++ {
		if yyhl2926 {
			if yyj2926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2926Slc = r.DecodeBytes(yys2926Slc, true, true)
		yys2926 := string(yys2926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2926 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2927 := &x.PreferAvoidPods
				yym2928 := z.DecBinary()
				_ = yym2928
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2927), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2926)
		} // end switch yys2926
	} // end for yyj2926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2929 int
	var yyb2929 bool
	var yyhl2929 bool = l >= 0
	yyj2929++
	if yyhl2929 {
		yyb2929 = yyj2929 > l
	} else {
		yyb2929 = r.CheckBreak()
	}
	if yyb2929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2930 := &x.PreferAvoidPods
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2930), d)
		}
	}
	for {
		yyj2929++
		if yyhl2929 {
			yyb2929 = yyj2929 > l
		} else {
			yyb2929 = r.CheckBreak()
		}
		if yyb2929 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2929-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2932 := z.EncBinary()
		_ = yym2932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2933 := !z.EncBinary()
			yy2arr2933 := z.EncBasicHandle().StructToArray
			var yyq2933 [4]bool
			_, _, _ = yysep2933, yyq2933, yy2arr2933
			const yyr2933 bool = false
			yyq2933[1] = true
			yyq2933[2] = x.Reason != ""
			yyq2933[3] = x.Message != ""
			var yynn2933 int
			if yyr2933 || yy2arr2933 {
				r.EncodeArrayStart(4)
			} else {
				yynn2933 = 1
				for _, b := range yyq2933 {
					if b {
						yynn2933++
					}
				}
				r.EncodeMapStart(yynn2933)
				yynn2933 = 0
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2935 := &x.PodSignature
				yy2935.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2936 := &x.PodSignature
				yy2936.CodecEncodeSelf(e)
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2933[1] {
					yy2938 := &x.EvictionTime
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2938) {
					} else if yym2939 {
						z.EncBinaryMarshal(yy2938)
					} else if !yym2939 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2938)
					} else {
						z.EncFallback(yy2938)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2940 := &x.EvictionTime
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2940) {
					} else if yym2941 {
						z.EncBinaryMarshal(yy2940)
					} else if !yym2941 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2940)
					} else {
						z.EncFallback(yy2940)
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2933[2] {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2933[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2933[3] {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2933[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2933 || yy2arr2933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2948 := z.DecBinary()
	_ = yym2948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2949 := r.ContainerType()
		if yyct2949 == codecSelferValueTypeMap1234 {
			yyl2949 := r.ReadMapStart()
			if yyl2949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2949, d)
			}
		} else if yyct2949 == codecSelferValueTypeArray1234 {
			yyl2949 := r.ReadArrayStart()
			if yyl2949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2950Slc
	var yyhl2950 bool = l >= 0
	for yyj2950 := 0; ; yyj2950++ {
		if yyhl2950 {
			if yyj2950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2950Slc = r.DecodeBytes(yys2950Slc, true, true)
		yys2950 := string(yys2950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2950 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2951 := &x.PodSignature
				yyv2951.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2952 := &x.EvictionTime
				yym2953 := z.DecBinary()
				_ = yym2953
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2952) {
				} else if yym2953 {
					z.DecBinaryUnmarshal(yyv2952)
				} else if !yym2953 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2952)
				} else {
					z.DecFallback(yyv2952, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2950)
		} // end switch yys2950
	} // end for yyj2950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2956 int
	var yyb2956 bool
	var yyhl2956 bool = l >= 0
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2957 := &x.PodSignature
		yyv2957.CodecDecodeSelf(d)
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2958 := &x.EvictionTime
		yym2959 := z.DecBinary()
		_ = yym2959
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2958) {
		} else if yym2959 {
			z.DecBinaryUnmarshal(yyv2958)
		} else if !yym2959 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2958)
		} else {
			z.DecFallback(yyv2958, false)
		}
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2956++
		if yyhl2956 {
			yyb2956 = yyj2956 > l
		} else {
			yyb2956 = r.CheckBreak()
		}
		if yyb2956 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2956-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2962 := z.EncBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2963 := !z.EncBinary()
			yy2arr2963 := z.EncBasicHandle().StructToArray
			var yyq2963 [1]bool
			_, _, _ = yysep2963, yyq2963, yy2arr2963
			const yyr2963 bool = false
			yyq2963[0] = x.PodController != nil
			var yynn2963 int
			if yyr2963 || yy2arr2963 {
				r.EncodeArrayStart(1)
			} else {
				yynn2963 = 0
				for _, b := range yyq2963 {
					if b {
						yynn2963++
					}
				}
				r.EncodeMapStart(yynn2963)
				yynn2963 = 0
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2965 := z.DecBinary()
	_ = yym2965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2966 := r.ContainerType()
		if yyct2966 == codecSelferValueTypeMap1234 {
			yyl2966 := r.ReadMapStart()
			if yyl2966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2966, d)
			}
		} else if yyct2966 == codecSelferValueTypeArray1234 {
			yyl2966 := r.ReadArrayStart()
			if yyl2966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2967Slc
	var yyhl2967 bool = l >= 0
	for yyj2967 := 0; ; yyj2967++ {
		if yyhl2967 {
			if yyj2967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2967Slc = r.DecodeBytes(yys2967Slc, true, true)
		yys2967 := string(yys2967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2967 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2967)
		} // end switch yys2967
	} // end for yyj2967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2969 int
	var yyb2969 bool
	var yyhl2969 bool = l >= 0
	yyj2969++
	if yyhl2969 {
		yyb2969 = yyj2969 > l
	} else {
		yyb2969 = r.CheckBreak()
	}
	if yyb2969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2969++
		if yyhl2969 {
			yyb2969 = yyj2969 > l
		} else {
			yyb2969 = r.CheckBreak()
		}
		if yyb2969 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2969-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2971 := z.EncBinary()
		_ = yym2971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2972 := !z.EncBinary()
			yy2arr2972 := z.EncBasicHandle().StructToArray
			var yyq2972 [2]bool
			_, _, _ = yysep2972, yyq2972, yy2arr2972
			const yyr2972 bool = false
			yyq2972[1] = x.SizeBytes != 0
			var yynn2972 int
			if yyr2972 || yy2arr2972 {
				r.EncodeArrayStart(2)
			} else {
				yynn2972 = 1
				for _, b := range yyq2972 {
					if b {
						yynn2972++
					}
				}
				r.EncodeMapStart(yynn2972)
				yynn2972 = 0
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[1] {
					yym2977 := z.EncBinary()
					_ = yym2977
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2979 := z.DecBinary()
	_ = yym2979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2980 := r.ContainerType()
		if yyct2980 == codecSelferValueTypeMap1234 {
			yyl2980 := r.ReadMapStart()
			if yyl2980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2980, d)
			}
		} else if yyct2980 == codecSelferValueTypeArray1234 {
			yyl2980 := r.ReadArrayStart()
			if yyl2980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2981Slc
	var yyhl2981 bool = l >= 0
	for yyj2981 := 0; ; yyj2981++ {
		if yyhl2981 {
			if yyj2981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2981Slc = r.DecodeBytes(yys2981Slc, true, true)
		yys2981 := string(yys2981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2981 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv2982 := &x.Names
				yym2983 := z.DecBinary()
				_ = yym2983
				if false {
				} else {
					z.F.DecSliceStringX(yyv2982, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2981)
		} // end switch yys2981
	} // end for yyj2981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2985 int
	var yyb2985 bool
	var yyhl2985 bool = l >= 0
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv2986 := &x.Names
		yym2987 := z.DecBinary()
		_ = yym2987
		if false {
		} else {
			z.F.DecSliceStringX(yyv2986, false, d)
		}
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj2985++
		if yyhl2985 {
			yyb2985 = yyj2985 > l
		} else {
			yyb2985 = r.CheckBreak()
		}
		if yyb2985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2989 := z.EncBinary()
	_ = yym2989
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2990 := z.DecBinary()
	_ = yym2990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2991 := z.EncBinary()
	_ = yym2991
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2992 := z.DecBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2993 := z.EncBinary()
		_ = yym2993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2994 := !z.EncBinary()
			yy2arr2994 := z.EncBasicHandle().StructToArray
			var yyq2994 [6]bool
			_, _, _ = yysep2994, yyq2994, yy2arr2994
			const yyr2994 bool = false
			yyq2994[2] = true
			yyq2994[3] = true
			yyq2994[4] = x.Reason != ""
			yyq2994[5] = x.Message != ""
			var yynn2994 int
			if yyr2994 || yy2arr2994 {
				r.EncodeArrayStart(6)
			} else {
				yynn2994 = 2
				for _, b := range yyq2994 {
					if b {
						yynn2994++
					}
				}
				r.EncodeMapStart(yynn2994)
				yynn2994 = 0
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[2] {
					yy2998 := &x.LastHeartbeatTime
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2998) {
					} else if yym2999 {
						z.EncBinaryMarshal(yy2998)
					} else if !yym2999 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2998)
					} else {
						z.EncFallback(yy2998)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2994[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3000 := &x.LastHeartbeatTime
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3000) {
					} else if yym3001 {
						z.EncBinaryMarshal(yy3000)
					} else if !yym3001 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3000)
					} else {
						z.EncFallback(yy3000)
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[3] {
					yy3003 := &x.LastTransitionTime
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3003) {
					} else if yym3004 {
						z.EncBinaryMarshal(yy3003)
					} else if !yym3004 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3003)
					} else {
						z.EncFallback(yy3003)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2994[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3005 := &x.LastTransitionTime
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3005) {
					} else if yym3006 {
						z.EncBinaryMarshal(yy3005)
					} else if !yym3006 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3005)
					} else {
						z.EncFallback(yy3005)
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[4] {
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2994[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2994[5] {
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2994[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3013 := z.DecBinary()
	_ = yym3013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3014 := r.ContainerType()
		if yyct3014 == codecSelferValueTypeMap1234 {
			yyl3014 := r.ReadMapStart()
			if yyl3014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3014, d)
			}
		} else if yyct3014 == codecSelferValueTypeArray1234 {
			yyl3014 := r.ReadArrayStart()
			if yyl3014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3015Slc
	var yyhl3015 bool = l >= 0
	for yyj3015 := 0; ; yyj3015++ {
		if yyhl3015 {
			if yyj3015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3015Slc = r.DecodeBytes(yys3015Slc, true, true)
		yys3015 := string(yys3015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3015 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3018 := &x.LastHeartbeatTime
				yym3019 := z.DecBinary()
				_ = yym3019
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3018) {
				} else if yym3019 {
					z.DecBinaryUnmarshal(yyv3018)
				} else if !yym3019 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3018)
				} else {
					z.DecFallback(yyv3018, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3020 := &x.LastTransitionTime
				yym3021 := z.DecBinary()
				_ = yym3021
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3020) {
				} else if yym3021 {
					z.DecBinaryUnmarshal(yyv3020)
				} else if !yym3021 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3020)
				} else {
					z.DecFallback(yyv3020, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3015)
		} // end switch yys3015
	} // end for yyj3015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3024 int
	var yyb3024 bool
	var yyhl3024 bool = l >= 0
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3027 := &x.LastHeartbeatTime
		yym3028 := z.DecBinary()
		_ = yym3028
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3027) {
		} else if yym3028 {
			z.DecBinaryUnmarshal(yyv3027)
		} else if !yym3028 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3027)
		} else {
			z.DecFallback(yyv3027, false)
		}
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3029 := &x.LastTransitionTime
		yym3030 := z.DecBinary()
		_ = yym3030
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3029) {
		} else if yym3030 {
			z.DecBinaryUnmarshal(yyv3029)
		} else if !yym3030 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3029)
		} else {
			z.DecFallback(yyv3029, false)
		}
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3024++
		if yyhl3024 {
			yyb3024 = yyj3024 > l
		} else {
			yyb3024 = r.CheckBreak()
		}
		if yyb3024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3033 := z.EncBinary()
	_ = yym3033
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3034 := z.DecBinary()
	_ = yym3034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3035 := z.EncBinary()
		_ = yym3035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3036 := !z.EncBinary()
			yy2arr3036 := z.EncBasicHandle().StructToArray
			var yyq3036 [2]bool
			_, _, _ = yysep3036, yyq3036, yy2arr3036
			const yyr3036 bool = false
			var yynn3036 int
			if yyr3036 || yy2arr3036 {
				r.EncodeArrayStart(2)
			} else {
				yynn3036 = 2
				for _, b := range yyq3036 {
					if b {
						yynn3036++
					}
				}
				r.EncodeMapStart(yynn3036)
				yynn3036 = 0
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3039 := z.EncBinary()
				_ = yym3039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3040 := z.EncBinary()
				_ = yym3040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3036 || yy2arr3036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3041 := z.DecBinary()
	_ = yym3041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3042 := r.ContainerType()
		if yyct3042 == codecSelferValueTypeMap1234 {
			yyl3042 := r.ReadMapStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3042, d)
			}
		} else if yyct3042 == codecSelferValueTypeArray1234 {
			yyl3042 := r.ReadArrayStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3043Slc
	var yyhl3043 bool = l >= 0
	for yyj3043 := 0; ; yyj3043++ {
		if yyhl3043 {
			if yyj3043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3043Slc = r.DecodeBytes(yys3043Slc, true, true)
		yys3043 := string(yys3043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3043 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3043)
		} // end switch yys3043
	} // end for yyj3043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3046 int
	var yyb3046 bool
	var yyhl3046 bool = l >= 0
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3046++
	if yyhl3046 {
		yyb3046 = yyj3046 > l
	} else {
		yyb3046 = r.CheckBreak()
	}
	if yyb3046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3046++
		if yyhl3046 {
			yyb3046 = yyj3046 > l
		} else {
			yyb3046 = r.CheckBreak()
		}
		if yyb3046 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3046-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3049 := z.EncBinary()
		_ = yym3049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3050 := !z.EncBinary()
			yy2arr3050 := z.EncBasicHandle().StructToArray
			var yyq3050 [1]bool
			_, _, _ = yysep3050, yyq3050, yy2arr3050
			const yyr3050 bool = false
			yyq3050[0] = len(x.Capacity) != 0
			var yynn3050 int
			if yyr3050 || yy2arr3050 {
				r.EncodeArrayStart(1)
			} else {
				yynn3050 = 0
				for _, b := range yyq3050 {
					if b {
						yynn3050++
					}
				}
				r.EncodeMapStart(yynn3050)
				yynn3050 = 0
			}
			if yyr3050 || yy2arr3050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3050[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3050[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3050 || yy2arr3050 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3052 := z.DecBinary()
	_ = yym3052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3053 := r.ContainerType()
		if yyct3053 == codecSelferValueTypeMap1234 {
			yyl3053 := r.ReadMapStart()
			if yyl3053 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3053, d)
			}
		} else if yyct3053 == codecSelferValueTypeArray1234 {
			yyl3053 := r.ReadArrayStart()
			if yyl3053 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3054Slc
	var yyhl3054 bool = l >= 0
	for yyj3054 := 0; ; yyj3054++ {
		if yyhl3054 {
			if yyj3054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3054Slc = r.DecodeBytes(yys3054Slc, true, true)
		yys3054 := string(yys3054Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3054 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3055 := &x.Capacity
				yyv3055.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3054)
		} // end switch yys3054
	} // end for yyj3054
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3056 int
	var yyb3056 bool
	var yyhl3056 bool = l >= 0
	yyj3056++
	if yyhl3056 {
		yyb3056 = yyj3056 > l
	} else {
		yyb3056 = r.CheckBreak()
	}
	if yyb3056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3057 := &x.Capacity
		yyv3057.CodecDecodeSelf(d)
	}
	for {
		yyj3056++
		if yyhl3056 {
			yyb3056 = yyj3056 > l
		} else {
			yyb3056 = r.CheckBreak()
		}
		if yyb3056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3058 := z.EncBinary()
	_ = yym3058
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3059 := z.DecBinary()
	_ = yym3059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3060 := z.EncBinary()
		_ = yym3060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3061 := z.DecBinary()
	_ = yym3061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3062 := z.EncBinary()
		_ = yym3062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3063 := !z.EncBinary()
			yy2arr3063 := z.EncBasicHandle().StructToArray
			var yyq3063 [5]bool
			_, _, _ = yysep3063, yyq3063, yy2arr3063
			const yyr3063 bool = false
			yyq3063[0] = x.Kind != ""
			yyq3063[1] = x.APIVersion != ""
			yyq3063[2] = true
			yyq3063[3] = true
			yyq3063[4] = true
			var yynn3063 int
			if yyr3063 || yy2arr3063 {
				r.EncodeArrayStart(5)
			} else {
				yynn3063 = 0
				for _, b := range yyq3063 {
					if b {
						yynn3063++
					}
				}
				r.EncodeMapStart(yynn3063)
				yynn3063 = 0
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[0] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[1] {
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[2] {
					yy3071 := &x.ObjectMeta
					yy3071.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3072 := &x.ObjectMeta
					yy3072.CodecEncodeSelf(e)
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[3] {
					yy3074 := &x.Spec
					yy3074.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3063[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3075 := &x.Spec
					yy3075.CodecEncodeSelf(e)
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[4] {
					yy3077 := &x.Status
					yy3077.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3063[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3078 := &x.Status
					yy3078.CodecEncodeSelf(e)
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3079 := z.DecBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3080 := r.ContainerType()
		if yyct3080 == codecSelferValueTypeMap1234 {
			yyl3080 := r.ReadMapStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3080, d)
			}
		} else if yyct3080 == codecSelferValueTypeArray1234 {
			yyl3080 := r.ReadArrayStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3081Slc
	var yyhl3081 bool = l >= 0
	for yyj3081 := 0; ; yyj3081++ {
		if yyhl3081 {
			if yyj3081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3081Slc = r.DecodeBytes(yys3081Slc, true, true)
		yys3081 := string(yys3081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3081 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3084 := &x.ObjectMeta
				yyv3084.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3085 := &x.Spec
				yyv3085.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3086 := &x.Status
				yyv3086.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3081)
		} // end switch yys3081
	} // end for yyj3081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3087 int
	var yyb3087 bool
	var yyhl3087 bool = l >= 0
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3090 := &x.ObjectMeta
		yyv3090.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3091 := &x.Spec
		yyv3091.CodecDecodeSelf(d)
	}
	yyj3087++
	if yyhl3087 {
		yyb3087 = yyj3087 > l
	} else {
		yyb3087 = r.CheckBreak()
	}
	if yyb3087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3092 := &x.Status
		yyv3092.CodecDecodeSelf(d)
	}
	for {
		yyj3087++
		if yyhl3087 {
			yyb3087 = yyj3087 > l
		} else {
			yyb3087 = r.CheckBreak()
		}
		if yyb3087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3093 := z.EncBinary()
		_ = yym3093
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3094 := !z.EncBinary()
			yy2arr3094 := z.EncBasicHandle().StructToArray
			var yyq3094 [4]bool
			_, _, _ = yysep3094, yyq3094, yy2arr3094
			const yyr3094 bool = false
			yyq3094[0] = x.Kind != ""
			yyq3094[1] = x.APIVersion != ""
			yyq3094[2] = true
			var yynn3094 int
			if yyr3094 || yy2arr3094 {
				r.EncodeArrayStart(4)
			} else {
				yynn3094 = 1
				for _, b := range yyq3094 {
					if b {
						yynn3094++
					}
				}
				r.EncodeMapStart(yynn3094)
				yynn3094 = 0
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3094[0] {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3094[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3094[1] {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3094[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3094[2] {
					yy3102 := &x.ListMeta
					yym3103 := z.EncBinary()
					_ = yym3103
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3102) {
					} else {
						z.EncFallback(yy3102)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3094[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3104 := &x.ListMeta
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3104) {
					} else {
						z.EncFallback(yy3104)
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3094 || yy2arr3094 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3109 := z.DecBinary()
	_ = yym3109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3110 := r.ContainerType()
		if yyct3110 == codecSelferValueTypeMap1234 {
			yyl3110 := r.ReadMapStart()
			if yyl3110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3110, d)
			}
		} else if yyct3110 == codecSelferValueTypeArray1234 {
			yyl3110 := r.ReadArrayStart()
			if yyl3110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3111Slc
	var yyhl3111 bool = l >= 0
	for yyj3111 := 0; ; yyj3111++ {
		if yyhl3111 {
			if yyj3111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3111Slc = r.DecodeBytes(yys3111Slc, true, true)
		yys3111 := string(yys3111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3114 := &x.ListMeta
				yym3115 := z.DecBinary()
				_ = yym3115
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3114) {
				} else {
					z.DecFallback(yyv3114, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3116 := &x.Items
				yym3117 := z.DecBinary()
				_ = yym3117
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3116), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3111)
		} // end switch yys3111
	} // end for yyj3111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3118 int
	var yyb3118 bool
	var yyhl3118 bool = l >= 0
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3121 := &x.ListMeta
		yym3122 := z.DecBinary()
		_ = yym3122
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3121) {
		} else {
			z.DecFallback(yyv3121, false)
		}
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3123 := &x.Items
		yym3124 := z.DecBinary()
		_ = yym3124
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3123), d)
		}
	}
	for {
		yyj3118++
		if yyhl3118 {
			yyb3118 = yyj3118 > l
		} else {
			yyb3118 = r.CheckBreak()
		}
		if yyb3118 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3118-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3125 := z.EncBinary()
		_ = yym3125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3126 := !z.EncBinary()
			yy2arr3126 := z.EncBasicHandle().StructToArray
			var yyq3126 [1]bool
			_, _, _ = yysep3126, yyq3126, yy2arr3126
			const yyr3126 bool = false
			var yynn3126 int
			if yyr3126 || yy2arr3126 {
				r.EncodeArrayStart(1)
			} else {
				yynn3126 = 1
				for _, b := range yyq3126 {
					if b {
						yynn3126++
					}
				}
				r.EncodeMapStart(yynn3126)
				yynn3126 = 0
			}
			if yyr3126 || yy2arr3126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3126 || yy2arr3126 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3130 := z.DecBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3131 := r.ContainerType()
		if yyct3131 == codecSelferValueTypeMap1234 {
			yyl3131 := r.ReadMapStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3131, d)
			}
		} else if yyct3131 == codecSelferValueTypeArray1234 {
			yyl3131 := r.ReadArrayStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3132Slc
	var yyhl3132 bool = l >= 0
	for yyj3132 := 0; ; yyj3132++ {
		if yyhl3132 {
			if yyj3132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3132Slc = r.DecodeBytes(yys3132Slc, true, true)
		yys3132 := string(yys3132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3132 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3133 := &x.Finalizers
				yym3134 := z.DecBinary()
				_ = yym3134
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3133), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3132)
		} // end switch yys3132
	} // end for yyj3132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3135 int
	var yyb3135 bool
	var yyhl3135 bool = l >= 0
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3136 := &x.Finalizers
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3136), d)
		}
	}
	for {
		yyj3135++
		if yyhl3135 {
			yyb3135 = yyj3135 > l
		} else {
			yyb3135 = r.CheckBreak()
		}
		if yyb3135 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3135-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3138 := z.EncBinary()
	_ = yym3138
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3139 := z.DecBinary()
	_ = yym3139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3140 := z.EncBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3141 := !z.EncBinary()
			yy2arr3141 := z.EncBasicHandle().StructToArray
			var yyq3141 [1]bool
			_, _, _ = yysep3141, yyq3141, yy2arr3141
			const yyr3141 bool = false
			yyq3141[0] = x.Phase != ""
			var yynn3141 int
			if yyr3141 || yy2arr3141 {
				r.EncodeArrayStart(1)
			} else {
				yynn3141 = 0
				for _, b := range yyq3141 {
					if b {
						yynn3141++
					}
				}
				r.EncodeMapStart(yynn3141)
				yynn3141 = 0
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3143 := z.DecBinary()
	_ = yym3143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3144 := r.ContainerType()
		if yyct3144 == codecSelferValueTypeMap1234 {
			yyl3144 := r.ReadMapStart()
			if yyl3144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3144, d)
			}
		} else if yyct3144 == codecSelferValueTypeArray1234 {
			yyl3144 := r.ReadArrayStart()
			if yyl3144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3145Slc
	var yyhl3145 bool = l >= 0
	for yyj3145 := 0; ; yyj3145++ {
		if yyhl3145 {
			if yyj3145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3145Slc = r.DecodeBytes(yys3145Slc, true, true)
		yys3145 := string(yys3145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3145 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3145)
		} // end switch yys3145
	} // end for yyj3145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3147 int
	var yyb3147 bool
	var yyhl3147 bool = l >= 0
	yyj3147++
	if yyhl3147 {
		yyb3147 = yyj3147 > l
	} else {
		yyb3147 = r.CheckBreak()
	}
	if yyb3147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3147++
		if yyhl3147 {
			yyb3147 = yyj3147 > l
		} else {
			yyb3147 = r.CheckBreak()
		}
		if yyb3147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3149 := z.EncBinary()
	_ = yym3149
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3150 := z.DecBinary()
	_ = yym3150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3151 := z.EncBinary()
		_ = yym3151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3152 := !z.EncBinary()
			yy2arr3152 := z.EncBasicHandle().StructToArray
			var yyq3152 [5]bool
			_, _, _ = yysep3152, yyq3152, yy2arr3152
			const yyr3152 bool = false
			yyq3152[0] = x.Kind != ""
			yyq3152[1] = x.APIVersion != ""
			yyq3152[2] = true
			yyq3152[3] = true
			yyq3152[4] = true
			var yynn3152 int
			if yyr3152 || yy2arr3152 {
				r.EncodeArrayStart(5)
			} else {
				yynn3152 = 0
				for _, b := range yyq3152 {
					if b {
						yynn3152++
					}
				}
				r.EncodeMapStart(yynn3152)
				yynn3152 = 0
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[0] {
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3152[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[1] {
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3152[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[2] {
					yy3160 := &x.ObjectMeta
					yy3160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3152[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3161 := &x.ObjectMeta
					yy3161.CodecEncodeSelf(e)
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[3] {
					yy3163 := &x.Spec
					yy3163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3152[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3164 := &x.Spec
					yy3164.CodecEncodeSelf(e)
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[4] {
					yy3166 := &x.Status
					yy3166.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3152[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3167 := &x.Status
					yy3167.CodecEncodeSelf(e)
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3168 := z.DecBinary()
	_ = yym3168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3169 := r.ContainerType()
		if yyct3169 == codecSelferValueTypeMap1234 {
			yyl3169 := r.ReadMapStart()
			if yyl3169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3169, d)
			}
		} else if yyct3169 == codecSelferValueTypeArray1234 {
			yyl3169 := r.ReadArrayStart()
			if yyl3169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3170Slc
	var yyhl3170 bool = l >= 0
	for yyj3170 := 0; ; yyj3170++ {
		if yyhl3170 {
			if yyj3170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3170Slc = r.DecodeBytes(yys3170Slc, true, true)
		yys3170 := string(yys3170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3170 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3173 := &x.ObjectMeta
				yyv3173.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3174 := &x.Spec
				yyv3174.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3175 := &x.Status
				yyv3175.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3170)
		} // end switch yys3170
	} // end for yyj3170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3176 int
	var yyb3176 bool
	var yyhl3176 bool = l >= 0
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3179 := &x.ObjectMeta
		yyv3179.CodecDecodeSelf(d)
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3180 := &x.Spec
		yyv3180.CodecDecodeSelf(d)
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3181 := &x.Status
		yyv3181.CodecDecodeSelf(d)
	}
	for {
		yyj3176++
		if yyhl3176 {
			yyb3176 = yyj3176 > l
		} else {
			yyb3176 = r.CheckBreak()
		}
		if yyb3176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3182 := z.EncBinary()
		_ = yym3182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3183 := !z.EncBinary()
			yy2arr3183 := z.EncBasicHandle().StructToArray
			var yyq3183 [4]bool
			_, _, _ = yysep3183, yyq3183, yy2arr3183
			const yyr3183 bool = false
			yyq3183[0] = x.Kind != ""
			yyq3183[1] = x.APIVersion != ""
			yyq3183[2] = true
			var yynn3183 int
			if yyr3183 || yy2arr3183 {
				r.EncodeArrayStart(4)
			} else {
				yynn3183 = 1
				for _, b := range yyq3183 {
					if b {
						yynn3183++
					}
				}
				r.EncodeMapStart(yynn3183)
				yynn3183 = 0
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3183[0] {
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3183[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3183[1] {
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3183[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3183[2] {
					yy3191 := &x.ListMeta
					yym3192 := z.EncBinary()
					_ = yym3192
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3191) {
					} else {
						z.EncFallback(yy3191)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3183[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3193 := &x.ListMeta
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3193) {
					} else {
						z.EncFallback(yy3193)
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3198 := z.DecBinary()
	_ = yym3198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3199 := r.ContainerType()
		if yyct3199 == codecSelferValueTypeMap1234 {
			yyl3199 := r.ReadMapStart()
			if yyl3199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3199, d)
			}
		} else if yyct3199 == codecSelferValueTypeArray1234 {
			yyl3199 := r.ReadArrayStart()
			if yyl3199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3200Slc
	var yyhl3200 bool = l >= 0
	for yyj3200 := 0; ; yyj3200++ {
		if yyhl3200 {
			if yyj3200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3200Slc = r.DecodeBytes(yys3200Slc, true, true)
		yys3200 := string(yys3200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3203 := &x.ListMeta
				yym3204 := z.DecBinary()
				_ = yym3204
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3203) {
				} else {
					z.DecFallback(yyv3203, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3205 := &x.Items
				yym3206 := z.DecBinary()
				_ = yym3206
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3205), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3200)
		} // end switch yys3200
	} // end for yyj3200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3207 int
	var yyb3207 bool
	var yyhl3207 bool = l >= 0
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3210 := &x.ListMeta
		yym3211 := z.DecBinary()
		_ = yym3211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3210) {
		} else {
			z.DecFallback(yyv3210, false)
		}
	}
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3212 := &x.Items
		yym3213 := z.DecBinary()
		_ = yym3213
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3212), d)
		}
	}
	for {
		yyj3207++
		if yyhl3207 {
			yyb3207 = yyj3207 > l
		} else {
			yyb3207 = r.CheckBreak()
		}
		if yyb3207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3214 := z.EncBinary()
		_ = yym3214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3215 := !z.EncBinary()
			yy2arr3215 := z.EncBasicHandle().StructToArray
			var yyq3215 [4]bool
			_, _, _ = yysep3215, yyq3215, yy2arr3215
			const yyr3215 bool = false
			yyq3215[0] = x.Kind != ""
			yyq3215[1] = x.APIVersion != ""
			yyq3215[2] = true
			var yynn3215 int
			if yyr3215 || yy2arr3215 {
				r.EncodeArrayStart(4)
			} else {
				yynn3215 = 1
				for _, b := range yyq3215 {
					if b {
						yynn3215++
					}
				}
				r.EncodeMapStart(yynn3215)
				yynn3215 = 0
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3215[0] {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3215[1] {
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3215[2] {
					yy3223 := &x.ObjectMeta
					yy3223.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3224 := &x.ObjectMeta
					yy3224.CodecEncodeSelf(e)
				}
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3226 := &x.Target
				yy3226.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3227 := &x.Target
				yy3227.CodecEncodeSelf(e)
			}
			if yyr3215 || yy2arr3215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3228 := z.DecBinary()
	_ = yym3228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3229 := r.ContainerType()
		if yyct3229 == codecSelferValueTypeMap1234 {
			yyl3229 := r.ReadMapStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3229, d)
			}
		} else if yyct3229 == codecSelferValueTypeArray1234 {
			yyl3229 := r.ReadArrayStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3230Slc
	var yyhl3230 bool = l >= 0
	for yyj3230 := 0; ; yyj3230++ {
		if yyhl3230 {
			if yyj3230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3230Slc = r.DecodeBytes(yys3230Slc, true, true)
		yys3230 := string(yys3230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3230 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3233 := &x.ObjectMeta
				yyv3233.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3234 := &x.Target
				yyv3234.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3230)
		} // end switch yys3230
	} // end for yyj3230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3235 int
	var yyb3235 bool
	var yyhl3235 bool = l >= 0
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3238 := &x.ObjectMeta
		yyv3238.CodecDecodeSelf(d)
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3239 := &x.Target
		yyv3239.CodecDecodeSelf(d)
	}
	for {
		yyj3235++
		if yyhl3235 {
			yyb3235 = yyj3235 > l
		} else {
			yyb3235 = r.CheckBreak()
		}
		if yyb3235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3240 := z.EncBinary()
		_ = yym3240
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3241 := !z.EncBinary()
			yy2arr3241 := z.EncBasicHandle().StructToArray
			var yyq3241 [1]bool
			_, _, _ = yysep3241, yyq3241, yy2arr3241
			const yyr3241 bool = false
			yyq3241[0] = x.UID != nil
			var yynn3241 int
			if yyr3241 || yy2arr3241 {
				r.EncodeArrayStart(1)
			} else {
				yynn3241 = 0
				for _, b := range yyq3241 {
					if b {
						yynn3241++
					}
				}
				r.EncodeMapStart(yynn3241)
				yynn3241 = 0
			}
			if yyr3241 || yy2arr3241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3241[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3243 := *x.UID
						yym3244 := z.EncBinary()
						_ = yym3244
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3243) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3243))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3241[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3245 := *x.UID
						yym3246 := z.EncBinary()
						_ = yym3246
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3245) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3245))
						}
					}
				}
			}
			if yyr3241 || yy2arr3241 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3247 := z.DecBinary()
	_ = yym3247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3248 := r.ContainerType()
		if yyct3248 == codecSelferValueTypeMap1234 {
			yyl3248 := r.ReadMapStart()
			if yyl3248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3248, d)
			}
		} else if yyct3248 == codecSelferValueTypeArray1234 {
			yyl3248 := r.ReadArrayStart()
			if yyl3248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3249Slc
	var yyhl3249 bool = l >= 0
	for yyj3249 := 0; ; yyj3249++ {
		if yyhl3249 {
			if yyj3249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3249Slc = r.DecodeBytes(yys3249Slc, true, true)
		yys3249 := string(yys3249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3249 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3251 := z.DecBinary()
				_ = yym3251
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3249)
		} // end switch yys3249
	} // end for yyj3249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3252 int
	var yyb3252 bool
	var yyhl3252 bool = l >= 0
	yyj3252++
	if yyhl3252 {
		yyb3252 = yyj3252 > l
	} else {
		yyb3252 = r.CheckBreak()
	}
	if yyb3252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3254 := z.DecBinary()
		_ = yym3254
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3252++
		if yyhl3252 {
			yyb3252 = yyj3252 > l
		} else {
			yyb3252 = r.CheckBreak()
		}
		if yyb3252 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3252-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3255 := z.EncBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3256 := !z.EncBinary()
			yy2arr3256 := z.EncBasicHandle().StructToArray
			var yyq3256 [5]bool
			_, _, _ = yysep3256, yyq3256, yy2arr3256
			const yyr3256 bool = false
			yyq3256[0] = x.Kind != ""
			yyq3256[1] = x.APIVersion != ""
			yyq3256[2] = x.GracePeriodSeconds != nil
			yyq3256[3] = x.Preconditions != nil
			yyq3256[4] = x.OrphanDependents != nil
			var yynn3256 int
			if yyr3256 || yy2arr3256 {
				r.EncodeArrayStart(5)
			} else {
				yynn3256 = 0
				for _, b := range yyq3256 {
					if b {
						yynn3256++
					}
				}
				r.EncodeMapStart(yynn3256)
				yynn3256 = 0
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[0] {
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[1] {
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3264 := *x.GracePeriodSeconds
						yym3265 := z.EncBinary()
						_ = yym3265
						if false {
						} else {
							r.EncodeInt(int64(yy3264))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3266 := *x.GracePeriodSeconds
						yym3267 := z.EncBinary()
						_ = yym3267
						if false {
						} else {
							r.EncodeInt(int64(yy3266))
						}
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3256[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3256[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3270 := *x.OrphanDependents
						yym3271 := z.EncBinary()
						_ = yym3271
						if false {
						} else {
							r.EncodeBool(bool(yy3270))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3272 := *x.OrphanDependents
						yym3273 := z.EncBinary()
						_ = yym3273
						if false {
						} else {
							r.EncodeBool(bool(yy3272))
						}
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3274 := z.DecBinary()
	_ = yym3274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3275 := r.ContainerType()
		if yyct3275 == codecSelferValueTypeMap1234 {
			yyl3275 := r.ReadMapStart()
			if yyl3275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3275, d)
			}
		} else if yyct3275 == codecSelferValueTypeArray1234 {
			yyl3275 := r.ReadArrayStart()
			if yyl3275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3276Slc
	var yyhl3276 bool = l >= 0
	for yyj3276 := 0; ; yyj3276++ {
		if yyhl3276 {
			if yyj3276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3276Slc = r.DecodeBytes(yys3276Slc, true, true)
		yys3276 := string(yys3276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3276 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3280 := z.DecBinary()
				_ = yym3280
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3283 := z.DecBinary()
				_ = yym3283
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3276)
		} // end switch yys3276
	} // end for yyj3276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3284 int
	var yyb3284 bool
	var yyhl3284 bool = l >= 0
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3288 := z.DecBinary()
		_ = yym3288
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3291 := z.DecBinary()
		_ = yym3291
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3284++
		if yyhl3284 {
			yyb3284 = yyj3284 > l
		} else {
			yyb3284 = r.CheckBreak()
		}
		if yyb3284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3292 := z.EncBinary()
		_ = yym3292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3293 := !z.EncBinary()
			yy2arr3293 := z.EncBasicHandle().StructToArray
			var yyq3293 [4]bool
			_, _, _ = yysep3293, yyq3293, yy2arr3293
			const yyr3293 bool = false
			yyq3293[0] = x.Kind != ""
			yyq3293[1] = x.APIVersion != ""
			var yynn3293 int
			if yyr3293 || yy2arr3293 {
				r.EncodeArrayStart(4)
			} else {
				yynn3293 = 2
				for _, b := range yyq3293 {
					if b {
						yynn3293++
					}
				}
				r.EncodeMapStart(yynn3293)
				yynn3293 = 0
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3293[0] {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3293[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3293[1] {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3293[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3301 := z.EncBinary()
				_ = yym3301
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3302 := z.EncBinary()
				_ = yym3302
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3304 := z.EncBinary()
				_ = yym3304
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3305 := z.EncBinary()
				_ = yym3305
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3306 := z.DecBinary()
	_ = yym3306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3307 := r.ContainerType()
		if yyct3307 == codecSelferValueTypeMap1234 {
			yyl3307 := r.ReadMapStart()
			if yyl3307 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3307, d)
			}
		} else if yyct3307 == codecSelferValueTypeArray1234 {
			yyl3307 := r.ReadArrayStart()
			if yyl3307 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3308Slc
	var yyhl3308 bool = l >= 0
	for yyj3308 := 0; ; yyj3308++ {
		if yyhl3308 {
			if yyj3308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3308Slc = r.DecodeBytes(yys3308Slc, true, true)
		yys3308 := string(yys3308Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3308 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3308)
		} // end switch yys3308
	} // end for yyj3308
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3313 int
	var yyb3313 bool
	var yyhl3313 bool = l >= 0
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3313++
		if yyhl3313 {
			yyb3313 = yyj3313 > l
		} else {
			yyb3313 = r.CheckBreak()
		}
		if yyb3313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3318 := z.EncBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3319 := !z.EncBinary()
			yy2arr3319 := z.EncBasicHandle().StructToArray
			var yyq3319 [7]bool
			_, _, _ = yysep3319, yyq3319, yy2arr3319
			const yyr3319 bool = false
			yyq3319[0] = x.Kind != ""
			yyq3319[1] = x.APIVersion != ""
			var yynn3319 int
			if yyr3319 || yy2arr3319 {
				r.EncodeArrayStart(7)
			} else {
				yynn3319 = 5
				for _, b := range yyq3319 {
					if b {
						yynn3319++
					}
				}
				r.EncodeMapStart(yynn3319)
				yynn3319 = 0
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3319[0] {
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3319[1] {
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3333 := z.EncBinary()
				_ = yym3333
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3334 := z.EncBinary()
				_ = yym3334
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3336 := z.EncBinary()
				_ = yym3336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3337 := z.EncBinary()
				_ = yym3337
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3339 := *x.TimeoutSeconds
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeInt(int64(yy3339))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3341 := *x.TimeoutSeconds
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						r.EncodeInt(int64(yy3341))
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3343 := z.DecBinary()
	_ = yym3343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3344 := r.ContainerType()
		if yyct3344 == codecSelferValueTypeMap1234 {
			yyl3344 := r.ReadMapStart()
			if yyl3344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3344, d)
			}
		} else if yyct3344 == codecSelferValueTypeArray1234 {
			yyl3344 := r.ReadArrayStart()
			if yyl3344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3345Slc
	var yyhl3345 bool = l >= 0
	for yyj3345 := 0; ; yyj3345++ {
		if yyhl3345 {
			if yyj3345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3345Slc = r.DecodeBytes(yys3345Slc, true, true)
		yys3345 := string(yys3345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3345 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3348 := &x.LabelSelector
				yym3349 := z.DecBinary()
				_ = yym3349
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3348) {
				} else {
					z.DecFallback(yyv3348, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3350 := &x.FieldSelector
				yym3351 := z.DecBinary()
				_ = yym3351
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3350) {
				} else {
					z.DecFallback(yyv3350, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3355 := z.DecBinary()
				_ = yym3355
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3345)
		} // end switch yys3345
	} // end for yyj3345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3356 int
	var yyb3356 bool
	var yyhl3356 bool = l >= 0
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3359 := &x.LabelSelector
		yym3360 := z.DecBinary()
		_ = yym3360
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3359) {
		} else {
			z.DecFallback(yyv3359, true)
		}
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3361 := &x.FieldSelector
		yym3362 := z.DecBinary()
		_ = yym3362
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3361) {
		} else {
			z.DecFallback(yyv3361, true)
		}
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3356++
	if yyhl3356 {
		yyb3356 = yyj3356 > l
	} else {
		yyb3356 = r.CheckBreak()
	}
	if yyb3356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3366 := z.DecBinary()
		_ = yym3366
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3356++
		if yyhl3356 {
			yyb3356 = yyj3356 > l
		} else {
			yyb3356 = r.CheckBreak()
		}
		if yyb3356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3367 := z.EncBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3368 := !z.EncBinary()
			yy2arr3368 := z.EncBasicHandle().StructToArray
			var yyq3368 [10]bool
			_, _, _ = yysep3368, yyq3368, yy2arr3368
			const yyr3368 bool = false
			yyq3368[0] = x.Kind != ""
			yyq3368[1] = x.APIVersion != ""
			var yynn3368 int
			if yyr3368 || yy2arr3368 {
				r.EncodeArrayStart(10)
			} else {
				yynn3368 = 8
				for _, b := range yyq3368 {
					if b {
						yynn3368++
					}
				}
				r.EncodeMapStart(yynn3368)
				yynn3368 = 0
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[0] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[1] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3376 := z.EncBinary()
				_ = yym3376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3377 := z.EncBinary()
				_ = yym3377
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3379 := z.EncBinary()
				_ = yym3379
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3380 := z.EncBinary()
				_ = yym3380
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3382 := z.EncBinary()
				_ = yym3382
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3383 := z.EncBinary()
				_ = yym3383
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3385 := *x.SinceSeconds
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeInt(int64(yy3385))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3387 := *x.SinceSeconds
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						r.EncodeInt(int64(yy3387))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3390 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3390 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3391 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3391 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3393 := z.EncBinary()
				_ = yym3393
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3394 := z.EncBinary()
				_ = yym3394
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3396 := *x.TailLines
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeInt(int64(yy3396))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3398 := *x.TailLines
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeInt(int64(yy3398))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3401 := *x.LimitBytes
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeInt(int64(yy3401))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3403 := *x.LimitBytes
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						r.EncodeInt(int64(yy3403))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3405 := z.DecBinary()
	_ = yym3405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3406 := r.ContainerType()
		if yyct3406 == codecSelferValueTypeMap1234 {
			yyl3406 := r.ReadMapStart()
			if yyl3406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3406, d)
			}
		} else if yyct3406 == codecSelferValueTypeArray1234 {
			yyl3406 := r.ReadArrayStart()
			if yyl3406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3407Slc
	var yyhl3407 bool = l >= 0
	for yyj3407 := 0; ; yyj3407++ {
		if yyhl3407 {
			if yyj3407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3407Slc = r.DecodeBytes(yys3407Slc, true, true)
		yys3407 := string(yys3407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3414 := z.DecBinary()
				_ = yym3414
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3416 := z.DecBinary()
				_ = yym3416
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3416 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3416 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3419 := z.DecBinary()
				_ = yym3419
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3421 := z.DecBinary()
				_ = yym3421
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3407)
		} // end switch yys3407
	} // end for yyj3407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3422 int
	var yyb3422 bool
	var yyhl3422 bool = l >= 0
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3429 := z.DecBinary()
		_ = yym3429
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3431 := z.DecBinary()
		_ = yym3431
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3431 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3431 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3434 := z.DecBinary()
		_ = yym3434
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3436 := z.DecBinary()
		_ = yym3436
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3422++
		if yyhl3422 {
			yyb3422 = yyj3422 > l
		} else {
			yyb3422 = r.CheckBreak()
		}
		if yyb3422 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3422-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3437 := z.EncBinary()
		_ = yym3437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3438 := !z.EncBinary()
			yy2arr3438 := z.EncBasicHandle().StructToArray
			var yyq3438 [7]bool
			_, _, _ = yysep3438, yyq3438, yy2arr3438
			const yyr3438 bool = false
			yyq3438[0] = x.Kind != ""
			yyq3438[1] = x.APIVersion != ""
			yyq3438[2] = x.Stdin != false
			yyq3438[3] = x.Stdout != false
			yyq3438[4] = x.Stderr != false
			yyq3438[5] = x.TTY != false
			yyq3438[6] = x.Container != ""
			var yynn3438 int
			if yyr3438 || yy2arr3438 {
				r.EncodeArrayStart(7)
			} else {
				yynn3438 = 0
				for _, b := range yyq3438 {
					if b {
						yynn3438++
					}
				}
				r.EncodeMapStart(yynn3438)
				yynn3438 = 0
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[0] {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[1] {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[2] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[3] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[4] {
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[5] {
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3438[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[6] {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3438[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3460 := z.DecBinary()
	_ = yym3460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3461 := r.ContainerType()
		if yyct3461 == codecSelferValueTypeMap1234 {
			yyl3461 := r.ReadMapStart()
			if yyl3461 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3461, d)
			}
		} else if yyct3461 == codecSelferValueTypeArray1234 {
			yyl3461 := r.ReadArrayStart()
			if yyl3461 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3462Slc
	var yyhl3462 bool = l >= 0
	for yyj3462 := 0; ; yyj3462++ {
		if yyhl3462 {
			if yyj3462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3462Slc = r.DecodeBytes(yys3462Slc, true, true)
		yys3462 := string(yys3462Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3462 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3462)
		} // end switch yys3462
	} // end for yyj3462
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3470 int
	var yyb3470 bool
	var yyhl3470 bool = l >= 0
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3470++
		if yyhl3470 {
			yyb3470 = yyj3470 > l
		} else {
			yyb3470 = r.CheckBreak()
		}
		if yyb3470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3478 := z.EncBinary()
		_ = yym3478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3479 := !z.EncBinary()
			yy2arr3479 := z.EncBasicHandle().StructToArray
			var yyq3479 [8]bool
			_, _, _ = yysep3479, yyq3479, yy2arr3479
			const yyr3479 bool = false
			yyq3479[0] = x.Kind != ""
			yyq3479[1] = x.APIVersion != ""
			var yynn3479 int
			if yyr3479 || yy2arr3479 {
				r.EncodeArrayStart(8)
			} else {
				yynn3479 = 6
				for _, b := range yyq3479 {
					if b {
						yynn3479++
					}
				}
				r.EncodeMapStart(yynn3479)
				yynn3479 = 0
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3479[0] {
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3479[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3479[1] {
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3479[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3487 := z.EncBinary()
				_ = yym3487
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3488 := z.EncBinary()
				_ = yym3488
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3490 := z.EncBinary()
				_ = yym3490
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3491 := z.EncBinary()
				_ = yym3491
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3493 := z.EncBinary()
				_ = yym3493
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3494 := z.EncBinary()
				_ = yym3494
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3496 := z.EncBinary()
				_ = yym3496
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3497 := z.EncBinary()
				_ = yym3497
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3499 := z.EncBinary()
				_ = yym3499
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3500 := z.EncBinary()
				_ = yym3500
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3479 || yy2arr3479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3504 := z.DecBinary()
	_ = yym3504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3505 := r.ContainerType()
		if yyct3505 == codecSelferValueTypeMap1234 {
			yyl3505 := r.ReadMapStart()
			if yyl3505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3505, d)
			}
		} else if yyct3505 == codecSelferValueTypeArray1234 {
			yyl3505 := r.ReadArrayStart()
			if yyl3505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3506Slc
	var yyhl3506 bool = l >= 0
	for yyj3506 := 0; ; yyj3506++ {
		if yyhl3506 {
			if yyj3506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3506Slc = r.DecodeBytes(yys3506Slc, true, true)
		yys3506 := string(yys3506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3506 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3514 := &x.Command
				yym3515 := z.DecBinary()
				_ = yym3515
				if false {
				} else {
					z.F.DecSliceStringX(yyv3514, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3506)
		} // end switch yys3506
	} // end for yyj3506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3516 int
	var yyb3516 bool
	var yyhl3516 bool = l >= 0
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3516++
	if yyhl3516 {
		yyb3516 = yyj3516 > l
	} else {
		yyb3516 = r.CheckBreak()
	}
	if yyb3516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3524 := &x.Command
		yym3525 := z.DecBinary()
		_ = yym3525
		if false {
		} else {
			z.F.DecSliceStringX(yyv3524, false, d)
		}
	}
	for {
		yyj3516++
		if yyhl3516 {
			yyb3516 = yyj3516 > l
		} else {
			yyb3516 = r.CheckBreak()
		}
		if yyb3516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3526 := z.EncBinary()
		_ = yym3526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3527 := !z.EncBinary()
			yy2arr3527 := z.EncBasicHandle().StructToArray
			var yyq3527 [3]bool
			_, _, _ = yysep3527, yyq3527, yy2arr3527
			const yyr3527 bool = false
			yyq3527[0] = x.Kind != ""
			yyq3527[1] = x.APIVersion != ""
			var yynn3527 int
			if yyr3527 || yy2arr3527 {
				r.EncodeArrayStart(3)
			} else {
				yynn3527 = 1
				for _, b := range yyq3527 {
					if b {
						yynn3527++
					}
				}
				r.EncodeMapStart(yynn3527)
				yynn3527 = 0
			}
			if yyr3527 || yy2arr3527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3527[0] {
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3527[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3530 := z.EncBinary()
					_ = yym3530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3527 || yy2arr3527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3527[1] {
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3527[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3533 := z.EncBinary()
					_ = yym3533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3527 || yy2arr3527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3535 := z.EncBinary()
				_ = yym3535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3536 := z.EncBinary()
				_ = yym3536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3527 || yy2arr3527 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3537 := z.DecBinary()
	_ = yym3537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3538 := r.ContainerType()
		if yyct3538 == codecSelferValueTypeMap1234 {
			yyl3538 := r.ReadMapStart()
			if yyl3538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3538, d)
			}
		} else if yyct3538 == codecSelferValueTypeArray1234 {
			yyl3538 := r.ReadArrayStart()
			if yyl3538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3539Slc
	var yyhl3539 bool = l >= 0
	for yyj3539 := 0; ; yyj3539++ {
		if yyhl3539 {
			if yyj3539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3539Slc = r.DecodeBytes(yys3539Slc, true, true)
		yys3539 := string(yys3539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3539 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3539)
		} // end switch yys3539
	} // end for yyj3539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3543 int
	var yyb3543 bool
	var yyhl3543 bool = l >= 0
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3543++
		if yyhl3543 {
			yyb3543 = yyj3543 > l
		} else {
			yyb3543 = r.CheckBreak()
		}
		if yyb3543 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3543-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3547 := z.EncBinary()
		_ = yym3547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3548 := !z.EncBinary()
			yy2arr3548 := z.EncBasicHandle().StructToArray
			var yyq3548 [3]bool
			_, _, _ = yysep3548, yyq3548, yy2arr3548
			const yyr3548 bool = false
			yyq3548[0] = x.Kind != ""
			yyq3548[1] = x.APIVersion != ""
			var yynn3548 int
			if yyr3548 || yy2arr3548 {
				r.EncodeArrayStart(3)
			} else {
				yynn3548 = 1
				for _, b := range yyq3548 {
					if b {
						yynn3548++
					}
				}
				r.EncodeMapStart(yynn3548)
				yynn3548 = 0
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3548[0] {
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3548[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3548[1] {
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3548[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3554 := z.EncBinary()
					_ = yym3554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3556 := z.EncBinary()
				_ = yym3556
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3557 := z.EncBinary()
				_ = yym3557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3558 := z.DecBinary()
	_ = yym3558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3559 := r.ContainerType()
		if yyct3559 == codecSelferValueTypeMap1234 {
			yyl3559 := r.ReadMapStart()
			if yyl3559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3559, d)
			}
		} else if yyct3559 == codecSelferValueTypeArray1234 {
			yyl3559 := r.ReadArrayStart()
			if yyl3559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3560Slc
	var yyhl3560 bool = l >= 0
	for yyj3560 := 0; ; yyj3560++ {
		if yyhl3560 {
			if yyj3560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3560Slc = r.DecodeBytes(yys3560Slc, true, true)
		yys3560 := string(yys3560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3560 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3560)
		} // end switch yys3560
	} // end for yyj3560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3564 int
	var yyb3564 bool
	var yyhl3564 bool = l >= 0
	yyj3564++
	if yyhl3564 {
		yyb3564 = yyj3564 > l
	} else {
		yyb3564 = r.CheckBreak()
	}
	if yyb3564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3564++
	if yyhl3564 {
		yyb3564 = yyj3564 > l
	} else {
		yyb3564 = r.CheckBreak()
	}
	if yyb3564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3564++
	if yyhl3564 {
		yyb3564 = yyj3564 > l
	} else {
		yyb3564 = r.CheckBreak()
	}
	if yyb3564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3564++
		if yyhl3564 {
			yyb3564 = yyj3564 > l
		} else {
			yyb3564 = r.CheckBreak()
		}
		if yyb3564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3568 := z.EncBinary()
		_ = yym3568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3569 := !z.EncBinary()
			yy2arr3569 := z.EncBasicHandle().StructToArray
			var yyq3569 [3]bool
			_, _, _ = yysep3569, yyq3569, yy2arr3569
			const yyr3569 bool = false
			yyq3569[0] = x.Kind != ""
			yyq3569[1] = x.APIVersion != ""
			var yynn3569 int
			if yyr3569 || yy2arr3569 {
				r.EncodeArrayStart(3)
			} else {
				yynn3569 = 1
				for _, b := range yyq3569 {
					if b {
						yynn3569++
					}
				}
				r.EncodeMapStart(yynn3569)
				yynn3569 = 0
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[0] {
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[1] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3577 := z.EncBinary()
				_ = yym3577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3578 := z.EncBinary()
				_ = yym3578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3579 := z.DecBinary()
	_ = yym3579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3580 := r.ContainerType()
		if yyct3580 == codecSelferValueTypeMap1234 {
			yyl3580 := r.ReadMapStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3580, d)
			}
		} else if yyct3580 == codecSelferValueTypeArray1234 {
			yyl3580 := r.ReadArrayStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3581Slc
	var yyhl3581 bool = l >= 0
	for yyj3581 := 0; ; yyj3581++ {
		if yyhl3581 {
			if yyj3581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3581Slc = r.DecodeBytes(yys3581Slc, true, true)
		yys3581 := string(yys3581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3581)
		} // end switch yys3581
	} // end for yyj3581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3585 int
	var yyb3585 bool
	var yyhl3585 bool = l >= 0
	yyj3585++
	if yyhl3585 {
		yyb3585 = yyj3585 > l
	} else {
		yyb3585 = r.CheckBreak()
	}
	if yyb3585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3585++
	if yyhl3585 {
		yyb3585 = yyj3585 > l
	} else {
		yyb3585 = r.CheckBreak()
	}
	if yyb3585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3585++
	if yyhl3585 {
		yyb3585 = yyj3585 > l
	} else {
		yyb3585 = r.CheckBreak()
	}
	if yyb3585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3585++
		if yyhl3585 {
			yyb3585 = yyj3585 > l
		} else {
			yyb3585 = r.CheckBreak()
		}
		if yyb3585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3589 := z.EncBinary()
		_ = yym3589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3590 := !z.EncBinary()
			yy2arr3590 := z.EncBasicHandle().StructToArray
			var yyq3590 [5]bool
			_, _, _ = yysep3590, yyq3590, yy2arr3590
			const yyr3590 bool = false
			yyq3590[4] = x.Controller != nil
			var yynn3590 int
			if yyr3590 || yy2arr3590 {
				r.EncodeArrayStart(5)
			} else {
				yynn3590 = 4
				for _, b := range yyq3590 {
					if b {
						yynn3590++
					}
				}
				r.EncodeMapStart(yynn3590)
				yynn3590 = 0
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3592 := z.EncBinary()
				_ = yym3592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3593 := z.EncBinary()
				_ = yym3593
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3595 := z.EncBinary()
				_ = yym3595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3596 := z.EncBinary()
				_ = yym3596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3598 := z.EncBinary()
				_ = yym3598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3601 := z.EncBinary()
				_ = yym3601
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3602 := z.EncBinary()
				_ = yym3602
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3590[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3604 := *x.Controller
						yym3605 := z.EncBinary()
						_ = yym3605
						if false {
						} else {
							r.EncodeBool(bool(yy3604))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3590[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3606 := *x.Controller
						yym3607 := z.EncBinary()
						_ = yym3607
						if false {
						} else {
							r.EncodeBool(bool(yy3606))
						}
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3608 := z.DecBinary()
	_ = yym3608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3609 := r.ContainerType()
		if yyct3609 == codecSelferValueTypeMap1234 {
			yyl3609 := r.ReadMapStart()
			if yyl3609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3609, d)
			}
		} else if yyct3609 == codecSelferValueTypeArray1234 {
			yyl3609 := r.ReadArrayStart()
			if yyl3609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3610Slc
	var yyhl3610 bool = l >= 0
	for yyj3610 := 0; ; yyj3610++ {
		if yyhl3610 {
			if yyj3610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3610Slc = r.DecodeBytes(yys3610Slc, true, true)
		yys3610 := string(yys3610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3610 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3616 := z.DecBinary()
				_ = yym3616
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3610)
		} // end switch yys3610
	} // end for yyj3610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3617 int
	var yyb3617 bool
	var yyhl3617 bool = l >= 0
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3623 := z.DecBinary()
		_ = yym3623
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3617++
		if yyhl3617 {
			yyb3617 = yyj3617 > l
		} else {
			yyb3617 = r.CheckBreak()
		}
		if yyb3617 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3617-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3624 := z.EncBinary()
		_ = yym3624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3625 := !z.EncBinary()
			yy2arr3625 := z.EncBasicHandle().StructToArray
			var yyq3625 [7]bool
			_, _, _ = yysep3625, yyq3625, yy2arr3625
			const yyr3625 bool = false
			yyq3625[0] = x.Kind != ""
			yyq3625[1] = x.Namespace != ""
			yyq3625[2] = x.Name != ""
			yyq3625[3] = x.UID != ""
			yyq3625[4] = x.APIVersion != ""
			yyq3625[5] = x.ResourceVersion != ""
			yyq3625[6] = x.FieldPath != ""
			var yynn3625 int
			if yyr3625 || yy2arr3625 {
				r.EncodeArrayStart(7)
			} else {
				yynn3625 = 0
				for _, b := range yyq3625 {
					if b {
						yynn3625++
					}
				}
				r.EncodeMapStart(yynn3625)
				yynn3625 = 0
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[0] {
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[1] {
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[2] {
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[3] {
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[4] {
					yym3639 := z.EncBinary()
					_ = yym3639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[5] {
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3625[6] {
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3625[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3625 || yy2arr3625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3647 := z.DecBinary()
	_ = yym3647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3648 := r.ContainerType()
		if yyct3648 == codecSelferValueTypeMap1234 {
			yyl3648 := r.ReadMapStart()
			if yyl3648 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3648, d)
			}
		} else if yyct3648 == codecSelferValueTypeArray1234 {
			yyl3648 := r.ReadArrayStart()
			if yyl3648 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3648, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3649Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3649Slc
	var yyhl3649 bool = l >= 0
	for yyj3649 := 0; ; yyj3649++ {
		if yyhl3649 {
			if yyj3649 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3649Slc = r.DecodeBytes(yys3649Slc, true, true)
		yys3649 := string(yys3649Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3649 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3649)
		} // end switch yys3649
	} // end for yyj3649
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3657 int
	var yyb3657 bool
	var yyhl3657 bool = l >= 0
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3657++
	if yyhl3657 {
		yyb3657 = yyj3657 > l
	} else {
		yyb3657 = r.CheckBreak()
	}
	if yyb3657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3657++
		if yyhl3657 {
			yyb3657 = yyj3657 > l
		} else {
			yyb3657 = r.CheckBreak()
		}
		if yyb3657 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3657-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3665 := z.EncBinary()
		_ = yym3665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3666 := !z.EncBinary()
			yy2arr3666 := z.EncBasicHandle().StructToArray
			var yyq3666 [1]bool
			_, _, _ = yysep3666, yyq3666, yy2arr3666
			const yyr3666 bool = false
			var yynn3666 int
			if yyr3666 || yy2arr3666 {
				r.EncodeArrayStart(1)
			} else {
				yynn3666 = 1
				for _, b := range yyq3666 {
					if b {
						yynn3666++
					}
				}
				r.EncodeMapStart(yynn3666)
				yynn3666 = 0
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3668 := z.EncBinary()
				_ = yym3668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3669 := z.EncBinary()
				_ = yym3669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3670 := z.DecBinary()
	_ = yym3670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3671 := r.ContainerType()
		if yyct3671 == codecSelferValueTypeMap1234 {
			yyl3671 := r.ReadMapStart()
			if yyl3671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3671, d)
			}
		} else if yyct3671 == codecSelferValueTypeArray1234 {
			yyl3671 := r.ReadArrayStart()
			if yyl3671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3672Slc
	var yyhl3672 bool = l >= 0
	for yyj3672 := 0; ; yyj3672++ {
		if yyhl3672 {
			if yyj3672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3672Slc = r.DecodeBytes(yys3672Slc, true, true)
		yys3672 := string(yys3672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3672 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3672)
		} // end switch yys3672
	} // end for yyj3672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3674 int
	var yyb3674 bool
	var yyhl3674 bool = l >= 0
	yyj3674++
	if yyhl3674 {
		yyb3674 = yyj3674 > l
	} else {
		yyb3674 = r.CheckBreak()
	}
	if yyb3674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3674++
		if yyhl3674 {
			yyb3674 = yyj3674 > l
		} else {
			yyb3674 = r.CheckBreak()
		}
		if yyb3674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3676 := z.EncBinary()
		_ = yym3676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3677 := !z.EncBinary()
			yy2arr3677 := z.EncBasicHandle().StructToArray
			var yyq3677 [3]bool
			_, _, _ = yysep3677, yyq3677, yy2arr3677
			const yyr3677 bool = false
			yyq3677[0] = x.Kind != ""
			yyq3677[1] = x.APIVersion != ""
			yyq3677[2] = true
			var yynn3677 int
			if yyr3677 || yy2arr3677 {
				r.EncodeArrayStart(3)
			} else {
				yynn3677 = 0
				for _, b := range yyq3677 {
					if b {
						yynn3677++
					}
				}
				r.EncodeMapStart(yynn3677)
				yynn3677 = 0
			}
			if yyr3677 || yy2arr3677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3677[0] {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3677[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3677 || yy2arr3677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3677[1] {
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3677[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3677 || yy2arr3677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3677[2] {
					yy3685 := &x.Reference
					yy3685.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3677[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3686 := &x.Reference
					yy3686.CodecEncodeSelf(e)
				}
			}
			if yyr3677 || yy2arr3677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3687 := z.DecBinary()
	_ = yym3687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3688 := r.ContainerType()
		if yyct3688 == codecSelferValueTypeMap1234 {
			yyl3688 := r.ReadMapStart()
			if yyl3688 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3688, d)
			}
		} else if yyct3688 == codecSelferValueTypeArray1234 {
			yyl3688 := r.ReadArrayStart()
			if yyl3688 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3688, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3689Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3689Slc
	var yyhl3689 bool = l >= 0
	for yyj3689 := 0; ; yyj3689++ {
		if yyhl3689 {
			if yyj3689 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3689Slc = r.DecodeBytes(yys3689Slc, true, true)
		yys3689 := string(yys3689Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3689 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3692 := &x.Reference
				yyv3692.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3689)
		} // end switch yys3689
	} // end for yyj3689
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3693 int
	var yyb3693 bool
	var yyhl3693 bool = l >= 0
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3696 := &x.Reference
		yyv3696.CodecDecodeSelf(d)
	}
	for {
		yyj3693++
		if yyhl3693 {
			yyb3693 = yyj3693 > l
		} else {
			yyb3693 = r.CheckBreak()
		}
		if yyb3693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3697 := z.EncBinary()
		_ = yym3697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3698 := !z.EncBinary()
			yy2arr3698 := z.EncBasicHandle().StructToArray
			var yyq3698 [2]bool
			_, _, _ = yysep3698, yyq3698, yy2arr3698
			const yyr3698 bool = false
			yyq3698[0] = x.Component != ""
			yyq3698[1] = x.Host != ""
			var yynn3698 int
			if yyr3698 || yy2arr3698 {
				r.EncodeArrayStart(2)
			} else {
				yynn3698 = 0
				for _, b := range yyq3698 {
					if b {
						yynn3698++
					}
				}
				r.EncodeMapStart(yynn3698)
				yynn3698 = 0
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3698[0] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3698[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3698[1] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3698[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3705 := z.DecBinary()
	_ = yym3705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3706 := r.ContainerType()
		if yyct3706 == codecSelferValueTypeMap1234 {
			yyl3706 := r.ReadMapStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3706, d)
			}
		} else if yyct3706 == codecSelferValueTypeArray1234 {
			yyl3706 := r.ReadArrayStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3707Slc
	var yyhl3707 bool = l >= 0
	for yyj3707 := 0; ; yyj3707++ {
		if yyhl3707 {
			if yyj3707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3707Slc = r.DecodeBytes(yys3707Slc, true, true)
		yys3707 := string(yys3707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3707 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3707)
		} // end switch yys3707
	} // end for yyj3707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3710 int
	var yyb3710 bool
	var yyhl3710 bool = l >= 0
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3710++
		if yyhl3710 {
			yyb3710 = yyj3710 > l
		} else {
			yyb3710 = r.CheckBreak()
		}
		if yyb3710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3713 := z.EncBinary()
		_ = yym3713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3714 := !z.EncBinary()
			yy2arr3714 := z.EncBasicHandle().StructToArray
			var yyq3714 [11]bool
			_, _, _ = yysep3714, yyq3714, yy2arr3714
			const yyr3714 bool = false
			yyq3714[0] = x.Kind != ""
			yyq3714[1] = x.APIVersion != ""
			yyq3714[2] = true
			yyq3714[3] = true
			yyq3714[4] = x.Reason != ""
			yyq3714[5] = x.Message != ""
			yyq3714[6] = true
			yyq3714[7] = true
			yyq3714[8] = true
			yyq3714[9] = x.Count != 0
			yyq3714[10] = x.Type != ""
			var yynn3714 int
			if yyr3714 || yy2arr3714 {
				r.EncodeArrayStart(11)
			} else {
				yynn3714 = 0
				for _, b := range yyq3714 {
					if b {
						yynn3714++
					}
				}
				r.EncodeMapStart(yynn3714)
				yynn3714 = 0
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[0] {
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[1] {
					yym3719 := z.EncBinary()
					_ = yym3719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[2] {
					yy3722 := &x.ObjectMeta
					yy3722.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3714[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3723 := &x.ObjectMeta
					yy3723.CodecEncodeSelf(e)
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[3] {
					yy3725 := &x.InvolvedObject
					yy3725.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3714[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3726 := &x.InvolvedObject
					yy3726.CodecEncodeSelf(e)
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[4] {
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[5] {
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[6] {
					yy3734 := &x.Source
					yy3734.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3714[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3735 := &x.Source
					yy3735.CodecEncodeSelf(e)
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[7] {
					yy3737 := &x.FirstTimestamp
					yym3738 := z.EncBinary()
					_ = yym3738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3737) {
					} else if yym3738 {
						z.EncBinaryMarshal(yy3737)
					} else if !yym3738 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3737)
					} else {
						z.EncFallback(yy3737)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3714[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3739 := &x.FirstTimestamp
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3739) {
					} else if yym3740 {
						z.EncBinaryMarshal(yy3739)
					} else if !yym3740 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3739)
					} else {
						z.EncFallback(yy3739)
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[8] {
					yy3742 := &x.LastTimestamp
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3742) {
					} else if yym3743 {
						z.EncBinaryMarshal(yy3742)
					} else if !yym3743 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3742)
					} else {
						z.EncFallback(yy3742)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3714[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3744 := &x.LastTimestamp
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3744) {
					} else if yym3745 {
						z.EncBinaryMarshal(yy3744)
					} else if !yym3745 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3744)
					} else {
						z.EncFallback(yy3744)
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[9] {
					yym3747 := z.EncBinary()
					_ = yym3747
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3714[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3714[10] {
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3714[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3714 || yy2arr3714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3752 := z.DecBinary()
	_ = yym3752
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3753 := r.ContainerType()
		if yyct3753 == codecSelferValueTypeMap1234 {
			yyl3753 := r.ReadMapStart()
			if yyl3753 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3753, d)
			}
		} else if yyct3753 == codecSelferValueTypeArray1234 {
			yyl3753 := r.ReadArrayStart()
			if yyl3753 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3753, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3754Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3754Slc
	var yyhl3754 bool = l >= 0
	for yyj3754 := 0; ; yyj3754++ {
		if yyhl3754 {
			if yyj3754 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3754Slc = r.DecodeBytes(yys3754Slc, true, true)
		yys3754 := string(yys3754Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3754 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3757 := &x.ObjectMeta
				yyv3757.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3758 := &x.InvolvedObject
				yyv3758.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3761 := &x.Source
				yyv3761.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3762 := &x.FirstTimestamp
				yym3763 := z.DecBinary()
				_ = yym3763
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3762) {
				} else if yym3763 {
					z.DecBinaryUnmarshal(yyv3762)
				} else if !yym3763 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3762)
				} else {
					z.DecFallback(yyv3762, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3764 := &x.LastTimestamp
				yym3765 := z.DecBinary()
				_ = yym3765
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3764) {
				} else if yym3765 {
					z.DecBinaryUnmarshal(yyv3764)
				} else if !yym3765 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3764)
				} else {
					z.DecFallback(yyv3764, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3754)
		} // end switch yys3754
	} // end for yyj3754
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3768 int
	var yyb3768 bool
	var yyhl3768 bool = l >= 0
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3771 := &x.ObjectMeta
		yyv3771.CodecDecodeSelf(d)
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3772 := &x.InvolvedObject
		yyv3772.CodecDecodeSelf(d)
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3775 := &x.Source
		yyv3775.CodecDecodeSelf(d)
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3776 := &x.FirstTimestamp
		yym3777 := z.DecBinary()
		_ = yym3777
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3776) {
		} else if yym3777 {
			z.DecBinaryUnmarshal(yyv3776)
		} else if !yym3777 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3776)
		} else {
			z.DecFallback(yyv3776, false)
		}
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3778 := &x.LastTimestamp
		yym3779 := z.DecBinary()
		_ = yym3779
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3778) {
		} else if yym3779 {
			z.DecBinaryUnmarshal(yyv3778)
		} else if !yym3779 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3778)
		} else {
			z.DecFallback(yyv3778, false)
		}
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3768++
		if yyhl3768 {
			yyb3768 = yyj3768 > l
		} else {
			yyb3768 = r.CheckBreak()
		}
		if yyb3768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3782 := z.EncBinary()
		_ = yym3782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3783 := !z.EncBinary()
			yy2arr3783 := z.EncBasicHandle().StructToArray
			var yyq3783 [4]bool
			_, _, _ = yysep3783, yyq3783, yy2arr3783
			const yyr3783 bool = false
			yyq3783[0] = x.Kind != ""
			yyq3783[1] = x.APIVersion != ""
			yyq3783[2] = true
			var yynn3783 int
			if yyr3783 || yy2arr3783 {
				r.EncodeArrayStart(4)
			} else {
				yynn3783 = 1
				for _, b := range yyq3783 {
					if b {
						yynn3783++
					}
				}
				r.EncodeMapStart(yynn3783)
				yynn3783 = 0
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3783[0] {
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3783[1] {
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3783[2] {
					yy3791 := &x.ListMeta
					yym3792 := z.EncBinary()
					_ = yym3792
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3791) {
					} else {
						z.EncFallback(yy3791)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3793 := &x.ListMeta
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3793) {
					} else {
						z.EncFallback(yy3793)
					}
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3796 := z.EncBinary()
					_ = yym3796
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3798 := z.DecBinary()
	_ = yym3798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3799 := r.ContainerType()
		if yyct3799 == codecSelferValueTypeMap1234 {
			yyl3799 := r.ReadMapStart()
			if yyl3799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3799, d)
			}
		} else if yyct3799 == codecSelferValueTypeArray1234 {
			yyl3799 := r.ReadArrayStart()
			if yyl3799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3800Slc
	var yyhl3800 bool = l >= 0
	for yyj3800 := 0; ; yyj3800++ {
		if yyhl3800 {
			if yyj3800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3800Slc = r.DecodeBytes(yys3800Slc, true, true)
		yys3800 := string(yys3800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3803 := &x.ListMeta
				yym3804 := z.DecBinary()
				_ = yym3804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3803) {
				} else {
					z.DecFallback(yyv3803, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3805 := &x.Items
				yym3806 := z.DecBinary()
				_ = yym3806
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3805), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3800)
		} // end switch yys3800
	} // end for yyj3800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3807 int
	var yyb3807 bool
	var yyhl3807 bool = l >= 0
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3810 := &x.ListMeta
		yym3811 := z.DecBinary()
		_ = yym3811
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3810) {
		} else {
			z.DecFallback(yyv3810, false)
		}
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3812 := &x.Items
		yym3813 := z.DecBinary()
		_ = yym3813
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3812), d)
		}
	}
	for {
		yyj3807++
		if yyhl3807 {
			yyb3807 = yyj3807 > l
		} else {
			yyb3807 = r.CheckBreak()
		}
		if yyb3807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3814 := z.EncBinary()
		_ = yym3814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3815 := !z.EncBinary()
			yy2arr3815 := z.EncBasicHandle().StructToArray
			var yyq3815 [4]bool
			_, _, _ = yysep3815, yyq3815, yy2arr3815
			const yyr3815 bool = false
			yyq3815[0] = x.Kind != ""
			yyq3815[1] = x.APIVersion != ""
			yyq3815[2] = true
			var yynn3815 int
			if yyr3815 || yy2arr3815 {
				r.EncodeArrayStart(4)
			} else {
				yynn3815 = 1
				for _, b := range yyq3815 {
					if b {
						yynn3815++
					}
				}
				r.EncodeMapStart(yynn3815)
				yynn3815 = 0
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3815[0] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3815[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3815[1] {
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3815[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3815[2] {
					yy3823 := &x.ListMeta
					yym3824 := z.EncBinary()
					_ = yym3824
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3823) {
					} else {
						z.EncFallback(yy3823)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3815[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3825 := &x.ListMeta
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3825) {
					} else {
						z.EncFallback(yy3825)
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3828 := z.EncBinary()
					_ = yym3828
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3830 := z.DecBinary()
	_ = yym3830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3831 := r.ContainerType()
		if yyct3831 == codecSelferValueTypeMap1234 {
			yyl3831 := r.ReadMapStart()
			if yyl3831 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3831, d)
			}
		} else if yyct3831 == codecSelferValueTypeArray1234 {
			yyl3831 := r.ReadArrayStart()
			if yyl3831 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3832Slc
	var yyhl3832 bool = l >= 0
	for yyj3832 := 0; ; yyj3832++ {
		if yyhl3832 {
			if yyj3832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3832Slc = r.DecodeBytes(yys3832Slc, true, true)
		yys3832 := string(yys3832Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3832 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3835 := &x.ListMeta
				yym3836 := z.DecBinary()
				_ = yym3836
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3835) {
				} else {
					z.DecFallback(yyv3835, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3837 := &x.Items
				yym3838 := z.DecBinary()
				_ = yym3838
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3837), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3832)
		} // end switch yys3832
	} // end for yyj3832
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3839 int
	var yyb3839 bool
	var yyhl3839 bool = l >= 0
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3842 := &x.ListMeta
		yym3843 := z.DecBinary()
		_ = yym3843
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3842) {
		} else {
			z.DecFallback(yyv3842, false)
		}
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3844 := &x.Items
		yym3845 := z.DecBinary()
		_ = yym3845
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3844), d)
		}
	}
	for {
		yyj3839++
		if yyhl3839 {
			yyb3839 = yyj3839 > l
		} else {
			yyb3839 = r.CheckBreak()
		}
		if yyb3839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3846 := z.EncBinary()
	_ = yym3846
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3847 := z.DecBinary()
	_ = yym3847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3848 := z.EncBinary()
		_ = yym3848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3849 := !z.EncBinary()
			yy2arr3849 := z.EncBasicHandle().StructToArray
			var yyq3849 [6]bool
			_, _, _ = yysep3849, yyq3849, yy2arr3849
			const yyr3849 bool = false
			yyq3849[0] = x.Type != ""
			yyq3849[1] = len(x.Max) != 0
			yyq3849[2] = len(x.Min) != 0
			yyq3849[3] = len(x.Default) != 0
			yyq3849[4] = len(x.DefaultRequest) != 0
			yyq3849[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3849 int
			if yyr3849 || yy2arr3849 {
				r.EncodeArrayStart(6)
			} else {
				yynn3849 = 0
				for _, b := range yyq3849 {
					if b {
						yynn3849++
					}
				}
				r.EncodeMapStart(yynn3849)
				yynn3849 = 0
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3856 := z.DecBinary()
	_ = yym3856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3857 := r.ContainerType()
		if yyct3857 == codecSelferValueTypeMap1234 {
			yyl3857 := r.ReadMapStart()
			if yyl3857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3857, d)
			}
		} else if yyct3857 == codecSelferValueTypeArray1234 {
			yyl3857 := r.ReadArrayStart()
			if yyl3857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3858Slc
	var yyhl3858 bool = l >= 0
	for yyj3858 := 0; ; yyj3858++ {
		if yyhl3858 {
			if yyj3858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3858Slc = r.DecodeBytes(yys3858Slc, true, true)
		yys3858 := string(yys3858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3858 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3860 := &x.Max
				yyv3860.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3861 := &x.Min
				yyv3861.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3862 := &x.Default
				yyv3862.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3863 := &x.DefaultRequest
				yyv3863.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3864 := &x.MaxLimitRequestRatio
				yyv3864.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3858)
		} // end switch yys3858
	} // end for yyj3858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3865 int
	var yyb3865 bool
	var yyhl3865 bool = l >= 0
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3867 := &x.Max
		yyv3867.CodecDecodeSelf(d)
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3868 := &x.Min
		yyv3868.CodecDecodeSelf(d)
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3869 := &x.Default
		yyv3869.CodecDecodeSelf(d)
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3870 := &x.DefaultRequest
		yyv3870.CodecDecodeSelf(d)
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3871 := &x.MaxLimitRequestRatio
		yyv3871.CodecDecodeSelf(d)
	}
	for {
		yyj3865++
		if yyhl3865 {
			yyb3865 = yyj3865 > l
		} else {
			yyb3865 = r.CheckBreak()
		}
		if yyb3865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3872 := z.EncBinary()
		_ = yym3872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3873 := !z.EncBinary()
			yy2arr3873 := z.EncBasicHandle().StructToArray
			var yyq3873 [1]bool
			_, _, _ = yysep3873, yyq3873, yy2arr3873
			const yyr3873 bool = false
			var yynn3873 int
			if yyr3873 || yy2arr3873 {
				r.EncodeArrayStart(1)
			} else {
				yynn3873 = 1
				for _, b := range yyq3873 {
					if b {
						yynn3873++
					}
				}
				r.EncodeMapStart(yynn3873)
				yynn3873 = 0
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3875 := z.EncBinary()
					_ = yym3875
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3877 := z.DecBinary()
	_ = yym3877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3878 := r.ContainerType()
		if yyct3878 == codecSelferValueTypeMap1234 {
			yyl3878 := r.ReadMapStart()
			if yyl3878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3878, d)
			}
		} else if yyct3878 == codecSelferValueTypeArray1234 {
			yyl3878 := r.ReadArrayStart()
			if yyl3878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3879Slc
	var yyhl3879 bool = l >= 0
	for yyj3879 := 0; ; yyj3879++ {
		if yyhl3879 {
			if yyj3879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3879Slc = r.DecodeBytes(yys3879Slc, true, true)
		yys3879 := string(yys3879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3879 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3880 := &x.Limits
				yym3881 := z.DecBinary()
				_ = yym3881
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3880), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3879)
		} // end switch yys3879
	} // end for yyj3879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3882 int
	var yyb3882 bool
	var yyhl3882 bool = l >= 0
	yyj3882++
	if yyhl3882 {
		yyb3882 = yyj3882 > l
	} else {
		yyb3882 = r.CheckBreak()
	}
	if yyb3882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3883 := &x.Limits
		yym3884 := z.DecBinary()
		_ = yym3884
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3883), d)
		}
	}
	for {
		yyj3882++
		if yyhl3882 {
			yyb3882 = yyj3882 > l
		} else {
			yyb3882 = r.CheckBreak()
		}
		if yyb3882 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3882-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3885 := z.EncBinary()
		_ = yym3885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3886 := !z.EncBinary()
			yy2arr3886 := z.EncBasicHandle().StructToArray
			var yyq3886 [4]bool
			_, _, _ = yysep3886, yyq3886, yy2arr3886
			const yyr3886 bool = false
			yyq3886[0] = x.Kind != ""
			yyq3886[1] = x.APIVersion != ""
			yyq3886[2] = true
			yyq3886[3] = true
			var yynn3886 int
			if yyr3886 || yy2arr3886 {
				r.EncodeArrayStart(4)
			} else {
				yynn3886 = 0
				for _, b := range yyq3886 {
					if b {
						yynn3886++
					}
				}
				r.EncodeMapStart(yynn3886)
				yynn3886 = 0
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[0] {
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[1] {
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[2] {
					yy3894 := &x.ObjectMeta
					yy3894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3895 := &x.ObjectMeta
					yy3895.CodecEncodeSelf(e)
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[3] {
					yy3897 := &x.Spec
					yy3897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3898 := &x.Spec
					yy3898.CodecEncodeSelf(e)
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3899 := z.DecBinary()
	_ = yym3899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3900 := r.ContainerType()
		if yyct3900 == codecSelferValueTypeMap1234 {
			yyl3900 := r.ReadMapStart()
			if yyl3900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3900, d)
			}
		} else if yyct3900 == codecSelferValueTypeArray1234 {
			yyl3900 := r.ReadArrayStart()
			if yyl3900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3901Slc
	var yyhl3901 bool = l >= 0
	for yyj3901 := 0; ; yyj3901++ {
		if yyhl3901 {
			if yyj3901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3901Slc = r.DecodeBytes(yys3901Slc, true, true)
		yys3901 := string(yys3901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3901 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3904 := &x.ObjectMeta
				yyv3904.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3905 := &x.Spec
				yyv3905.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3901)
		} // end switch yys3901
	} // end for yyj3901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3906 int
	var yyb3906 bool
	var yyhl3906 bool = l >= 0
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3909 := &x.ObjectMeta
		yyv3909.CodecDecodeSelf(d)
	}
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3910 := &x.Spec
		yyv3910.CodecDecodeSelf(d)
	}
	for {
		yyj3906++
		if yyhl3906 {
			yyb3906 = yyj3906 > l
		} else {
			yyb3906 = r.CheckBreak()
		}
		if yyb3906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3911 := z.EncBinary()
		_ = yym3911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3912 := !z.EncBinary()
			yy2arr3912 := z.EncBasicHandle().StructToArray
			var yyq3912 [4]bool
			_, _, _ = yysep3912, yyq3912, yy2arr3912
			const yyr3912 bool = false
			yyq3912[0] = x.Kind != ""
			yyq3912[1] = x.APIVersion != ""
			yyq3912[2] = true
			var yynn3912 int
			if yyr3912 || yy2arr3912 {
				r.EncodeArrayStart(4)
			} else {
				yynn3912 = 1
				for _, b := range yyq3912 {
					if b {
						yynn3912++
					}
				}
				r.EncodeMapStart(yynn3912)
				yynn3912 = 0
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[0] {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3912[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[1] {
					yym3917 := z.EncBinary()
					_ = yym3917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3912[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[2] {
					yy3920 := &x.ListMeta
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3920) {
					} else {
						z.EncFallback(yy3920)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3912[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3922 := &x.ListMeta
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3922) {
					} else {
						z.EncFallback(yy3922)
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3925 := z.EncBinary()
					_ = yym3925
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3927 := z.DecBinary()
	_ = yym3927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3928 := r.ContainerType()
		if yyct3928 == codecSelferValueTypeMap1234 {
			yyl3928 := r.ReadMapStart()
			if yyl3928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3928, d)
			}
		} else if yyct3928 == codecSelferValueTypeArray1234 {
			yyl3928 := r.ReadArrayStart()
			if yyl3928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3929Slc
	var yyhl3929 bool = l >= 0
	for yyj3929 := 0; ; yyj3929++ {
		if yyhl3929 {
			if yyj3929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3929Slc = r.DecodeBytes(yys3929Slc, true, true)
		yys3929 := string(yys3929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3929 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3932 := &x.ListMeta
				yym3933 := z.DecBinary()
				_ = yym3933
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3932) {
				} else {
					z.DecFallback(yyv3932, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3934 := &x.Items
				yym3935 := z.DecBinary()
				_ = yym3935
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3934), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3929)
		} // end switch yys3929
	} // end for yyj3929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3936 int
	var yyb3936 bool
	var yyhl3936 bool = l >= 0
	yyj3936++
	if yyhl3936 {
		yyb3936 = yyj3936 > l
	} else {
		yyb3936 = r.CheckBreak()
	}
	if yyb3936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3936++
	if yyhl3936 {
		yyb3936 = yyj3936 > l
	} else {
		yyb3936 = r.CheckBreak()
	}
	if yyb3936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3936++
	if yyhl3936 {
		yyb3936 = yyj3936 > l
	} else {
		yyb3936 = r.CheckBreak()
	}
	if yyb3936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3939 := &x.ListMeta
		yym3940 := z.DecBinary()
		_ = yym3940
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3939) {
		} else {
			z.DecFallback(yyv3939, false)
		}
	}
	yyj3936++
	if yyhl3936 {
		yyb3936 = yyj3936 > l
	} else {
		yyb3936 = r.CheckBreak()
	}
	if yyb3936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3941 := &x.Items
		yym3942 := z.DecBinary()
		_ = yym3942
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3941), d)
		}
	}
	for {
		yyj3936++
		if yyhl3936 {
			yyb3936 = yyj3936 > l
		} else {
			yyb3936 = r.CheckBreak()
		}
		if yyb3936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3943 := z.EncBinary()
	_ = yym3943
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3944 := z.DecBinary()
	_ = yym3944
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3945 := z.EncBinary()
		_ = yym3945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3946 := !z.EncBinary()
			yy2arr3946 := z.EncBasicHandle().StructToArray
			var yyq3946 [2]bool
			_, _, _ = yysep3946, yyq3946, yy2arr3946
			const yyr3946 bool = false
			yyq3946[0] = len(x.Hard) != 0
			yyq3946[1] = len(x.Scopes) != 0
			var yynn3946 int
			if yyr3946 || yy2arr3946 {
				r.EncodeArrayStart(2)
			} else {
				yynn3946 = 0
				for _, b := range yyq3946 {
					if b {
						yynn3946++
					}
				}
				r.EncodeMapStart(yynn3946)
				yynn3946 = 0
			}
			if yyr3946 || yy2arr3946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3946[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3946[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3946 || yy2arr3946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3946[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3949 := z.EncBinary()
						_ = yym3949
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3950 := z.EncBinary()
						_ = yym3950
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3946 || yy2arr3946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3951 := z.DecBinary()
	_ = yym3951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3952 := r.ContainerType()
		if yyct3952 == codecSelferValueTypeMap1234 {
			yyl3952 := r.ReadMapStart()
			if yyl3952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3952, d)
			}
		} else if yyct3952 == codecSelferValueTypeArray1234 {
			yyl3952 := r.ReadArrayStart()
			if yyl3952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3953Slc
	var yyhl3953 bool = l >= 0
	for yyj3953 := 0; ; yyj3953++ {
		if yyhl3953 {
			if yyj3953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3953Slc = r.DecodeBytes(yys3953Slc, true, true)
		yys3953 := string(yys3953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3953 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3954 := &x.Hard
				yyv3954.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3955 := &x.Scopes
				yym3956 := z.DecBinary()
				_ = yym3956
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3955), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3953)
		} // end switch yys3953
	} // end for yyj3953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3957 int
	var yyb3957 bool
	var yyhl3957 bool = l >= 0
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3958 := &x.Hard
		yyv3958.CodecDecodeSelf(d)
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3959 := &x.Scopes
		yym3960 := z.DecBinary()
		_ = yym3960
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3959), d)
		}
	}
	for {
		yyj3957++
		if yyhl3957 {
			yyb3957 = yyj3957 > l
		} else {
			yyb3957 = r.CheckBreak()
		}
		if yyb3957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3961 := z.EncBinary()
		_ = yym3961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3962 := !z.EncBinary()
			yy2arr3962 := z.EncBasicHandle().StructToArray
			var yyq3962 [2]bool
			_, _, _ = yysep3962, yyq3962, yy2arr3962
			const yyr3962 bool = false
			yyq3962[0] = len(x.Hard) != 0
			yyq3962[1] = len(x.Used) != 0
			var yynn3962 int
			if yyr3962 || yy2arr3962 {
				r.EncodeArrayStart(2)
			} else {
				yynn3962 = 0
				for _, b := range yyq3962 {
					if b {
						yynn3962++
					}
				}
				r.EncodeMapStart(yynn3962)
				yynn3962 = 0
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3962[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3962[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3962[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3962[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3962 || yy2arr3962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3965 := z.DecBinary()
	_ = yym3965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3966 := r.ContainerType()
		if yyct3966 == codecSelferValueTypeMap1234 {
			yyl3966 := r.ReadMapStart()
			if yyl3966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3966, d)
			}
		} else if yyct3966 == codecSelferValueTypeArray1234 {
			yyl3966 := r.ReadArrayStart()
			if yyl3966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3967Slc
	var yyhl3967 bool = l >= 0
	for yyj3967 := 0; ; yyj3967++ {
		if yyhl3967 {
			if yyj3967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3967Slc = r.DecodeBytes(yys3967Slc, true, true)
		yys3967 := string(yys3967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3967 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3968 := &x.Hard
				yyv3968.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3969 := &x.Used
				yyv3969.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3967)
		} // end switch yys3967
	} // end for yyj3967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3970 int
	var yyb3970 bool
	var yyhl3970 bool = l >= 0
	yyj3970++
	if yyhl3970 {
		yyb3970 = yyj3970 > l
	} else {
		yyb3970 = r.CheckBreak()
	}
	if yyb3970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3971 := &x.Hard
		yyv3971.CodecDecodeSelf(d)
	}
	yyj3970++
	if yyhl3970 {
		yyb3970 = yyj3970 > l
	} else {
		yyb3970 = r.CheckBreak()
	}
	if yyb3970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3972 := &x.Used
		yyv3972.CodecDecodeSelf(d)
	}
	for {
		yyj3970++
		if yyhl3970 {
			yyb3970 = yyj3970 > l
		} else {
			yyb3970 = r.CheckBreak()
		}
		if yyb3970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3973 := z.EncBinary()
		_ = yym3973
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3974 := !z.EncBinary()
			yy2arr3974 := z.EncBasicHandle().StructToArray
			var yyq3974 [5]bool
			_, _, _ = yysep3974, yyq3974, yy2arr3974
			const yyr3974 bool = false
			yyq3974[0] = x.Kind != ""
			yyq3974[1] = x.APIVersion != ""
			yyq3974[2] = true
			yyq3974[3] = true
			yyq3974[4] = true
			var yynn3974 int
			if yyr3974 || yy2arr3974 {
				r.EncodeArrayStart(5)
			} else {
				yynn3974 = 0
				for _, b := range yyq3974 {
					if b {
						yynn3974++
					}
				}
				r.EncodeMapStart(yynn3974)
				yynn3974 = 0
			}
			if yyr3974 || yy2arr3974 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3974[0] {
					yym3976 := z.EncBinary()
					_ = yym3976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3974[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3977 := z.EncBinary()
					_ = yym3977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3974 || yy2arr3974 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3974[1] {
					yym3979 := z.EncBinary()
					_ = yym3979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3974[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3980 := z.EncBinary()
					_ = yym3980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3974 || yy2arr3974 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3974[2] {
					yy3982 := &x.ObjectMeta
					yy3982.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3974[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3983 := &x.ObjectMeta
					yy3983.CodecEncodeSelf(e)
				}
			}
			if yyr3974 || yy2arr3974 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3974[3] {
					yy3985 := &x.Spec
					yy3985.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3974[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3986 := &x.Spec
					yy3986.CodecEncodeSelf(e)
				}
			}
			if yyr3974 || yy2arr3974 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3974[4] {
					yy3988 := &x.Status
					yy3988.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3974[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3989 := &x.Status
					yy3989.CodecEncodeSelf(e)
				}
			}
			if yyr3974 || yy2arr3974 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3990 := z.DecBinary()
	_ = yym3990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3991 := r.ContainerType()
		if yyct3991 == codecSelferValueTypeMap1234 {
			yyl3991 := r.ReadMapStart()
			if yyl3991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3991, d)
			}
		} else if yyct3991 == codecSelferValueTypeArray1234 {
			yyl3991 := r.ReadArrayStart()
			if yyl3991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3992Slc
	var yyhl3992 bool = l >= 0
	for yyj3992 := 0; ; yyj3992++ {
		if yyhl3992 {
			if yyj3992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3992Slc = r.DecodeBytes(yys3992Slc, true, true)
		yys3992 := string(yys3992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3992 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3995 := &x.ObjectMeta
				yyv3995.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3996 := &x.Spec
				yyv3996.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3997 := &x.Status
				yyv3997.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3992)
		} // end switch yys3992
	} // end for yyj3992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3998 int
	var yyb3998 bool
	var yyhl3998 bool = l >= 0
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4001 := &x.ObjectMeta
		yyv4001.CodecDecodeSelf(d)
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4002 := &x.Spec
		yyv4002.CodecDecodeSelf(d)
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4003 := &x.Status
		yyv4003.CodecDecodeSelf(d)
	}
	for {
		yyj3998++
		if yyhl3998 {
			yyb3998 = yyj3998 > l
		} else {
			yyb3998 = r.CheckBreak()
		}
		if yyb3998 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3998-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4004 := z.EncBinary()
		_ = yym4004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4005 := !z.EncBinary()
			yy2arr4005 := z.EncBasicHandle().StructToArray
			var yyq4005 [4]bool
			_, _, _ = yysep4005, yyq4005, yy2arr4005
			const yyr4005 bool = false
			yyq4005[0] = x.Kind != ""
			yyq4005[1] = x.APIVersion != ""
			yyq4005[2] = true
			var yynn4005 int
			if yyr4005 || yy2arr4005 {
				r.EncodeArrayStart(4)
			} else {
				yynn4005 = 1
				for _, b := range yyq4005 {
					if b {
						yynn4005++
					}
				}
				r.EncodeMapStart(yynn4005)
				yynn4005 = 0
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[0] {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4005[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[1] {
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4005[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[2] {
					yy4013 := &x.ListMeta
					yym4014 := z.EncBinary()
					_ = yym4014
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4013) {
					} else {
						z.EncFallback(yy4013)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4005[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4015 := &x.ListMeta
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4015) {
					} else {
						z.EncFallback(yy4015)
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4020 := z.DecBinary()
	_ = yym4020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4021 := r.ContainerType()
		if yyct4021 == codecSelferValueTypeMap1234 {
			yyl4021 := r.ReadMapStart()
			if yyl4021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4021, d)
			}
		} else if yyct4021 == codecSelferValueTypeArray1234 {
			yyl4021 := r.ReadArrayStart()
			if yyl4021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4022Slc
	var yyhl4022 bool = l >= 0
	for yyj4022 := 0; ; yyj4022++ {
		if yyhl4022 {
			if yyj4022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4022Slc = r.DecodeBytes(yys4022Slc, true, true)
		yys4022 := string(yys4022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4022 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4025 := &x.ListMeta
				yym4026 := z.DecBinary()
				_ = yym4026
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4025) {
				} else {
					z.DecFallback(yyv4025, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4027 := &x.Items
				yym4028 := z.DecBinary()
				_ = yym4028
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4027), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4022)
		} // end switch yys4022
	} // end for yyj4022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4029 int
	var yyb4029 bool
	var yyhl4029 bool = l >= 0
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4032 := &x.ListMeta
		yym4033 := z.DecBinary()
		_ = yym4033
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4032) {
		} else {
			z.DecFallback(yyv4032, false)
		}
	}
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4034 := &x.Items
		yym4035 := z.DecBinary()
		_ = yym4035
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4034), d)
		}
	}
	for {
		yyj4029++
		if yyhl4029 {
			yyb4029 = yyj4029 > l
		} else {
			yyb4029 = r.CheckBreak()
		}
		if yyb4029 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4029-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4036 := z.EncBinary()
		_ = yym4036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4037 := !z.EncBinary()
			yy2arr4037 := z.EncBasicHandle().StructToArray
			var yyq4037 [5]bool
			_, _, _ = yysep4037, yyq4037, yy2arr4037
			const yyr4037 bool = false
			yyq4037[0] = x.Kind != ""
			yyq4037[1] = x.APIVersion != ""
			yyq4037[2] = true
			yyq4037[3] = len(x.Data) != 0
			yyq4037[4] = x.Type != ""
			var yynn4037 int
			if yyr4037 || yy2arr4037 {
				r.EncodeArrayStart(5)
			} else {
				yynn4037 = 0
				for _, b := range yyq4037 {
					if b {
						yynn4037++
					}
				}
				r.EncodeMapStart(yynn4037)
				yynn4037 = 0
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[0] {
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[1] {
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[2] {
					yy4045 := &x.ObjectMeta
					yy4045.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4037[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4046 := &x.ObjectMeta
					yy4046.CodecEncodeSelf(e)
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4048 := z.EncBinary()
						_ = yym4048
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4037[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4049 := z.EncBinary()
						_ = yym4049
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4051 := z.DecBinary()
	_ = yym4051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4052 := r.ContainerType()
		if yyct4052 == codecSelferValueTypeMap1234 {
			yyl4052 := r.ReadMapStart()
			if yyl4052 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4052, d)
			}
		} else if yyct4052 == codecSelferValueTypeArray1234 {
			yyl4052 := r.ReadArrayStart()
			if yyl4052 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4053Slc
	var yyhl4053 bool = l >= 0
	for yyj4053 := 0; ; yyj4053++ {
		if yyhl4053 {
			if yyj4053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4053Slc = r.DecodeBytes(yys4053Slc, true, true)
		yys4053 := string(yys4053Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4053 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4056 := &x.ObjectMeta
				yyv4056.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4057 := &x.Data
				yym4058 := z.DecBinary()
				_ = yym4058
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4057), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4053)
		} // end switch yys4053
	} // end for yyj4053
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4060 int
	var yyb4060 bool
	var yyhl4060 bool = l >= 0
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4063 := &x.ObjectMeta
		yyv4063.CodecDecodeSelf(d)
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4064 := &x.Data
		yym4065 := z.DecBinary()
		_ = yym4065
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4064), d)
		}
	}
	yyj4060++
	if yyhl4060 {
		yyb4060 = yyj4060 > l
	} else {
		yyb4060 = r.CheckBreak()
	}
	if yyb4060 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4060++
		if yyhl4060 {
			yyb4060 = yyj4060 > l
		} else {
			yyb4060 = r.CheckBreak()
		}
		if yyb4060 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4060-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4067 := z.EncBinary()
	_ = yym4067
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4068 := z.DecBinary()
	_ = yym4068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4069 := z.EncBinary()
		_ = yym4069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4070 := !z.EncBinary()
			yy2arr4070 := z.EncBasicHandle().StructToArray
			var yyq4070 [4]bool
			_, _, _ = yysep4070, yyq4070, yy2arr4070
			const yyr4070 bool = false
			yyq4070[0] = x.Kind != ""
			yyq4070[1] = x.APIVersion != ""
			yyq4070[2] = true
			var yynn4070 int
			if yyr4070 || yy2arr4070 {
				r.EncodeArrayStart(4)
			} else {
				yynn4070 = 1
				for _, b := range yyq4070 {
					if b {
						yynn4070++
					}
				}
				r.EncodeMapStart(yynn4070)
				yynn4070 = 0
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4070[0] {
					yym4072 := z.EncBinary()
					_ = yym4072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4070[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4073 := z.EncBinary()
					_ = yym4073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4070[1] {
					yym4075 := z.EncBinary()
					_ = yym4075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4070[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4070[2] {
					yy4078 := &x.ListMeta
					yym4079 := z.EncBinary()
					_ = yym4079
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4078) {
					} else {
						z.EncFallback(yy4078)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4070[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4080 := &x.ListMeta
					yym4081 := z.EncBinary()
					_ = yym4081
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4080) {
					} else {
						z.EncFallback(yy4080)
					}
				}
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4083 := z.EncBinary()
					_ = yym4083
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4070 || yy2arr4070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4085 := z.DecBinary()
	_ = yym4085
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4086 := r.ContainerType()
		if yyct4086 == codecSelferValueTypeMap1234 {
			yyl4086 := r.ReadMapStart()
			if yyl4086 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4086, d)
			}
		} else if yyct4086 == codecSelferValueTypeArray1234 {
			yyl4086 := r.ReadArrayStart()
			if yyl4086 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4086, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4087Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4087Slc
	var yyhl4087 bool = l >= 0
	for yyj4087 := 0; ; yyj4087++ {
		if yyhl4087 {
			if yyj4087 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4087Slc = r.DecodeBytes(yys4087Slc, true, true)
		yys4087 := string(yys4087Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4087 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4090 := &x.ListMeta
				yym4091 := z.DecBinary()
				_ = yym4091
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4090) {
				} else {
					z.DecFallback(yyv4090, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4092 := &x.Items
				yym4093 := z.DecBinary()
				_ = yym4093
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4092), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4087)
		} // end switch yys4087
	} // end for yyj4087
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4094 int
	var yyb4094 bool
	var yyhl4094 bool = l >= 0
	yyj4094++
	if yyhl4094 {
		yyb4094 = yyj4094 > l
	} else {
		yyb4094 = r.CheckBreak()
	}
	if yyb4094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4094++
	if yyhl4094 {
		yyb4094 = yyj4094 > l
	} else {
		yyb4094 = r.CheckBreak()
	}
	if yyb4094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4094++
	if yyhl4094 {
		yyb4094 = yyj4094 > l
	} else {
		yyb4094 = r.CheckBreak()
	}
	if yyb4094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4097 := &x.ListMeta
		yym4098 := z.DecBinary()
		_ = yym4098
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4097) {
		} else {
			z.DecFallback(yyv4097, false)
		}
	}
	yyj4094++
	if yyhl4094 {
		yyb4094 = yyj4094 > l
	} else {
		yyb4094 = r.CheckBreak()
	}
	if yyb4094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4099 := &x.Items
		yym4100 := z.DecBinary()
		_ = yym4100
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4099), d)
		}
	}
	for {
		yyj4094++
		if yyhl4094 {
			yyb4094 = yyj4094 > l
		} else {
			yyb4094 = r.CheckBreak()
		}
		if yyb4094 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4094-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4101 := z.EncBinary()
		_ = yym4101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4102 := !z.EncBinary()
			yy2arr4102 := z.EncBasicHandle().StructToArray
			var yyq4102 [4]bool
			_, _, _ = yysep4102, yyq4102, yy2arr4102
			const yyr4102 bool = false
			yyq4102[0] = x.Kind != ""
			yyq4102[1] = x.APIVersion != ""
			yyq4102[2] = true
			yyq4102[3] = len(x.Data) != 0
			var yynn4102 int
			if yyr4102 || yy2arr4102 {
				r.EncodeArrayStart(4)
			} else {
				yynn4102 = 0
				for _, b := range yyq4102 {
					if b {
						yynn4102++
					}
				}
				r.EncodeMapStart(yynn4102)
				yynn4102 = 0
			}
			if yyr4102 || yy2arr4102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4102[0] {
					yym4104 := z.EncBinary()
					_ = yym4104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4102[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4102 || yy2arr4102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4102[1] {
					yym4107 := z.EncBinary()
					_ = yym4107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4102[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4102 || yy2arr4102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4102[2] {
					yy4110 := &x.ObjectMeta
					yy4110.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4102[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4111 := &x.ObjectMeta
					yy4111.CodecEncodeSelf(e)
				}
			}
			if yyr4102 || yy2arr4102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4102[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4113 := z.EncBinary()
						_ = yym4113
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4102[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4114 := z.EncBinary()
						_ = yym4114
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4102 || yy2arr4102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4115 := z.DecBinary()
	_ = yym4115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4116 := r.ContainerType()
		if yyct4116 == codecSelferValueTypeMap1234 {
			yyl4116 := r.ReadMapStart()
			if yyl4116 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4116, d)
			}
		} else if yyct4116 == codecSelferValueTypeArray1234 {
			yyl4116 := r.ReadArrayStart()
			if yyl4116 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4117Slc
	var yyhl4117 bool = l >= 0
	for yyj4117 := 0; ; yyj4117++ {
		if yyhl4117 {
			if yyj4117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4117Slc = r.DecodeBytes(yys4117Slc, true, true)
		yys4117 := string(yys4117Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4117 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4120 := &x.ObjectMeta
				yyv4120.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4121 := &x.Data
				yym4122 := z.DecBinary()
				_ = yym4122
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4121, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4117)
		} // end switch yys4117
	} // end for yyj4117
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4123 int
	var yyb4123 bool
	var yyhl4123 bool = l >= 0
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4126 := &x.ObjectMeta
		yyv4126.CodecDecodeSelf(d)
	}
	yyj4123++
	if yyhl4123 {
		yyb4123 = yyj4123 > l
	} else {
		yyb4123 = r.CheckBreak()
	}
	if yyb4123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4127 := &x.Data
		yym4128 := z.DecBinary()
		_ = yym4128
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4127, false, d)
		}
	}
	for {
		yyj4123++
		if yyhl4123 {
			yyb4123 = yyj4123 > l
		} else {
			yyb4123 = r.CheckBreak()
		}
		if yyb4123 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4123-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4129 := z.EncBinary()
		_ = yym4129
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4130 := !z.EncBinary()
			yy2arr4130 := z.EncBasicHandle().StructToArray
			var yyq4130 [4]bool
			_, _, _ = yysep4130, yyq4130, yy2arr4130
			const yyr4130 bool = false
			yyq4130[0] = x.Kind != ""
			yyq4130[1] = x.APIVersion != ""
			yyq4130[2] = true
			var yynn4130 int
			if yyr4130 || yy2arr4130 {
				r.EncodeArrayStart(4)
			} else {
				yynn4130 = 1
				for _, b := range yyq4130 {
					if b {
						yynn4130++
					}
				}
				r.EncodeMapStart(yynn4130)
				yynn4130 = 0
			}
			if yyr4130 || yy2arr4130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4130[0] {
					yym4132 := z.EncBinary()
					_ = yym4132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4130[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4130 || yy2arr4130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4130[1] {
					yym4135 := z.EncBinary()
					_ = yym4135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4130[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4130 || yy2arr4130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4130[2] {
					yy4138 := &x.ListMeta
					yym4139 := z.EncBinary()
					_ = yym4139
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4138) {
					} else {
						z.EncFallback(yy4138)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4130[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4140 := &x.ListMeta
					yym4141 := z.EncBinary()
					_ = yym4141
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4140) {
					} else {
						z.EncFallback(yy4140)
					}
				}
			}
			if yyr4130 || yy2arr4130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4143 := z.EncBinary()
					_ = yym4143
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4144 := z.EncBinary()
					_ = yym4144
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4130 || yy2arr4130 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4145 := z.DecBinary()
	_ = yym4145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4146 := r.ContainerType()
		if yyct4146 == codecSelferValueTypeMap1234 {
			yyl4146 := r.ReadMapStart()
			if yyl4146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4146, d)
			}
		} else if yyct4146 == codecSelferValueTypeArray1234 {
			yyl4146 := r.ReadArrayStart()
			if yyl4146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4147Slc
	var yyhl4147 bool = l >= 0
	for yyj4147 := 0; ; yyj4147++ {
		if yyhl4147 {
			if yyj4147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4147Slc = r.DecodeBytes(yys4147Slc, true, true)
		yys4147 := string(yys4147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4147 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4150 := &x.ListMeta
				yym4151 := z.DecBinary()
				_ = yym4151
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4150) {
				} else {
					z.DecFallback(yyv4150, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4152 := &x.Items
				yym4153 := z.DecBinary()
				_ = yym4153
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4152), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4147)
		} // end switch yys4147
	} // end for yyj4147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4154 int
	var yyb4154 bool
	var yyhl4154 bool = l >= 0
	yyj4154++
	if yyhl4154 {
		yyb4154 = yyj4154 > l
	} else {
		yyb4154 = r.CheckBreak()
	}
	if yyb4154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4154++
	if yyhl4154 {
		yyb4154 = yyj4154 > l
	} else {
		yyb4154 = r.CheckBreak()
	}
	if yyb4154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4154++
	if yyhl4154 {
		yyb4154 = yyj4154 > l
	} else {
		yyb4154 = r.CheckBreak()
	}
	if yyb4154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4157 := &x.ListMeta
		yym4158 := z.DecBinary()
		_ = yym4158
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4157) {
		} else {
			z.DecFallback(yyv4157, false)
		}
	}
	yyj4154++
	if yyhl4154 {
		yyb4154 = yyj4154 > l
	} else {
		yyb4154 = r.CheckBreak()
	}
	if yyb4154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4159 := &x.Items
		yym4160 := z.DecBinary()
		_ = yym4160
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4159), d)
		}
	}
	for {
		yyj4154++
		if yyhl4154 {
			yyb4154 = yyj4154 > l
		} else {
			yyb4154 = r.CheckBreak()
		}
		if yyb4154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4161 := z.EncBinary()
	_ = yym4161
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4162 := z.DecBinary()
	_ = yym4162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4163 := z.EncBinary()
	_ = yym4163
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4164 := z.DecBinary()
	_ = yym4164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4165 := z.EncBinary()
		_ = yym4165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4166 := !z.EncBinary()
			yy2arr4166 := z.EncBasicHandle().StructToArray
			var yyq4166 [4]bool
			_, _, _ = yysep4166, yyq4166, yy2arr4166
			const yyr4166 bool = false
			yyq4166[2] = x.Message != ""
			yyq4166[3] = x.Error != ""
			var yynn4166 int
			if yyr4166 || yy2arr4166 {
				r.EncodeArrayStart(4)
			} else {
				yynn4166 = 2
				for _, b := range yyq4166 {
					if b {
						yynn4166++
					}
				}
				r.EncodeMapStart(yynn4166)
				yynn4166 = 0
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4166[2] {
					yym4170 := z.EncBinary()
					_ = yym4170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4171 := z.EncBinary()
					_ = yym4171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4166[3] {
					yym4173 := z.EncBinary()
					_ = yym4173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4174 := z.EncBinary()
					_ = yym4174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4166 || yy2arr4166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4175 := z.DecBinary()
	_ = yym4175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4176 := r.ContainerType()
		if yyct4176 == codecSelferValueTypeMap1234 {
			yyl4176 := r.ReadMapStart()
			if yyl4176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4176, d)
			}
		} else if yyct4176 == codecSelferValueTypeArray1234 {
			yyl4176 := r.ReadArrayStart()
			if yyl4176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4177Slc
	var yyhl4177 bool = l >= 0
	for yyj4177 := 0; ; yyj4177++ {
		if yyhl4177 {
			if yyj4177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4177Slc = r.DecodeBytes(yys4177Slc, true, true)
		yys4177 := string(yys4177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4177 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4177)
		} // end switch yys4177
	} // end for yyj4177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4182 int
	var yyb4182 bool
	var yyhl4182 bool = l >= 0
	yyj4182++
	if yyhl4182 {
		yyb4182 = yyj4182 > l
	} else {
		yyb4182 = r.CheckBreak()
	}
	if yyb4182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4182++
	if yyhl4182 {
		yyb4182 = yyj4182 > l
	} else {
		yyb4182 = r.CheckBreak()
	}
	if yyb4182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4182++
	if yyhl4182 {
		yyb4182 = yyj4182 > l
	} else {
		yyb4182 = r.CheckBreak()
	}
	if yyb4182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4182++
	if yyhl4182 {
		yyb4182 = yyj4182 > l
	} else {
		yyb4182 = r.CheckBreak()
	}
	if yyb4182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4182++
		if yyhl4182 {
			yyb4182 = yyj4182 > l
		} else {
			yyb4182 = r.CheckBreak()
		}
		if yyb4182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4187 := z.EncBinary()
		_ = yym4187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4188 := !z.EncBinary()
			yy2arr4188 := z.EncBasicHandle().StructToArray
			var yyq4188 [4]bool
			_, _, _ = yysep4188, yyq4188, yy2arr4188
			const yyr4188 bool = false
			yyq4188[0] = x.Kind != ""
			yyq4188[1] = x.APIVersion != ""
			yyq4188[2] = true
			yyq4188[3] = len(x.Conditions) != 0
			var yynn4188 int
			if yyr4188 || yy2arr4188 {
				r.EncodeArrayStart(4)
			} else {
				yynn4188 = 0
				for _, b := range yyq4188 {
					if b {
						yynn4188++
					}
				}
				r.EncodeMapStart(yynn4188)
				yynn4188 = 0
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[0] {
					yym4190 := z.EncBinary()
					_ = yym4190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[1] {
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[2] {
					yy4196 := &x.ObjectMeta
					yy4196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4197 := &x.ObjectMeta
					yy4197.CodecEncodeSelf(e)
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4199 := z.EncBinary()
						_ = yym4199
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4188[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4200 := z.EncBinary()
						_ = yym4200
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4201 := z.DecBinary()
	_ = yym4201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4202 := r.ContainerType()
		if yyct4202 == codecSelferValueTypeMap1234 {
			yyl4202 := r.ReadMapStart()
			if yyl4202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4202, d)
			}
		} else if yyct4202 == codecSelferValueTypeArray1234 {
			yyl4202 := r.ReadArrayStart()
			if yyl4202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4203Slc
	var yyhl4203 bool = l >= 0
	for yyj4203 := 0; ; yyj4203++ {
		if yyhl4203 {
			if yyj4203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4203Slc = r.DecodeBytes(yys4203Slc, true, true)
		yys4203 := string(yys4203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4203 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4206 := &x.ObjectMeta
				yyv4206.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4207 := &x.Conditions
				yym4208 := z.DecBinary()
				_ = yym4208
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4207), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4203)
		} // end switch yys4203
	} // end for yyj4203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4209 int
	var yyb4209 bool
	var yyhl4209 bool = l >= 0
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4212 := &x.ObjectMeta
		yyv4212.CodecDecodeSelf(d)
	}
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4213 := &x.Conditions
		yym4214 := z.DecBinary()
		_ = yym4214
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4213), d)
		}
	}
	for {
		yyj4209++
		if yyhl4209 {
			yyb4209 = yyj4209 > l
		} else {
			yyb4209 = r.CheckBreak()
		}
		if yyb4209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4215 := z.EncBinary()
		_ = yym4215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4216 := !z.EncBinary()
			yy2arr4216 := z.EncBasicHandle().StructToArray
			var yyq4216 [4]bool
			_, _, _ = yysep4216, yyq4216, yy2arr4216
			const yyr4216 bool = false
			yyq4216[0] = x.Kind != ""
			yyq4216[1] = x.APIVersion != ""
			yyq4216[2] = true
			var yynn4216 int
			if yyr4216 || yy2arr4216 {
				r.EncodeArrayStart(4)
			} else {
				yynn4216 = 1
				for _, b := range yyq4216 {
					if b {
						yynn4216++
					}
				}
				r.EncodeMapStart(yynn4216)
				yynn4216 = 0
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[0] {
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4219 := z.EncBinary()
					_ = yym4219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[1] {
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4222 := z.EncBinary()
					_ = yym4222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4216[2] {
					yy4224 := &x.ListMeta
					yym4225 := z.EncBinary()
					_ = yym4225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4224) {
					} else {
						z.EncFallback(yy4224)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4226 := &x.ListMeta
					yym4227 := z.EncBinary()
					_ = yym4227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4226) {
					} else {
						z.EncFallback(yy4226)
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4216 || yy2arr4216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4231 := z.DecBinary()
	_ = yym4231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4232 := r.ContainerType()
		if yyct4232 == codecSelferValueTypeMap1234 {
			yyl4232 := r.ReadMapStart()
			if yyl4232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4232, d)
			}
		} else if yyct4232 == codecSelferValueTypeArray1234 {
			yyl4232 := r.ReadArrayStart()
			if yyl4232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4233Slc
	var yyhl4233 bool = l >= 0
	for yyj4233 := 0; ; yyj4233++ {
		if yyhl4233 {
			if yyj4233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4233Slc = r.DecodeBytes(yys4233Slc, true, true)
		yys4233 := string(yys4233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4233 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4236 := &x.ListMeta
				yym4237 := z.DecBinary()
				_ = yym4237
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4236) {
				} else {
					z.DecFallback(yyv4236, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4238 := &x.Items
				yym4239 := z.DecBinary()
				_ = yym4239
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4238), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4233)
		} // end switch yys4233
	} // end for yyj4233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4240 int
	var yyb4240 bool
	var yyhl4240 bool = l >= 0
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4243 := &x.ListMeta
		yym4244 := z.DecBinary()
		_ = yym4244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4243) {
		} else {
			z.DecFallback(yyv4243, false)
		}
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4245 := &x.Items
		yym4246 := z.DecBinary()
		_ = yym4246
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4245), d)
		}
	}
	for {
		yyj4240++
		if yyhl4240 {
			yyb4240 = yyj4240 > l
		} else {
			yyb4240 = r.CheckBreak()
		}
		if yyb4240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4247 := z.EncBinary()
		_ = yym4247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4248 := !z.EncBinary()
			yy2arr4248 := z.EncBasicHandle().StructToArray
			var yyq4248 [6]bool
			_, _, _ = yysep4248, yyq4248, yy2arr4248
			const yyr4248 bool = false
			yyq4248[0] = x.Capabilities != nil
			yyq4248[1] = x.Privileged != nil
			yyq4248[2] = x.SELinuxOptions != nil
			yyq4248[3] = x.RunAsUser != nil
			yyq4248[4] = x.RunAsNonRoot != nil
			yyq4248[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4248 int
			if yyr4248 || yy2arr4248 {
				r.EncodeArrayStart(6)
			} else {
				yynn4248 = 0
				for _, b := range yyq4248 {
					if b {
						yynn4248++
					}
				}
				r.EncodeMapStart(yynn4248)
				yynn4248 = 0
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4248[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4248[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4251 := *x.Privileged
						yym4252 := z.EncBinary()
						_ = yym4252
						if false {
						} else {
							r.EncodeBool(bool(yy4251))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4253 := *x.Privileged
						yym4254 := z.EncBinary()
						_ = yym4254
						if false {
						} else {
							r.EncodeBool(bool(yy4253))
						}
					}
				}
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4248[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4248[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4257 := *x.RunAsUser
						yym4258 := z.EncBinary()
						_ = yym4258
						if false {
						} else {
							r.EncodeInt(int64(yy4257))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4259 := *x.RunAsUser
						yym4260 := z.EncBinary()
						_ = yym4260
						if false {
						} else {
							r.EncodeInt(int64(yy4259))
						}
					}
				}
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4248[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4262 := *x.RunAsNonRoot
						yym4263 := z.EncBinary()
						_ = yym4263
						if false {
						} else {
							r.EncodeBool(bool(yy4262))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4248[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4264 := *x.RunAsNonRoot
						yym4265 := z.EncBinary()
						_ = yym4265
						if false {
						} else {
							r.EncodeBool(bool(yy4264))
						}
					}
				}
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4248[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4267 := *x.ReadOnlyRootFilesystem
						yym4268 := z.EncBinary()
						_ = yym4268
						if false {
						} else {
							r.EncodeBool(bool(yy4267))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4248[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4269 := *x.ReadOnlyRootFilesystem
						yym4270 := z.EncBinary()
						_ = yym4270
						if false {
						} else {
							r.EncodeBool(bool(yy4269))
						}
					}
				}
			}
			if yyr4248 || yy2arr4248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4271 := z.DecBinary()
	_ = yym4271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4272 := r.ContainerType()
		if yyct4272 == codecSelferValueTypeMap1234 {
			yyl4272 := r.ReadMapStart()
			if yyl4272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4272, d)
			}
		} else if yyct4272 == codecSelferValueTypeArray1234 {
			yyl4272 := r.ReadArrayStart()
			if yyl4272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4273Slc
	var yyhl4273 bool = l >= 0
	for yyj4273 := 0; ; yyj4273++ {
		if yyhl4273 {
			if yyj4273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4273Slc = r.DecodeBytes(yys4273Slc, true, true)
		yys4273 := string(yys4273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4273 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4276 := z.DecBinary()
				_ = yym4276
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4279 := z.DecBinary()
				_ = yym4279
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4281 := z.DecBinary()
				_ = yym4281
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4283 := z.DecBinary()
				_ = yym4283
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4273)
		} // end switch yys4273
	} // end for yyj4273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4284 int
	var yyb4284 bool
	var yyhl4284 bool = l >= 0
	yyj4284++
	if yyhl4284 {
		yyb4284 = yyj4284 > l
	} else {
		yyb4284 = r.CheckBreak()
	}
	if yyb4284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4284++
	if yyhl4284 {
		yyb4284 = yyj4284 > l
	} else {
		yyb4284 = r.CheckBreak()
	}
	if yyb4284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4287 := z.DecBinary()
		_ = yym4287
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4284++
	if yyhl4284 {
		yyb4284 = yyj4284 > l
	} else {
		yyb4284 = r.CheckBreak()
	}
	if yyb4284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4284++
	if yyhl4284 {
		yyb4284 = yyj4284 > l
	} else {
		yyb4284 = r.CheckBreak()
	}
	if yyb4284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4290 := z.DecBinary()
		_ = yym4290
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4284++
	if yyhl4284 {
		yyb4284 = yyj4284 > l
	} else {
		yyb4284 = r.CheckBreak()
	}
	if yyb4284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4292 := z.DecBinary()
		_ = yym4292
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4284++
	if yyhl4284 {
		yyb4284 = yyj4284 > l
	} else {
		yyb4284 = r.CheckBreak()
	}
	if yyb4284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4294 := z.DecBinary()
		_ = yym4294
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4284++
		if yyhl4284 {
			yyb4284 = yyj4284 > l
		} else {
			yyb4284 = r.CheckBreak()
		}
		if yyb4284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4295 := z.EncBinary()
		_ = yym4295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4296 := !z.EncBinary()
			yy2arr4296 := z.EncBasicHandle().StructToArray
			var yyq4296 [4]bool
			_, _, _ = yysep4296, yyq4296, yy2arr4296
			const yyr4296 bool = false
			yyq4296[0] = x.User != ""
			yyq4296[1] = x.Role != ""
			yyq4296[2] = x.Type != ""
			yyq4296[3] = x.Level != ""
			var yynn4296 int
			if yyr4296 || yy2arr4296 {
				r.EncodeArrayStart(4)
			} else {
				yynn4296 = 0
				for _, b := range yyq4296 {
					if b {
						yynn4296++
					}
				}
				r.EncodeMapStart(yynn4296)
				yynn4296 = 0
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[0] {
					yym4298 := z.EncBinary()
					_ = yym4298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4299 := z.EncBinary()
					_ = yym4299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[1] {
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4302 := z.EncBinary()
					_ = yym4302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[2] {
					yym4304 := z.EncBinary()
					_ = yym4304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4305 := z.EncBinary()
					_ = yym4305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4296[3] {
					yym4307 := z.EncBinary()
					_ = yym4307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4296[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4308 := z.EncBinary()
					_ = yym4308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4296 || yy2arr4296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4309 := z.DecBinary()
	_ = yym4309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4310 := r.ContainerType()
		if yyct4310 == codecSelferValueTypeMap1234 {
			yyl4310 := r.ReadMapStart()
			if yyl4310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4310, d)
			}
		} else if yyct4310 == codecSelferValueTypeArray1234 {
			yyl4310 := r.ReadArrayStart()
			if yyl4310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4311Slc
	var yyhl4311 bool = l >= 0
	for yyj4311 := 0; ; yyj4311++ {
		if yyhl4311 {
			if yyj4311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4311Slc = r.DecodeBytes(yys4311Slc, true, true)
		yys4311 := string(yys4311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4311 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4311)
		} // end switch yys4311
	} // end for yyj4311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4316 int
	var yyb4316 bool
	var yyhl4316 bool = l >= 0
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4316++
		if yyhl4316 {
			yyb4316 = yyj4316 > l
		} else {
			yyb4316 = r.CheckBreak()
		}
		if yyb4316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4321 := z.EncBinary()
		_ = yym4321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4322 := !z.EncBinary()
			yy2arr4322 := z.EncBasicHandle().StructToArray
			var yyq4322 [5]bool
			_, _, _ = yysep4322, yyq4322, yy2arr4322
			const yyr4322 bool = false
			yyq4322[0] = x.Kind != ""
			yyq4322[1] = x.APIVersion != ""
			yyq4322[2] = true
			var yynn4322 int
			if yyr4322 || yy2arr4322 {
				r.EncodeArrayStart(5)
			} else {
				yynn4322 = 2
				for _, b := range yyq4322 {
					if b {
						yynn4322++
					}
				}
				r.EncodeMapStart(yynn4322)
				yynn4322 = 0
			}
			if yyr4322 || yy2arr4322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4322[0] {
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4322 || yy2arr4322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4322[1] {
					yym4327 := z.EncBinary()
					_ = yym4327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4322 || yy2arr4322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4322[2] {
					yy4330 := &x.ObjectMeta
					yy4330.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4322[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4331 := &x.ObjectMeta
					yy4331.CodecEncodeSelf(e)
				}
			}
			if yyr4322 || yy2arr4322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4333 := z.EncBinary()
				_ = yym4333
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4334 := z.EncBinary()
				_ = yym4334
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4322 || yy2arr4322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4336 := z.EncBinary()
					_ = yym4336
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4322 || yy2arr4322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4338 := z.DecBinary()
	_ = yym4338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4339 := r.ContainerType()
		if yyct4339 == codecSelferValueTypeMap1234 {
			yyl4339 := r.ReadMapStart()
			if yyl4339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4339, d)
			}
		} else if yyct4339 == codecSelferValueTypeArray1234 {
			yyl4339 := r.ReadArrayStart()
			if yyl4339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4340Slc
	var yyhl4340 bool = l >= 0
	for yyj4340 := 0; ; yyj4340++ {
		if yyhl4340 {
			if yyj4340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4340Slc = r.DecodeBytes(yys4340Slc, true, true)
		yys4340 := string(yys4340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4340 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4343 := &x.ObjectMeta
				yyv4343.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4345 := &x.Data
				yym4346 := z.DecBinary()
				_ = yym4346
				if false {
				} else {
					*yyv4345 = r.DecodeBytes(*(*[]byte)(yyv4345), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4340)
		} // end switch yys4340
	} // end for yyj4340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4347 int
	var yyb4347 bool
	var yyhl4347 bool = l >= 0
	yyj4347++
	if yyhl4347 {
		yyb4347 = yyj4347 > l
	} else {
		yyb4347 = r.CheckBreak()
	}
	if yyb4347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4347++
	if yyhl4347 {
		yyb4347 = yyj4347 > l
	} else {
		yyb4347 = r.CheckBreak()
	}
	if yyb4347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4347++
	if yyhl4347 {
		yyb4347 = yyj4347 > l
	} else {
		yyb4347 = r.CheckBreak()
	}
	if yyb4347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4350 := &x.ObjectMeta
		yyv4350.CodecDecodeSelf(d)
	}
	yyj4347++
	if yyhl4347 {
		yyb4347 = yyj4347 > l
	} else {
		yyb4347 = r.CheckBreak()
	}
	if yyb4347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4347++
	if yyhl4347 {
		yyb4347 = yyj4347 > l
	} else {
		yyb4347 = r.CheckBreak()
	}
	if yyb4347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4352 := &x.Data
		yym4353 := z.DecBinary()
		_ = yym4353
		if false {
		} else {
			*yyv4352 = r.DecodeBytes(*(*[]byte)(yyv4352), false, false)
		}
	}
	for {
		yyj4347++
		if yyhl4347 {
			yyb4347 = yyj4347 > l
		} else {
			yyb4347 = r.CheckBreak()
		}
		if yyb4347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4354 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4355 := &yyv4354
		yy4355.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4356 := *v
	yyh4356, yyl4356 := z.DecSliceHelperStart()
	var yyc4356 bool
	if yyl4356 == 0 {
		if yyv4356 == nil {
			yyv4356 = []OwnerReference{}
			yyc4356 = true
		} else if len(yyv4356) != 0 {
			yyv4356 = yyv4356[:0]
			yyc4356 = true
		}
	} else if yyl4356 > 0 {
		var yyrr4356, yyrl4356 int
		var yyrt4356 bool
		if yyl4356 > cap(yyv4356) {

			yyrg4356 := len(yyv4356) > 0
			yyv24356 := yyv4356
			yyrl4356, yyrt4356 = z.DecInferLen(yyl4356, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4356 {
				if yyrl4356 <= cap(yyv4356) {
					yyv4356 = yyv4356[:yyrl4356]
				} else {
					yyv4356 = make([]OwnerReference, yyrl4356)
				}
			} else {
				yyv4356 = make([]OwnerReference, yyrl4356)
			}
			yyc4356 = true
			yyrr4356 = len(yyv4356)
			if yyrg4356 {
				copy(yyv4356, yyv24356)
			}
		} else if yyl4356 != len(yyv4356) {
			yyv4356 = yyv4356[:yyl4356]
			yyc4356 = true
		}
		yyj4356 := 0
		for ; yyj4356 < yyrr4356; yyj4356++ {
			yyh4356.ElemContainerState(yyj4356)
			if r.TryDecodeAsNil() {
				yyv4356[yyj4356] = OwnerReference{}
			} else {
				yyv4357 := &yyv4356[yyj4356]
				yyv4357.CodecDecodeSelf(d)
			}

		}
		if yyrt4356 {
			for ; yyj4356 < yyl4356; yyj4356++ {
				yyv4356 = append(yyv4356, OwnerReference{})
				yyh4356.ElemContainerState(yyj4356)
				if r.TryDecodeAsNil() {
					yyv4356[yyj4356] = OwnerReference{}
				} else {
					yyv4358 := &yyv4356[yyj4356]
					yyv4358.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4356 := 0
		for ; !r.CheckBreak(); yyj4356++ {

			if yyj4356 >= len(yyv4356) {
				yyv4356 = append(yyv4356, OwnerReference{}) // var yyz4356 OwnerReference
				yyc4356 = true
			}
			yyh4356.ElemContainerState(yyj4356)
			if yyj4356 < len(yyv4356) {
				if r.TryDecodeAsNil() {
					yyv4356[yyj4356] = OwnerReference{}
				} else {
					yyv4359 := &yyv4356[yyj4356]
					yyv4359.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4356 < len(yyv4356) {
			yyv4356 = yyv4356[:yyj4356]
			yyc4356 = true
		} else if yyj4356 == 0 && yyv4356 == nil {
			yyv4356 = []OwnerReference{}
			yyc4356 = true
		}
	}
	yyh4356.End()
	if yyc4356 {
		*v = yyv4356
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4360 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4360.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4361 := *v
	yyh4361, yyl4361 := z.DecSliceHelperStart()
	var yyc4361 bool
	if yyl4361 == 0 {
		if yyv4361 == nil {
			yyv4361 = []PersistentVolumeAccessMode{}
			yyc4361 = true
		} else if len(yyv4361) != 0 {
			yyv4361 = yyv4361[:0]
			yyc4361 = true
		}
	} else if yyl4361 > 0 {
		var yyrr4361, yyrl4361 int
		var yyrt4361 bool
		if yyl4361 > cap(yyv4361) {

			yyrl4361, yyrt4361 = z.DecInferLen(yyl4361, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4361 {
				if yyrl4361 <= cap(yyv4361) {
					yyv4361 = yyv4361[:yyrl4361]
				} else {
					yyv4361 = make([]PersistentVolumeAccessMode, yyrl4361)
				}
			} else {
				yyv4361 = make([]PersistentVolumeAccessMode, yyrl4361)
			}
			yyc4361 = true
			yyrr4361 = len(yyv4361)
		} else if yyl4361 != len(yyv4361) {
			yyv4361 = yyv4361[:yyl4361]
			yyc4361 = true
		}
		yyj4361 := 0
		for ; yyj4361 < yyrr4361; yyj4361++ {
			yyh4361.ElemContainerState(yyj4361)
			if r.TryDecodeAsNil() {
				yyv4361[yyj4361] = ""
			} else {
				yyv4361[yyj4361] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4361 {
			for ; yyj4361 < yyl4361; yyj4361++ {
				yyv4361 = append(yyv4361, "")
				yyh4361.ElemContainerState(yyj4361)
				if r.TryDecodeAsNil() {
					yyv4361[yyj4361] = ""
				} else {
					yyv4361[yyj4361] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4361 := 0
		for ; !r.CheckBreak(); yyj4361++ {

			if yyj4361 >= len(yyv4361) {
				yyv4361 = append(yyv4361, "") // var yyz4361 PersistentVolumeAccessMode
				yyc4361 = true
			}
			yyh4361.ElemContainerState(yyj4361)
			if yyj4361 < len(yyv4361) {
				if r.TryDecodeAsNil() {
					yyv4361[yyj4361] = ""
				} else {
					yyv4361[yyj4361] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4361 < len(yyv4361) {
			yyv4361 = yyv4361[:yyj4361]
			yyc4361 = true
		} else if yyj4361 == 0 && yyv4361 == nil {
			yyv4361 = []PersistentVolumeAccessMode{}
			yyc4361 = true
		}
	}
	yyh4361.End()
	if yyc4361 {
		*v = yyv4361
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4365 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4366 := &yyv4365
		yy4366.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4367 := *v
	yyh4367, yyl4367 := z.DecSliceHelperStart()
	var yyc4367 bool
	if yyl4367 == 0 {
		if yyv4367 == nil {
			yyv4367 = []PersistentVolume{}
			yyc4367 = true
		} else if len(yyv4367) != 0 {
			yyv4367 = yyv4367[:0]
			yyc4367 = true
		}
	} else if yyl4367 > 0 {
		var yyrr4367, yyrl4367 int
		var yyrt4367 bool
		if yyl4367 > cap(yyv4367) {

			yyrg4367 := len(yyv4367) > 0
			yyv24367 := yyv4367
			yyrl4367, yyrt4367 = z.DecInferLen(yyl4367, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt4367 {
				if yyrl4367 <= cap(yyv4367) {
					yyv4367 = yyv4367[:yyrl4367]
				} else {
					yyv4367 = make([]PersistentVolume, yyrl4367)
				}
			} else {
				yyv4367 = make([]PersistentVolume, yyrl4367)
			}
			yyc4367 = true
			yyrr4367 = len(yyv4367)
			if yyrg4367 {
				copy(yyv4367, yyv24367)
			}
		} else if yyl4367 != len(yyv4367) {
			yyv4367 = yyv4367[:yyl4367]
			yyc4367 = true
		}
		yyj4367 := 0
		for ; yyj4367 < yyrr4367; yyj4367++ {
			yyh4367.ElemContainerState(yyj4367)
			if r.TryDecodeAsNil() {
				yyv4367[yyj4367] = PersistentVolume{}
			} else {
				yyv4368 := &yyv4367[yyj4367]
				yyv4368.CodecDecodeSelf(d)
			}

		}
		if yyrt4367 {
			for ; yyj4367 < yyl4367; yyj4367++ {
				yyv4367 = append(yyv4367, PersistentVolume{})
				yyh4367.ElemContainerState(yyj4367)
				if r.TryDecodeAsNil() {
					yyv4367[yyj4367] = PersistentVolume{}
				} else {
					yyv4369 := &yyv4367[yyj4367]
					yyv4369.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4367 := 0
		for ; !r.CheckBreak(); yyj4367++ {

			if yyj4367 >= len(yyv4367) {
				yyv4367 = append(yyv4367, PersistentVolume{}) // var yyz4367 PersistentVolume
				yyc4367 = true
			}
			yyh4367.ElemContainerState(yyj4367)
			if yyj4367 < len(yyv4367) {
				if r.TryDecodeAsNil() {
					yyv4367[yyj4367] = PersistentVolume{}
				} else {
					yyv4370 := &yyv4367[yyj4367]
					yyv4370.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4367 < len(yyv4367) {
			yyv4367 = yyv4367[:yyj4367]
			yyc4367 = true
		} else if yyj4367 == 0 && yyv4367 == nil {
			yyv4367 = []PersistentVolume{}
			yyc4367 = true
		}
	}
	yyh4367.End()
	if yyc4367 {
		*v = yyv4367
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4371 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4372 := &yyv4371
		yy4372.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4373 := *v
	yyh4373, yyl4373 := z.DecSliceHelperStart()
	var yyc4373 bool
	if yyl4373 == 0 {
		if yyv4373 == nil {
			yyv4373 = []PersistentVolumeClaim{}
			yyc4373 = true
		} else if len(yyv4373) != 0 {
			yyv4373 = yyv4373[:0]
			yyc4373 = true
		}
	} else if yyl4373 > 0 {
		var yyrr4373, yyrl4373 int
		var yyrt4373 bool
		if yyl4373 > cap(yyv4373) {

			yyrg4373 := len(yyv4373) > 0
			yyv24373 := yyv4373
			yyrl4373, yyrt4373 = z.DecInferLen(yyl4373, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4373 {
				if yyrl4373 <= cap(yyv4373) {
					yyv4373 = yyv4373[:yyrl4373]
				} else {
					yyv4373 = make([]PersistentVolumeClaim, yyrl4373)
				}
			} else {
				yyv4373 = make([]PersistentVolumeClaim, yyrl4373)
			}
			yyc4373 = true
			yyrr4373 = len(yyv4373)
			if yyrg4373 {
				copy(yyv4373, yyv24373)
			}
		} else if yyl4373 != len(yyv4373) {
			yyv4373 = yyv4373[:yyl4373]
			yyc4373 = true
		}
		yyj4373 := 0
		for ; yyj4373 < yyrr4373; yyj4373++ {
			yyh4373.ElemContainerState(yyj4373)
			if r.TryDecodeAsNil() {
				yyv4373[yyj4373] = PersistentVolumeClaim{}
			} else {
				yyv4374 := &yyv4373[yyj4373]
				yyv4374.CodecDecodeSelf(d)
			}

		}
		if yyrt4373 {
			for ; yyj4373 < yyl4373; yyj4373++ {
				yyv4373 = append(yyv4373, PersistentVolumeClaim{})
				yyh4373.ElemContainerState(yyj4373)
				if r.TryDecodeAsNil() {
					yyv4373[yyj4373] = PersistentVolumeClaim{}
				} else {
					yyv4375 := &yyv4373[yyj4373]
					yyv4375.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4373 := 0
		for ; !r.CheckBreak(); yyj4373++ {

			if yyj4373 >= len(yyv4373) {
				yyv4373 = append(yyv4373, PersistentVolumeClaim{}) // var yyz4373 PersistentVolumeClaim
				yyc4373 = true
			}
			yyh4373.ElemContainerState(yyj4373)
			if yyj4373 < len(yyv4373) {
				if r.TryDecodeAsNil() {
					yyv4373[yyj4373] = PersistentVolumeClaim{}
				} else {
					yyv4376 := &yyv4373[yyj4373]
					yyv4376.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4373 < len(yyv4373) {
			yyv4373 = yyv4373[:yyj4373]
			yyc4373 = true
		} else if yyj4373 == 0 && yyv4373 == nil {
			yyv4373 = []PersistentVolumeClaim{}
			yyc4373 = true
		}
	}
	yyh4373.End()
	if yyc4373 {
		*v = yyv4373
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4377 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4378 := &yyv4377
		yy4378.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4379 := *v
	yyh4379, yyl4379 := z.DecSliceHelperStart()
	var yyc4379 bool
	if yyl4379 == 0 {
		if yyv4379 == nil {
			yyv4379 = []KeyToPath{}
			yyc4379 = true
		} else if len(yyv4379) != 0 {
			yyv4379 = yyv4379[:0]
			yyc4379 = true
		}
	} else if yyl4379 > 0 {
		var yyrr4379, yyrl4379 int
		var yyrt4379 bool
		if yyl4379 > cap(yyv4379) {

			yyrg4379 := len(yyv4379) > 0
			yyv24379 := yyv4379
			yyrl4379, yyrt4379 = z.DecInferLen(yyl4379, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4379 {
				if yyrl4379 <= cap(yyv4379) {
					yyv4379 = yyv4379[:yyrl4379]
				} else {
					yyv4379 = make([]KeyToPath, yyrl4379)
				}
			} else {
				yyv4379 = make([]KeyToPath, yyrl4379)
			}
			yyc4379 = true
			yyrr4379 = len(yyv4379)
			if yyrg4379 {
				copy(yyv4379, yyv24379)
			}
		} else if yyl4379 != len(yyv4379) {
			yyv4379 = yyv4379[:yyl4379]
			yyc4379 = true
		}
		yyj4379 := 0
		for ; yyj4379 < yyrr4379; yyj4379++ {
			yyh4379.ElemContainerState(yyj4379)
			if r.TryDecodeAsNil() {
				yyv4379[yyj4379] = KeyToPath{}
			} else {
				yyv4380 := &yyv4379[yyj4379]
				yyv4380.CodecDecodeSelf(d)
			}

		}
		if yyrt4379 {
			for ; yyj4379 < yyl4379; yyj4379++ {
				yyv4379 = append(yyv4379, KeyToPath{})
				yyh4379.ElemContainerState(yyj4379)
				if r.TryDecodeAsNil() {
					yyv4379[yyj4379] = KeyToPath{}
				} else {
					yyv4381 := &yyv4379[yyj4379]
					yyv4381.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4379 := 0
		for ; !r.CheckBreak(); yyj4379++ {

			if yyj4379 >= len(yyv4379) {
				yyv4379 = append(yyv4379, KeyToPath{}) // var yyz4379 KeyToPath
				yyc4379 = true
			}
			yyh4379.ElemContainerState(yyj4379)
			if yyj4379 < len(yyv4379) {
				if r.TryDecodeAsNil() {
					yyv4379[yyj4379] = KeyToPath{}
				} else {
					yyv4382 := &yyv4379[yyj4379]
					yyv4382.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4379 < len(yyv4379) {
			yyv4379 = yyv4379[:yyj4379]
			yyc4379 = true
		} else if yyj4379 == 0 && yyv4379 == nil {
			yyv4379 = []KeyToPath{}
			yyc4379 = true
		}
	}
	yyh4379.End()
	if yyc4379 {
		*v = yyv4379
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4383 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4384 := &yyv4383
		yy4384.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4385 := *v
	yyh4385, yyl4385 := z.DecSliceHelperStart()
	var yyc4385 bool
	if yyl4385 == 0 {
		if yyv4385 == nil {
			yyv4385 = []DownwardAPIVolumeFile{}
			yyc4385 = true
		} else if len(yyv4385) != 0 {
			yyv4385 = yyv4385[:0]
			yyc4385 = true
		}
	} else if yyl4385 > 0 {
		var yyrr4385, yyrl4385 int
		var yyrt4385 bool
		if yyl4385 > cap(yyv4385) {

			yyrg4385 := len(yyv4385) > 0
			yyv24385 := yyv4385
			yyrl4385, yyrt4385 = z.DecInferLen(yyl4385, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4385 {
				if yyrl4385 <= cap(yyv4385) {
					yyv4385 = yyv4385[:yyrl4385]
				} else {
					yyv4385 = make([]DownwardAPIVolumeFile, yyrl4385)
				}
			} else {
				yyv4385 = make([]DownwardAPIVolumeFile, yyrl4385)
			}
			yyc4385 = true
			yyrr4385 = len(yyv4385)
			if yyrg4385 {
				copy(yyv4385, yyv24385)
			}
		} else if yyl4385 != len(yyv4385) {
			yyv4385 = yyv4385[:yyl4385]
			yyc4385 = true
		}
		yyj4385 := 0
		for ; yyj4385 < yyrr4385; yyj4385++ {
			yyh4385.ElemContainerState(yyj4385)
			if r.TryDecodeAsNil() {
				yyv4385[yyj4385] = DownwardAPIVolumeFile{}
			} else {
				yyv4386 := &yyv4385[yyj4385]
				yyv4386.CodecDecodeSelf(d)
			}

		}
		if yyrt4385 {
			for ; yyj4385 < yyl4385; yyj4385++ {
				yyv4385 = append(yyv4385, DownwardAPIVolumeFile{})
				yyh4385.ElemContainerState(yyj4385)
				if r.TryDecodeAsNil() {
					yyv4385[yyj4385] = DownwardAPIVolumeFile{}
				} else {
					yyv4387 := &yyv4385[yyj4385]
					yyv4387.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4385 := 0
		for ; !r.CheckBreak(); yyj4385++ {

			if yyj4385 >= len(yyv4385) {
				yyv4385 = append(yyv4385, DownwardAPIVolumeFile{}) // var yyz4385 DownwardAPIVolumeFile
				yyc4385 = true
			}
			yyh4385.ElemContainerState(yyj4385)
			if yyj4385 < len(yyv4385) {
				if r.TryDecodeAsNil() {
					yyv4385[yyj4385] = DownwardAPIVolumeFile{}
				} else {
					yyv4388 := &yyv4385[yyj4385]
					yyv4388.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4385 < len(yyv4385) {
			yyv4385 = yyv4385[:yyj4385]
			yyc4385 = true
		} else if yyj4385 == 0 && yyv4385 == nil {
			yyv4385 = []DownwardAPIVolumeFile{}
			yyc4385 = true
		}
	}
	yyh4385.End()
	if yyc4385 {
		*v = yyv4385
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4389 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4390 := &yyv4389
		yy4390.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4391 := *v
	yyh4391, yyl4391 := z.DecSliceHelperStart()
	var yyc4391 bool
	if yyl4391 == 0 {
		if yyv4391 == nil {
			yyv4391 = []HTTPHeader{}
			yyc4391 = true
		} else if len(yyv4391) != 0 {
			yyv4391 = yyv4391[:0]
			yyc4391 = true
		}
	} else if yyl4391 > 0 {
		var yyrr4391, yyrl4391 int
		var yyrt4391 bool
		if yyl4391 > cap(yyv4391) {

			yyrg4391 := len(yyv4391) > 0
			yyv24391 := yyv4391
			yyrl4391, yyrt4391 = z.DecInferLen(yyl4391, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4391 {
				if yyrl4391 <= cap(yyv4391) {
					yyv4391 = yyv4391[:yyrl4391]
				} else {
					yyv4391 = make([]HTTPHeader, yyrl4391)
				}
			} else {
				yyv4391 = make([]HTTPHeader, yyrl4391)
			}
			yyc4391 = true
			yyrr4391 = len(yyv4391)
			if yyrg4391 {
				copy(yyv4391, yyv24391)
			}
		} else if yyl4391 != len(yyv4391) {
			yyv4391 = yyv4391[:yyl4391]
			yyc4391 = true
		}
		yyj4391 := 0
		for ; yyj4391 < yyrr4391; yyj4391++ {
			yyh4391.ElemContainerState(yyj4391)
			if r.TryDecodeAsNil() {
				yyv4391[yyj4391] = HTTPHeader{}
			} else {
				yyv4392 := &yyv4391[yyj4391]
				yyv4392.CodecDecodeSelf(d)
			}

		}
		if yyrt4391 {
			for ; yyj4391 < yyl4391; yyj4391++ {
				yyv4391 = append(yyv4391, HTTPHeader{})
				yyh4391.ElemContainerState(yyj4391)
				if r.TryDecodeAsNil() {
					yyv4391[yyj4391] = HTTPHeader{}
				} else {
					yyv4393 := &yyv4391[yyj4391]
					yyv4393.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4391 := 0
		for ; !r.CheckBreak(); yyj4391++ {

			if yyj4391 >= len(yyv4391) {
				yyv4391 = append(yyv4391, HTTPHeader{}) // var yyz4391 HTTPHeader
				yyc4391 = true
			}
			yyh4391.ElemContainerState(yyj4391)
			if yyj4391 < len(yyv4391) {
				if r.TryDecodeAsNil() {
					yyv4391[yyj4391] = HTTPHeader{}
				} else {
					yyv4394 := &yyv4391[yyj4391]
					yyv4394.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4391 < len(yyv4391) {
			yyv4391 = yyv4391[:yyj4391]
			yyc4391 = true
		} else if yyj4391 == 0 && yyv4391 == nil {
			yyv4391 = []HTTPHeader{}
			yyc4391 = true
		}
	}
	yyh4391.End()
	if yyc4391 {
		*v = yyv4391
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4395 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4395.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4396 := *v
	yyh4396, yyl4396 := z.DecSliceHelperStart()
	var yyc4396 bool
	if yyl4396 == 0 {
		if yyv4396 == nil {
			yyv4396 = []Capability{}
			yyc4396 = true
		} else if len(yyv4396) != 0 {
			yyv4396 = yyv4396[:0]
			yyc4396 = true
		}
	} else if yyl4396 > 0 {
		var yyrr4396, yyrl4396 int
		var yyrt4396 bool
		if yyl4396 > cap(yyv4396) {

			yyrl4396, yyrt4396 = z.DecInferLen(yyl4396, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4396 {
				if yyrl4396 <= cap(yyv4396) {
					yyv4396 = yyv4396[:yyrl4396]
				} else {
					yyv4396 = make([]Capability, yyrl4396)
				}
			} else {
				yyv4396 = make([]Capability, yyrl4396)
			}
			yyc4396 = true
			yyrr4396 = len(yyv4396)
		} else if yyl4396 != len(yyv4396) {
			yyv4396 = yyv4396[:yyl4396]
			yyc4396 = true
		}
		yyj4396 := 0
		for ; yyj4396 < yyrr4396; yyj4396++ {
			yyh4396.ElemContainerState(yyj4396)
			if r.TryDecodeAsNil() {
				yyv4396[yyj4396] = ""
			} else {
				yyv4396[yyj4396] = Capability(r.DecodeString())
			}

		}
		if yyrt4396 {
			for ; yyj4396 < yyl4396; yyj4396++ {
				yyv4396 = append(yyv4396, "")
				yyh4396.ElemContainerState(yyj4396)
				if r.TryDecodeAsNil() {
					yyv4396[yyj4396] = ""
				} else {
					yyv4396[yyj4396] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4396 := 0
		for ; !r.CheckBreak(); yyj4396++ {

			if yyj4396 >= len(yyv4396) {
				yyv4396 = append(yyv4396, "") // var yyz4396 Capability
				yyc4396 = true
			}
			yyh4396.ElemContainerState(yyj4396)
			if yyj4396 < len(yyv4396) {
				if r.TryDecodeAsNil() {
					yyv4396[yyj4396] = ""
				} else {
					yyv4396[yyj4396] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4396 < len(yyv4396) {
			yyv4396 = yyv4396[:yyj4396]
			yyc4396 = true
		} else if yyj4396 == 0 && yyv4396 == nil {
			yyv4396 = []Capability{}
			yyc4396 = true
		}
	}
	yyh4396.End()
	if yyc4396 {
		*v = yyv4396
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4400 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4401 := &yyv4400
		yy4401.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4402 := *v
	yyh4402, yyl4402 := z.DecSliceHelperStart()
	var yyc4402 bool
	if yyl4402 == 0 {
		if yyv4402 == nil {
			yyv4402 = []ContainerPort{}
			yyc4402 = true
		} else if len(yyv4402) != 0 {
			yyv4402 = yyv4402[:0]
			yyc4402 = true
		}
	} else if yyl4402 > 0 {
		var yyrr4402, yyrl4402 int
		var yyrt4402 bool
		if yyl4402 > cap(yyv4402) {

			yyrg4402 := len(yyv4402) > 0
			yyv24402 := yyv4402
			yyrl4402, yyrt4402 = z.DecInferLen(yyl4402, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4402 {
				if yyrl4402 <= cap(yyv4402) {
					yyv4402 = yyv4402[:yyrl4402]
				} else {
					yyv4402 = make([]ContainerPort, yyrl4402)
				}
			} else {
				yyv4402 = make([]ContainerPort, yyrl4402)
			}
			yyc4402 = true
			yyrr4402 = len(yyv4402)
			if yyrg4402 {
				copy(yyv4402, yyv24402)
			}
		} else if yyl4402 != len(yyv4402) {
			yyv4402 = yyv4402[:yyl4402]
			yyc4402 = true
		}
		yyj4402 := 0
		for ; yyj4402 < yyrr4402; yyj4402++ {
			yyh4402.ElemContainerState(yyj4402)
			if r.TryDecodeAsNil() {
				yyv4402[yyj4402] = ContainerPort{}
			} else {
				yyv4403 := &yyv4402[yyj4402]
				yyv4403.CodecDecodeSelf(d)
			}

		}
		if yyrt4402 {
			for ; yyj4402 < yyl4402; yyj4402++ {
				yyv4402 = append(yyv4402, ContainerPort{})
				yyh4402.ElemContainerState(yyj4402)
				if r.TryDecodeAsNil() {
					yyv4402[yyj4402] = ContainerPort{}
				} else {
					yyv4404 := &yyv4402[yyj4402]
					yyv4404.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4402 := 0
		for ; !r.CheckBreak(); yyj4402++ {

			if yyj4402 >= len(yyv4402) {
				yyv4402 = append(yyv4402, ContainerPort{}) // var yyz4402 ContainerPort
				yyc4402 = true
			}
			yyh4402.ElemContainerState(yyj4402)
			if yyj4402 < len(yyv4402) {
				if r.TryDecodeAsNil() {
					yyv4402[yyj4402] = ContainerPort{}
				} else {
					yyv4405 := &yyv4402[yyj4402]
					yyv4405.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4402 < len(yyv4402) {
			yyv4402 = yyv4402[:yyj4402]
			yyc4402 = true
		} else if yyj4402 == 0 && yyv4402 == nil {
			yyv4402 = []ContainerPort{}
			yyc4402 = true
		}
	}
	yyh4402.End()
	if yyc4402 {
		*v = yyv4402
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4406 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4407 := &yyv4406
		yy4407.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4408 := *v
	yyh4408, yyl4408 := z.DecSliceHelperStart()
	var yyc4408 bool
	if yyl4408 == 0 {
		if yyv4408 == nil {
			yyv4408 = []EnvVar{}
			yyc4408 = true
		} else if len(yyv4408) != 0 {
			yyv4408 = yyv4408[:0]
			yyc4408 = true
		}
	} else if yyl4408 > 0 {
		var yyrr4408, yyrl4408 int
		var yyrt4408 bool
		if yyl4408 > cap(yyv4408) {

			yyrg4408 := len(yyv4408) > 0
			yyv24408 := yyv4408
			yyrl4408, yyrt4408 = z.DecInferLen(yyl4408, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4408 {
				if yyrl4408 <= cap(yyv4408) {
					yyv4408 = yyv4408[:yyrl4408]
				} else {
					yyv4408 = make([]EnvVar, yyrl4408)
				}
			} else {
				yyv4408 = make([]EnvVar, yyrl4408)
			}
			yyc4408 = true
			yyrr4408 = len(yyv4408)
			if yyrg4408 {
				copy(yyv4408, yyv24408)
			}
		} else if yyl4408 != len(yyv4408) {
			yyv4408 = yyv4408[:yyl4408]
			yyc4408 = true
		}
		yyj4408 := 0
		for ; yyj4408 < yyrr4408; yyj4408++ {
			yyh4408.ElemContainerState(yyj4408)
			if r.TryDecodeAsNil() {
				yyv4408[yyj4408] = EnvVar{}
			} else {
				yyv4409 := &yyv4408[yyj4408]
				yyv4409.CodecDecodeSelf(d)
			}

		}
		if yyrt4408 {
			for ; yyj4408 < yyl4408; yyj4408++ {
				yyv4408 = append(yyv4408, EnvVar{})
				yyh4408.ElemContainerState(yyj4408)
				if r.TryDecodeAsNil() {
					yyv4408[yyj4408] = EnvVar{}
				} else {
					yyv4410 := &yyv4408[yyj4408]
					yyv4410.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4408 := 0
		for ; !r.CheckBreak(); yyj4408++ {

			if yyj4408 >= len(yyv4408) {
				yyv4408 = append(yyv4408, EnvVar{}) // var yyz4408 EnvVar
				yyc4408 = true
			}
			yyh4408.ElemContainerState(yyj4408)
			if yyj4408 < len(yyv4408) {
				if r.TryDecodeAsNil() {
					yyv4408[yyj4408] = EnvVar{}
				} else {
					yyv4411 := &yyv4408[yyj4408]
					yyv4411.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4408 < len(yyv4408) {
			yyv4408 = yyv4408[:yyj4408]
			yyc4408 = true
		} else if yyj4408 == 0 && yyv4408 == nil {
			yyv4408 = []EnvVar{}
			yyc4408 = true
		}
	}
	yyh4408.End()
	if yyc4408 {
		*v = yyv4408
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4412 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4413 := &yyv4412
		yy4413.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4414 := *v
	yyh4414, yyl4414 := z.DecSliceHelperStart()
	var yyc4414 bool
	if yyl4414 == 0 {
		if yyv4414 == nil {
			yyv4414 = []VolumeMount{}
			yyc4414 = true
		} else if len(yyv4414) != 0 {
			yyv4414 = yyv4414[:0]
			yyc4414 = true
		}
	} else if yyl4414 > 0 {
		var yyrr4414, yyrl4414 int
		var yyrt4414 bool
		if yyl4414 > cap(yyv4414) {

			yyrg4414 := len(yyv4414) > 0
			yyv24414 := yyv4414
			yyrl4414, yyrt4414 = z.DecInferLen(yyl4414, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4414 {
				if yyrl4414 <= cap(yyv4414) {
					yyv4414 = yyv4414[:yyrl4414]
				} else {
					yyv4414 = make([]VolumeMount, yyrl4414)
				}
			} else {
				yyv4414 = make([]VolumeMount, yyrl4414)
			}
			yyc4414 = true
			yyrr4414 = len(yyv4414)
			if yyrg4414 {
				copy(yyv4414, yyv24414)
			}
		} else if yyl4414 != len(yyv4414) {
			yyv4414 = yyv4414[:yyl4414]
			yyc4414 = true
		}
		yyj4414 := 0
		for ; yyj4414 < yyrr4414; yyj4414++ {
			yyh4414.ElemContainerState(yyj4414)
			if r.TryDecodeAsNil() {
				yyv4414[yyj4414] = VolumeMount{}
			} else {
				yyv4415 := &yyv4414[yyj4414]
				yyv4415.CodecDecodeSelf(d)
			}

		}
		if yyrt4414 {
			for ; yyj4414 < yyl4414; yyj4414++ {
				yyv4414 = append(yyv4414, VolumeMount{})
				yyh4414.ElemContainerState(yyj4414)
				if r.TryDecodeAsNil() {
					yyv4414[yyj4414] = VolumeMount{}
				} else {
					yyv4416 := &yyv4414[yyj4414]
					yyv4416.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4414 := 0
		for ; !r.CheckBreak(); yyj4414++ {

			if yyj4414 >= len(yyv4414) {
				yyv4414 = append(yyv4414, VolumeMount{}) // var yyz4414 VolumeMount
				yyc4414 = true
			}
			yyh4414.ElemContainerState(yyj4414)
			if yyj4414 < len(yyv4414) {
				if r.TryDecodeAsNil() {
					yyv4414[yyj4414] = VolumeMount{}
				} else {
					yyv4417 := &yyv4414[yyj4414]
					yyv4417.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4414 < len(yyv4414) {
			yyv4414 = yyv4414[:yyj4414]
			yyc4414 = true
		} else if yyj4414 == 0 && yyv4414 == nil {
			yyv4414 = []VolumeMount{}
			yyc4414 = true
		}
	}
	yyh4414.End()
	if yyc4414 {
		*v = yyv4414
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4418 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4419 := &yyv4418
		yy4419.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4420 := *v
	yyh4420, yyl4420 := z.DecSliceHelperStart()
	var yyc4420 bool
	if yyl4420 == 0 {
		if yyv4420 == nil {
			yyv4420 = []Pod{}
			yyc4420 = true
		} else if len(yyv4420) != 0 {
			yyv4420 = yyv4420[:0]
			yyc4420 = true
		}
	} else if yyl4420 > 0 {
		var yyrr4420, yyrl4420 int
		var yyrt4420 bool
		if yyl4420 > cap(yyv4420) {

			yyrg4420 := len(yyv4420) > 0
			yyv24420 := yyv4420
			yyrl4420, yyrt4420 = z.DecInferLen(yyl4420, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4420 {
				if yyrl4420 <= cap(yyv4420) {
					yyv4420 = yyv4420[:yyrl4420]
				} else {
					yyv4420 = make([]Pod, yyrl4420)
				}
			} else {
				yyv4420 = make([]Pod, yyrl4420)
			}
			yyc4420 = true
			yyrr4420 = len(yyv4420)
			if yyrg4420 {
				copy(yyv4420, yyv24420)
			}
		} else if yyl4420 != len(yyv4420) {
			yyv4420 = yyv4420[:yyl4420]
			yyc4420 = true
		}
		yyj4420 := 0
		for ; yyj4420 < yyrr4420; yyj4420++ {
			yyh4420.ElemContainerState(yyj4420)
			if r.TryDecodeAsNil() {
				yyv4420[yyj4420] = Pod{}
			} else {
				yyv4421 := &yyv4420[yyj4420]
				yyv4421.CodecDecodeSelf(d)
			}

		}
		if yyrt4420 {
			for ; yyj4420 < yyl4420; yyj4420++ {
				yyv4420 = append(yyv4420, Pod{})
				yyh4420.ElemContainerState(yyj4420)
				if r.TryDecodeAsNil() {
					yyv4420[yyj4420] = Pod{}
				} else {
					yyv4422 := &yyv4420[yyj4420]
					yyv4422.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4420 := 0
		for ; !r.CheckBreak(); yyj4420++ {

			if yyj4420 >= len(yyv4420) {
				yyv4420 = append(yyv4420, Pod{}) // var yyz4420 Pod
				yyc4420 = true
			}
			yyh4420.ElemContainerState(yyj4420)
			if yyj4420 < len(yyv4420) {
				if r.TryDecodeAsNil() {
					yyv4420[yyj4420] = Pod{}
				} else {
					yyv4423 := &yyv4420[yyj4420]
					yyv4423.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4420 < len(yyv4420) {
			yyv4420 = yyv4420[:yyj4420]
			yyc4420 = true
		} else if yyj4420 == 0 && yyv4420 == nil {
			yyv4420 = []Pod{}
			yyc4420 = true
		}
	}
	yyh4420.End()
	if yyc4420 {
		*v = yyv4420
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4424 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4425 := &yyv4424
		yy4425.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4426 := *v
	yyh4426, yyl4426 := z.DecSliceHelperStart()
	var yyc4426 bool
	if yyl4426 == 0 {
		if yyv4426 == nil {
			yyv4426 = []NodeSelectorTerm{}
			yyc4426 = true
		} else if len(yyv4426) != 0 {
			yyv4426 = yyv4426[:0]
			yyc4426 = true
		}
	} else if yyl4426 > 0 {
		var yyrr4426, yyrl4426 int
		var yyrt4426 bool
		if yyl4426 > cap(yyv4426) {

			yyrg4426 := len(yyv4426) > 0
			yyv24426 := yyv4426
			yyrl4426, yyrt4426 = z.DecInferLen(yyl4426, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4426 {
				if yyrl4426 <= cap(yyv4426) {
					yyv4426 = yyv4426[:yyrl4426]
				} else {
					yyv4426 = make([]NodeSelectorTerm, yyrl4426)
				}
			} else {
				yyv4426 = make([]NodeSelectorTerm, yyrl4426)
			}
			yyc4426 = true
			yyrr4426 = len(yyv4426)
			if yyrg4426 {
				copy(yyv4426, yyv24426)
			}
		} else if yyl4426 != len(yyv4426) {
			yyv4426 = yyv4426[:yyl4426]
			yyc4426 = true
		}
		yyj4426 := 0
		for ; yyj4426 < yyrr4426; yyj4426++ {
			yyh4426.ElemContainerState(yyj4426)
			if r.TryDecodeAsNil() {
				yyv4426[yyj4426] = NodeSelectorTerm{}
			} else {
				yyv4427 := &yyv4426[yyj4426]
				yyv4427.CodecDecodeSelf(d)
			}

		}
		if yyrt4426 {
			for ; yyj4426 < yyl4426; yyj4426++ {
				yyv4426 = append(yyv4426, NodeSelectorTerm{})
				yyh4426.ElemContainerState(yyj4426)
				if r.TryDecodeAsNil() {
					yyv4426[yyj4426] = NodeSelectorTerm{}
				} else {
					yyv4428 := &yyv4426[yyj4426]
					yyv4428.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4426 := 0
		for ; !r.CheckBreak(); yyj4426++ {

			if yyj4426 >= len(yyv4426) {
				yyv4426 = append(yyv4426, NodeSelectorTerm{}) // var yyz4426 NodeSelectorTerm
				yyc4426 = true
			}
			yyh4426.ElemContainerState(yyj4426)
			if yyj4426 < len(yyv4426) {
				if r.TryDecodeAsNil() {
					yyv4426[yyj4426] = NodeSelectorTerm{}
				} else {
					yyv4429 := &yyv4426[yyj4426]
					yyv4429.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4426 < len(yyv4426) {
			yyv4426 = yyv4426[:yyj4426]
			yyc4426 = true
		} else if yyj4426 == 0 && yyv4426 == nil {
			yyv4426 = []NodeSelectorTerm{}
			yyc4426 = true
		}
	}
	yyh4426.End()
	if yyc4426 {
		*v = yyv4426
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4430 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4431 := &yyv4430
		yy4431.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4432 := *v
	yyh4432, yyl4432 := z.DecSliceHelperStart()
	var yyc4432 bool
	if yyl4432 == 0 {
		if yyv4432 == nil {
			yyv4432 = []NodeSelectorRequirement{}
			yyc4432 = true
		} else if len(yyv4432) != 0 {
			yyv4432 = yyv4432[:0]
			yyc4432 = true
		}
	} else if yyl4432 > 0 {
		var yyrr4432, yyrl4432 int
		var yyrt4432 bool
		if yyl4432 > cap(yyv4432) {

			yyrg4432 := len(yyv4432) > 0
			yyv24432 := yyv4432
			yyrl4432, yyrt4432 = z.DecInferLen(yyl4432, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4432 {
				if yyrl4432 <= cap(yyv4432) {
					yyv4432 = yyv4432[:yyrl4432]
				} else {
					yyv4432 = make([]NodeSelectorRequirement, yyrl4432)
				}
			} else {
				yyv4432 = make([]NodeSelectorRequirement, yyrl4432)
			}
			yyc4432 = true
			yyrr4432 = len(yyv4432)
			if yyrg4432 {
				copy(yyv4432, yyv24432)
			}
		} else if yyl4432 != len(yyv4432) {
			yyv4432 = yyv4432[:yyl4432]
			yyc4432 = true
		}
		yyj4432 := 0
		for ; yyj4432 < yyrr4432; yyj4432++ {
			yyh4432.ElemContainerState(yyj4432)
			if r.TryDecodeAsNil() {
				yyv4432[yyj4432] = NodeSelectorRequirement{}
			} else {
				yyv4433 := &yyv4432[yyj4432]
				yyv4433.CodecDecodeSelf(d)
			}

		}
		if yyrt4432 {
			for ; yyj4432 < yyl4432; yyj4432++ {
				yyv4432 = append(yyv4432, NodeSelectorRequirement{})
				yyh4432.ElemContainerState(yyj4432)
				if r.TryDecodeAsNil() {
					yyv4432[yyj4432] = NodeSelectorRequirement{}
				} else {
					yyv4434 := &yyv4432[yyj4432]
					yyv4434.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4432 := 0
		for ; !r.CheckBreak(); yyj4432++ {

			if yyj4432 >= len(yyv4432) {
				yyv4432 = append(yyv4432, NodeSelectorRequirement{}) // var yyz4432 NodeSelectorRequirement
				yyc4432 = true
			}
			yyh4432.ElemContainerState(yyj4432)
			if yyj4432 < len(yyv4432) {
				if r.TryDecodeAsNil() {
					yyv4432[yyj4432] = NodeSelectorRequirement{}
				} else {
					yyv4435 := &yyv4432[yyj4432]
					yyv4435.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4432 < len(yyv4432) {
			yyv4432 = yyv4432[:yyj4432]
			yyc4432 = true
		} else if yyj4432 == 0 && yyv4432 == nil {
			yyv4432 = []NodeSelectorRequirement{}
			yyc4432 = true
		}
	}
	yyh4432.End()
	if yyc4432 {
		*v = yyv4432
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4436 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4437 := &yyv4436
		yy4437.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4438 := *v
	yyh4438, yyl4438 := z.DecSliceHelperStart()
	var yyc4438 bool
	if yyl4438 == 0 {
		if yyv4438 == nil {
			yyv4438 = []PodAffinityTerm{}
			yyc4438 = true
		} else if len(yyv4438) != 0 {
			yyv4438 = yyv4438[:0]
			yyc4438 = true
		}
	} else if yyl4438 > 0 {
		var yyrr4438, yyrl4438 int
		var yyrt4438 bool
		if yyl4438 > cap(yyv4438) {

			yyrg4438 := len(yyv4438) > 0
			yyv24438 := yyv4438
			yyrl4438, yyrt4438 = z.DecInferLen(yyl4438, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4438 {
				if yyrl4438 <= cap(yyv4438) {
					yyv4438 = yyv4438[:yyrl4438]
				} else {
					yyv4438 = make([]PodAffinityTerm, yyrl4438)
				}
			} else {
				yyv4438 = make([]PodAffinityTerm, yyrl4438)
			}
			yyc4438 = true
			yyrr4438 = len(yyv4438)
			if yyrg4438 {
				copy(yyv4438, yyv24438)
			}
		} else if yyl4438 != len(yyv4438) {
			yyv4438 = yyv4438[:yyl4438]
			yyc4438 = true
		}
		yyj4438 := 0
		for ; yyj4438 < yyrr4438; yyj4438++ {
			yyh4438.ElemContainerState(yyj4438)
			if r.TryDecodeAsNil() {
				yyv4438[yyj4438] = PodAffinityTerm{}
			} else {
				yyv4439 := &yyv4438[yyj4438]
				yyv4439.CodecDecodeSelf(d)
			}

		}
		if yyrt4438 {
			for ; yyj4438 < yyl4438; yyj4438++ {
				yyv4438 = append(yyv4438, PodAffinityTerm{})
				yyh4438.ElemContainerState(yyj4438)
				if r.TryDecodeAsNil() {
					yyv4438[yyj4438] = PodAffinityTerm{}
				} else {
					yyv4440 := &yyv4438[yyj4438]
					yyv4440.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4438 := 0
		for ; !r.CheckBreak(); yyj4438++ {

			if yyj4438 >= len(yyv4438) {
				yyv4438 = append(yyv4438, PodAffinityTerm{}) // var yyz4438 PodAffinityTerm
				yyc4438 = true
			}
			yyh4438.ElemContainerState(yyj4438)
			if yyj4438 < len(yyv4438) {
				if r.TryDecodeAsNil() {
					yyv4438[yyj4438] = PodAffinityTerm{}
				} else {
					yyv4441 := &yyv4438[yyj4438]
					yyv4441.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4438 < len(yyv4438) {
			yyv4438 = yyv4438[:yyj4438]
			yyc4438 = true
		} else if yyj4438 == 0 && yyv4438 == nil {
			yyv4438 = []PodAffinityTerm{}
			yyc4438 = true
		}
	}
	yyh4438.End()
	if yyc4438 {
		*v = yyv4438
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4442 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4443 := &yyv4442
		yy4443.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4444 := *v
	yyh4444, yyl4444 := z.DecSliceHelperStart()
	var yyc4444 bool
	if yyl4444 == 0 {
		if yyv4444 == nil {
			yyv4444 = []WeightedPodAffinityTerm{}
			yyc4444 = true
		} else if len(yyv4444) != 0 {
			yyv4444 = yyv4444[:0]
			yyc4444 = true
		}
	} else if yyl4444 > 0 {
		var yyrr4444, yyrl4444 int
		var yyrt4444 bool
		if yyl4444 > cap(yyv4444) {

			yyrg4444 := len(yyv4444) > 0
			yyv24444 := yyv4444
			yyrl4444, yyrt4444 = z.DecInferLen(yyl4444, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4444 {
				if yyrl4444 <= cap(yyv4444) {
					yyv4444 = yyv4444[:yyrl4444]
				} else {
					yyv4444 = make([]WeightedPodAffinityTerm, yyrl4444)
				}
			} else {
				yyv4444 = make([]WeightedPodAffinityTerm, yyrl4444)
			}
			yyc4444 = true
			yyrr4444 = len(yyv4444)
			if yyrg4444 {
				copy(yyv4444, yyv24444)
			}
		} else if yyl4444 != len(yyv4444) {
			yyv4444 = yyv4444[:yyl4444]
			yyc4444 = true
		}
		yyj4444 := 0
		for ; yyj4444 < yyrr4444; yyj4444++ {
			yyh4444.ElemContainerState(yyj4444)
			if r.TryDecodeAsNil() {
				yyv4444[yyj4444] = WeightedPodAffinityTerm{}
			} else {
				yyv4445 := &yyv4444[yyj4444]
				yyv4445.CodecDecodeSelf(d)
			}

		}
		if yyrt4444 {
			for ; yyj4444 < yyl4444; yyj4444++ {
				yyv4444 = append(yyv4444, WeightedPodAffinityTerm{})
				yyh4444.ElemContainerState(yyj4444)
				if r.TryDecodeAsNil() {
					yyv4444[yyj4444] = WeightedPodAffinityTerm{}
				} else {
					yyv4446 := &yyv4444[yyj4444]
					yyv4446.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4444 := 0
		for ; !r.CheckBreak(); yyj4444++ {

			if yyj4444 >= len(yyv4444) {
				yyv4444 = append(yyv4444, WeightedPodAffinityTerm{}) // var yyz4444 WeightedPodAffinityTerm
				yyc4444 = true
			}
			yyh4444.ElemContainerState(yyj4444)
			if yyj4444 < len(yyv4444) {
				if r.TryDecodeAsNil() {
					yyv4444[yyj4444] = WeightedPodAffinityTerm{}
				} else {
					yyv4447 := &yyv4444[yyj4444]
					yyv4447.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4444 < len(yyv4444) {
			yyv4444 = yyv4444[:yyj4444]
			yyc4444 = true
		} else if yyj4444 == 0 && yyv4444 == nil {
			yyv4444 = []WeightedPodAffinityTerm{}
			yyc4444 = true
		}
	}
	yyh4444.End()
	if yyc4444 {
		*v = yyv4444
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4448 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4449 := &yyv4448
		yy4449.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4450 := *v
	yyh4450, yyl4450 := z.DecSliceHelperStart()
	var yyc4450 bool
	if yyl4450 == 0 {
		if yyv4450 == nil {
			yyv4450 = []PreferredSchedulingTerm{}
			yyc4450 = true
		} else if len(yyv4450) != 0 {
			yyv4450 = yyv4450[:0]
			yyc4450 = true
		}
	} else if yyl4450 > 0 {
		var yyrr4450, yyrl4450 int
		var yyrt4450 bool
		if yyl4450 > cap(yyv4450) {

			yyrg4450 := len(yyv4450) > 0
			yyv24450 := yyv4450
			yyrl4450, yyrt4450 = z.DecInferLen(yyl4450, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4450 {
				if yyrl4450 <= cap(yyv4450) {
					yyv4450 = yyv4450[:yyrl4450]
				} else {
					yyv4450 = make([]PreferredSchedulingTerm, yyrl4450)
				}
			} else {
				yyv4450 = make([]PreferredSchedulingTerm, yyrl4450)
			}
			yyc4450 = true
			yyrr4450 = len(yyv4450)
			if yyrg4450 {
				copy(yyv4450, yyv24450)
			}
		} else if yyl4450 != len(yyv4450) {
			yyv4450 = yyv4450[:yyl4450]
			yyc4450 = true
		}
		yyj4450 := 0
		for ; yyj4450 < yyrr4450; yyj4450++ {
			yyh4450.ElemContainerState(yyj4450)
			if r.TryDecodeAsNil() {
				yyv4450[yyj4450] = PreferredSchedulingTerm{}
			} else {
				yyv4451 := &yyv4450[yyj4450]
				yyv4451.CodecDecodeSelf(d)
			}

		}
		if yyrt4450 {
			for ; yyj4450 < yyl4450; yyj4450++ {
				yyv4450 = append(yyv4450, PreferredSchedulingTerm{})
				yyh4450.ElemContainerState(yyj4450)
				if r.TryDecodeAsNil() {
					yyv4450[yyj4450] = PreferredSchedulingTerm{}
				} else {
					yyv4452 := &yyv4450[yyj4450]
					yyv4452.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4450 := 0
		for ; !r.CheckBreak(); yyj4450++ {

			if yyj4450 >= len(yyv4450) {
				yyv4450 = append(yyv4450, PreferredSchedulingTerm{}) // var yyz4450 PreferredSchedulingTerm
				yyc4450 = true
			}
			yyh4450.ElemContainerState(yyj4450)
			if yyj4450 < len(yyv4450) {
				if r.TryDecodeAsNil() {
					yyv4450[yyj4450] = PreferredSchedulingTerm{}
				} else {
					yyv4453 := &yyv4450[yyj4450]
					yyv4453.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4450 < len(yyv4450) {
			yyv4450 = yyv4450[:yyj4450]
			yyc4450 = true
		} else if yyj4450 == 0 && yyv4450 == nil {
			yyv4450 = []PreferredSchedulingTerm{}
			yyc4450 = true
		}
	}
	yyh4450.End()
	if yyc4450 {
		*v = yyv4450
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4454 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4455 := &yyv4454
		yy4455.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4456 := *v
	yyh4456, yyl4456 := z.DecSliceHelperStart()
	var yyc4456 bool
	if yyl4456 == 0 {
		if yyv4456 == nil {
			yyv4456 = []Volume{}
			yyc4456 = true
		} else if len(yyv4456) != 0 {
			yyv4456 = yyv4456[:0]
			yyc4456 = true
		}
	} else if yyl4456 > 0 {
		var yyrr4456, yyrl4456 int
		var yyrt4456 bool
		if yyl4456 > cap(yyv4456) {

			yyrg4456 := len(yyv4456) > 0
			yyv24456 := yyv4456
			yyrl4456, yyrt4456 = z.DecInferLen(yyl4456, z.DecBasicHandle().MaxInitLen, 176)
			if yyrt4456 {
				if yyrl4456 <= cap(yyv4456) {
					yyv4456 = yyv4456[:yyrl4456]
				} else {
					yyv4456 = make([]Volume, yyrl4456)
				}
			} else {
				yyv4456 = make([]Volume, yyrl4456)
			}
			yyc4456 = true
			yyrr4456 = len(yyv4456)
			if yyrg4456 {
				copy(yyv4456, yyv24456)
			}
		} else if yyl4456 != len(yyv4456) {
			yyv4456 = yyv4456[:yyl4456]
			yyc4456 = true
		}
		yyj4456 := 0
		for ; yyj4456 < yyrr4456; yyj4456++ {
			yyh4456.ElemContainerState(yyj4456)
			if r.TryDecodeAsNil() {
				yyv4456[yyj4456] = Volume{}
			} else {
				yyv4457 := &yyv4456[yyj4456]
				yyv4457.CodecDecodeSelf(d)
			}

		}
		if yyrt4456 {
			for ; yyj4456 < yyl4456; yyj4456++ {
				yyv4456 = append(yyv4456, Volume{})
				yyh4456.ElemContainerState(yyj4456)
				if r.TryDecodeAsNil() {
					yyv4456[yyj4456] = Volume{}
				} else {
					yyv4458 := &yyv4456[yyj4456]
					yyv4458.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4456 := 0
		for ; !r.CheckBreak(); yyj4456++ {

			if yyj4456 >= len(yyv4456) {
				yyv4456 = append(yyv4456, Volume{}) // var yyz4456 Volume
				yyc4456 = true
			}
			yyh4456.ElemContainerState(yyj4456)
			if yyj4456 < len(yyv4456) {
				if r.TryDecodeAsNil() {
					yyv4456[yyj4456] = Volume{}
				} else {
					yyv4459 := &yyv4456[yyj4456]
					yyv4459.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4456 < len(yyv4456) {
			yyv4456 = yyv4456[:yyj4456]
			yyc4456 = true
		} else if yyj4456 == 0 && yyv4456 == nil {
			yyv4456 = []Volume{}
			yyc4456 = true
		}
	}
	yyh4456.End()
	if yyc4456 {
		*v = yyv4456
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4460 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4461 := &yyv4460
		yy4461.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4462 := *v
	yyh4462, yyl4462 := z.DecSliceHelperStart()
	var yyc4462 bool
	if yyl4462 == 0 {
		if yyv4462 == nil {
			yyv4462 = []Container{}
			yyc4462 = true
		} else if len(yyv4462) != 0 {
			yyv4462 = yyv4462[:0]
			yyc4462 = true
		}
	} else if yyl4462 > 0 {
		var yyrr4462, yyrl4462 int
		var yyrt4462 bool
		if yyl4462 > cap(yyv4462) {

			yyrg4462 := len(yyv4462) > 0
			yyv24462 := yyv4462
			yyrl4462, yyrt4462 = z.DecInferLen(yyl4462, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4462 {
				if yyrl4462 <= cap(yyv4462) {
					yyv4462 = yyv4462[:yyrl4462]
				} else {
					yyv4462 = make([]Container, yyrl4462)
				}
			} else {
				yyv4462 = make([]Container, yyrl4462)
			}
			yyc4462 = true
			yyrr4462 = len(yyv4462)
			if yyrg4462 {
				copy(yyv4462, yyv24462)
			}
		} else if yyl4462 != len(yyv4462) {
			yyv4462 = yyv4462[:yyl4462]
			yyc4462 = true
		}
		yyj4462 := 0
		for ; yyj4462 < yyrr4462; yyj4462++ {
			yyh4462.ElemContainerState(yyj4462)
			if r.TryDecodeAsNil() {
				yyv4462[yyj4462] = Container{}
			} else {
				yyv4463 := &yyv4462[yyj4462]
				yyv4463.CodecDecodeSelf(d)
			}

		}
		if yyrt4462 {
			for ; yyj4462 < yyl4462; yyj4462++ {
				yyv4462 = append(yyv4462, Container{})
				yyh4462.ElemContainerState(yyj4462)
				if r.TryDecodeAsNil() {
					yyv4462[yyj4462] = Container{}
				} else {
					yyv4464 := &yyv4462[yyj4462]
					yyv4464.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4462 := 0
		for ; !r.CheckBreak(); yyj4462++ {

			if yyj4462 >= len(yyv4462) {
				yyv4462 = append(yyv4462, Container{}) // var yyz4462 Container
				yyc4462 = true
			}
			yyh4462.ElemContainerState(yyj4462)
			if yyj4462 < len(yyv4462) {
				if r.TryDecodeAsNil() {
					yyv4462[yyj4462] = Container{}
				} else {
					yyv4465 := &yyv4462[yyj4462]
					yyv4465.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4462 < len(yyv4462) {
			yyv4462 = yyv4462[:yyj4462]
			yyc4462 = true
		} else if yyj4462 == 0 && yyv4462 == nil {
			yyv4462 = []Container{}
			yyc4462 = true
		}
	}
	yyh4462.End()
	if yyc4462 {
		*v = yyv4462
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4466 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4467 := &yyv4466
		yy4467.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4468 := *v
	yyh4468, yyl4468 := z.DecSliceHelperStart()
	var yyc4468 bool
	if yyl4468 == 0 {
		if yyv4468 == nil {
			yyv4468 = []LocalObjectReference{}
			yyc4468 = true
		} else if len(yyv4468) != 0 {
			yyv4468 = yyv4468[:0]
			yyc4468 = true
		}
	} else if yyl4468 > 0 {
		var yyrr4468, yyrl4468 int
		var yyrt4468 bool
		if yyl4468 > cap(yyv4468) {

			yyrg4468 := len(yyv4468) > 0
			yyv24468 := yyv4468
			yyrl4468, yyrt4468 = z.DecInferLen(yyl4468, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4468 {
				if yyrl4468 <= cap(yyv4468) {
					yyv4468 = yyv4468[:yyrl4468]
				} else {
					yyv4468 = make([]LocalObjectReference, yyrl4468)
				}
			} else {
				yyv4468 = make([]LocalObjectReference, yyrl4468)
			}
			yyc4468 = true
			yyrr4468 = len(yyv4468)
			if yyrg4468 {
				copy(yyv4468, yyv24468)
			}
		} else if yyl4468 != len(yyv4468) {
			yyv4468 = yyv4468[:yyl4468]
			yyc4468 = true
		}
		yyj4468 := 0
		for ; yyj4468 < yyrr4468; yyj4468++ {
			yyh4468.ElemContainerState(yyj4468)
			if r.TryDecodeAsNil() {
				yyv4468[yyj4468] = LocalObjectReference{}
			} else {
				yyv4469 := &yyv4468[yyj4468]
				yyv4469.CodecDecodeSelf(d)
			}

		}
		if yyrt4468 {
			for ; yyj4468 < yyl4468; yyj4468++ {
				yyv4468 = append(yyv4468, LocalObjectReference{})
				yyh4468.ElemContainerState(yyj4468)
				if r.TryDecodeAsNil() {
					yyv4468[yyj4468] = LocalObjectReference{}
				} else {
					yyv4470 := &yyv4468[yyj4468]
					yyv4470.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4468 := 0
		for ; !r.CheckBreak(); yyj4468++ {

			if yyj4468 >= len(yyv4468) {
				yyv4468 = append(yyv4468, LocalObjectReference{}) // var yyz4468 LocalObjectReference
				yyc4468 = true
			}
			yyh4468.ElemContainerState(yyj4468)
			if yyj4468 < len(yyv4468) {
				if r.TryDecodeAsNil() {
					yyv4468[yyj4468] = LocalObjectReference{}
				} else {
					yyv4471 := &yyv4468[yyj4468]
					yyv4471.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4468 < len(yyv4468) {
			yyv4468 = yyv4468[:yyj4468]
			yyc4468 = true
		} else if yyj4468 == 0 && yyv4468 == nil {
			yyv4468 = []LocalObjectReference{}
			yyc4468 = true
		}
	}
	yyh4468.End()
	if yyc4468 {
		*v = yyv4468
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4472 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4473 := &yyv4472
		yy4473.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4474 := *v
	yyh4474, yyl4474 := z.DecSliceHelperStart()
	var yyc4474 bool
	if yyl4474 == 0 {
		if yyv4474 == nil {
			yyv4474 = []PodCondition{}
			yyc4474 = true
		} else if len(yyv4474) != 0 {
			yyv4474 = yyv4474[:0]
			yyc4474 = true
		}
	} else if yyl4474 > 0 {
		var yyrr4474, yyrl4474 int
		var yyrt4474 bool
		if yyl4474 > cap(yyv4474) {

			yyrg4474 := len(yyv4474) > 0
			yyv24474 := yyv4474
			yyrl4474, yyrt4474 = z.DecInferLen(yyl4474, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4474 {
				if yyrl4474 <= cap(yyv4474) {
					yyv4474 = yyv4474[:yyrl4474]
				} else {
					yyv4474 = make([]PodCondition, yyrl4474)
				}
			} else {
				yyv4474 = make([]PodCondition, yyrl4474)
			}
			yyc4474 = true
			yyrr4474 = len(yyv4474)
			if yyrg4474 {
				copy(yyv4474, yyv24474)
			}
		} else if yyl4474 != len(yyv4474) {
			yyv4474 = yyv4474[:yyl4474]
			yyc4474 = true
		}
		yyj4474 := 0
		for ; yyj4474 < yyrr4474; yyj4474++ {
			yyh4474.ElemContainerState(yyj4474)
			if r.TryDecodeAsNil() {
				yyv4474[yyj4474] = PodCondition{}
			} else {
				yyv4475 := &yyv4474[yyj4474]
				yyv4475.CodecDecodeSelf(d)
			}

		}
		if yyrt4474 {
			for ; yyj4474 < yyl4474; yyj4474++ {
				yyv4474 = append(yyv4474, PodCondition{})
				yyh4474.ElemContainerState(yyj4474)
				if r.TryDecodeAsNil() {
					yyv4474[yyj4474] = PodCondition{}
				} else {
					yyv4476 := &yyv4474[yyj4474]
					yyv4476.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4474 := 0
		for ; !r.CheckBreak(); yyj4474++ {

			if yyj4474 >= len(yyv4474) {
				yyv4474 = append(yyv4474, PodCondition{}) // var yyz4474 PodCondition
				yyc4474 = true
			}
			yyh4474.ElemContainerState(yyj4474)
			if yyj4474 < len(yyv4474) {
				if r.TryDecodeAsNil() {
					yyv4474[yyj4474] = PodCondition{}
				} else {
					yyv4477 := &yyv4474[yyj4474]
					yyv4477.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4474 < len(yyv4474) {
			yyv4474 = yyv4474[:yyj4474]
			yyc4474 = true
		} else if yyj4474 == 0 && yyv4474 == nil {
			yyv4474 = []PodCondition{}
			yyc4474 = true
		}
	}
	yyh4474.End()
	if yyc4474 {
		*v = yyv4474
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4478 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4479 := &yyv4478
		yy4479.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4480 := *v
	yyh4480, yyl4480 := z.DecSliceHelperStart()
	var yyc4480 bool
	if yyl4480 == 0 {
		if yyv4480 == nil {
			yyv4480 = []ContainerStatus{}
			yyc4480 = true
		} else if len(yyv4480) != 0 {
			yyv4480 = yyv4480[:0]
			yyc4480 = true
		}
	} else if yyl4480 > 0 {
		var yyrr4480, yyrl4480 int
		var yyrt4480 bool
		if yyl4480 > cap(yyv4480) {

			yyrg4480 := len(yyv4480) > 0
			yyv24480 := yyv4480
			yyrl4480, yyrt4480 = z.DecInferLen(yyl4480, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4480 {
				if yyrl4480 <= cap(yyv4480) {
					yyv4480 = yyv4480[:yyrl4480]
				} else {
					yyv4480 = make([]ContainerStatus, yyrl4480)
				}
			} else {
				yyv4480 = make([]ContainerStatus, yyrl4480)
			}
			yyc4480 = true
			yyrr4480 = len(yyv4480)
			if yyrg4480 {
				copy(yyv4480, yyv24480)
			}
		} else if yyl4480 != len(yyv4480) {
			yyv4480 = yyv4480[:yyl4480]
			yyc4480 = true
		}
		yyj4480 := 0
		for ; yyj4480 < yyrr4480; yyj4480++ {
			yyh4480.ElemContainerState(yyj4480)
			if r.TryDecodeAsNil() {
				yyv4480[yyj4480] = ContainerStatus{}
			} else {
				yyv4481 := &yyv4480[yyj4480]
				yyv4481.CodecDecodeSelf(d)
			}

		}
		if yyrt4480 {
			for ; yyj4480 < yyl4480; yyj4480++ {
				yyv4480 = append(yyv4480, ContainerStatus{})
				yyh4480.ElemContainerState(yyj4480)
				if r.TryDecodeAsNil() {
					yyv4480[yyj4480] = ContainerStatus{}
				} else {
					yyv4482 := &yyv4480[yyj4480]
					yyv4482.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4480 := 0
		for ; !r.CheckBreak(); yyj4480++ {

			if yyj4480 >= len(yyv4480) {
				yyv4480 = append(yyv4480, ContainerStatus{}) // var yyz4480 ContainerStatus
				yyc4480 = true
			}
			yyh4480.ElemContainerState(yyj4480)
			if yyj4480 < len(yyv4480) {
				if r.TryDecodeAsNil() {
					yyv4480[yyj4480] = ContainerStatus{}
				} else {
					yyv4483 := &yyv4480[yyj4480]
					yyv4483.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4480 < len(yyv4480) {
			yyv4480 = yyv4480[:yyj4480]
			yyc4480 = true
		} else if yyj4480 == 0 && yyv4480 == nil {
			yyv4480 = []ContainerStatus{}
			yyc4480 = true
		}
	}
	yyh4480.End()
	if yyc4480 {
		*v = yyv4480
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4484 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4485 := &yyv4484
		yy4485.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4486 := *v
	yyh4486, yyl4486 := z.DecSliceHelperStart()
	var yyc4486 bool
	if yyl4486 == 0 {
		if yyv4486 == nil {
			yyv4486 = []PodTemplate{}
			yyc4486 = true
		} else if len(yyv4486) != 0 {
			yyv4486 = yyv4486[:0]
			yyc4486 = true
		}
	} else if yyl4486 > 0 {
		var yyrr4486, yyrl4486 int
		var yyrt4486 bool
		if yyl4486 > cap(yyv4486) {

			yyrg4486 := len(yyv4486) > 0
			yyv24486 := yyv4486
			yyrl4486, yyrt4486 = z.DecInferLen(yyl4486, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4486 {
				if yyrl4486 <= cap(yyv4486) {
					yyv4486 = yyv4486[:yyrl4486]
				} else {
					yyv4486 = make([]PodTemplate, yyrl4486)
				}
			} else {
				yyv4486 = make([]PodTemplate, yyrl4486)
			}
			yyc4486 = true
			yyrr4486 = len(yyv4486)
			if yyrg4486 {
				copy(yyv4486, yyv24486)
			}
		} else if yyl4486 != len(yyv4486) {
			yyv4486 = yyv4486[:yyl4486]
			yyc4486 = true
		}
		yyj4486 := 0
		for ; yyj4486 < yyrr4486; yyj4486++ {
			yyh4486.ElemContainerState(yyj4486)
			if r.TryDecodeAsNil() {
				yyv4486[yyj4486] = PodTemplate{}
			} else {
				yyv4487 := &yyv4486[yyj4486]
				yyv4487.CodecDecodeSelf(d)
			}

		}
		if yyrt4486 {
			for ; yyj4486 < yyl4486; yyj4486++ {
				yyv4486 = append(yyv4486, PodTemplate{})
				yyh4486.ElemContainerState(yyj4486)
				if r.TryDecodeAsNil() {
					yyv4486[yyj4486] = PodTemplate{}
				} else {
					yyv4488 := &yyv4486[yyj4486]
					yyv4488.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4486 := 0
		for ; !r.CheckBreak(); yyj4486++ {

			if yyj4486 >= len(yyv4486) {
				yyv4486 = append(yyv4486, PodTemplate{}) // var yyz4486 PodTemplate
				yyc4486 = true
			}
			yyh4486.ElemContainerState(yyj4486)
			if yyj4486 < len(yyv4486) {
				if r.TryDecodeAsNil() {
					yyv4486[yyj4486] = PodTemplate{}
				} else {
					yyv4489 := &yyv4486[yyj4486]
					yyv4489.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4486 < len(yyv4486) {
			yyv4486 = yyv4486[:yyj4486]
			yyc4486 = true
		} else if yyj4486 == 0 && yyv4486 == nil {
			yyv4486 = []PodTemplate{}
			yyc4486 = true
		}
	}
	yyh4486.End()
	if yyc4486 {
		*v = yyv4486
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4490 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4491 := &yyv4490
		yy4491.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4492 := *v
	yyh4492, yyl4492 := z.DecSliceHelperStart()
	var yyc4492 bool
	if yyl4492 == 0 {
		if yyv4492 == nil {
			yyv4492 = []ReplicationController{}
			yyc4492 = true
		} else if len(yyv4492) != 0 {
			yyv4492 = yyv4492[:0]
			yyc4492 = true
		}
	} else if yyl4492 > 0 {
		var yyrr4492, yyrl4492 int
		var yyrt4492 bool
		if yyl4492 > cap(yyv4492) {

			yyrg4492 := len(yyv4492) > 0
			yyv24492 := yyv4492
			yyrl4492, yyrt4492 = z.DecInferLen(yyl4492, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4492 {
				if yyrl4492 <= cap(yyv4492) {
					yyv4492 = yyv4492[:yyrl4492]
				} else {
					yyv4492 = make([]ReplicationController, yyrl4492)
				}
			} else {
				yyv4492 = make([]ReplicationController, yyrl4492)
			}
			yyc4492 = true
			yyrr4492 = len(yyv4492)
			if yyrg4492 {
				copy(yyv4492, yyv24492)
			}
		} else if yyl4492 != len(yyv4492) {
			yyv4492 = yyv4492[:yyl4492]
			yyc4492 = true
		}
		yyj4492 := 0
		for ; yyj4492 < yyrr4492; yyj4492++ {
			yyh4492.ElemContainerState(yyj4492)
			if r.TryDecodeAsNil() {
				yyv4492[yyj4492] = ReplicationController{}
			} else {
				yyv4493 := &yyv4492[yyj4492]
				yyv4493.CodecDecodeSelf(d)
			}

		}
		if yyrt4492 {
			for ; yyj4492 < yyl4492; yyj4492++ {
				yyv4492 = append(yyv4492, ReplicationController{})
				yyh4492.ElemContainerState(yyj4492)
				if r.TryDecodeAsNil() {
					yyv4492[yyj4492] = ReplicationController{}
				} else {
					yyv4494 := &yyv4492[yyj4492]
					yyv4494.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4492 := 0
		for ; !r.CheckBreak(); yyj4492++ {

			if yyj4492 >= len(yyv4492) {
				yyv4492 = append(yyv4492, ReplicationController{}) // var yyz4492 ReplicationController
				yyc4492 = true
			}
			yyh4492.ElemContainerState(yyj4492)
			if yyj4492 < len(yyv4492) {
				if r.TryDecodeAsNil() {
					yyv4492[yyj4492] = ReplicationController{}
				} else {
					yyv4495 := &yyv4492[yyj4492]
					yyv4495.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4492 < len(yyv4492) {
			yyv4492 = yyv4492[:yyj4492]
			yyc4492 = true
		} else if yyj4492 == 0 && yyv4492 == nil {
			yyv4492 = []ReplicationController{}
			yyc4492 = true
		}
	}
	yyh4492.End()
	if yyc4492 {
		*v = yyv4492
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4496 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4497 := &yyv4496
		yy4497.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4498 := *v
	yyh4498, yyl4498 := z.DecSliceHelperStart()
	var yyc4498 bool
	if yyl4498 == 0 {
		if yyv4498 == nil {
			yyv4498 = []Service{}
			yyc4498 = true
		} else if len(yyv4498) != 0 {
			yyv4498 = yyv4498[:0]
			yyc4498 = true
		}
	} else if yyl4498 > 0 {
		var yyrr4498, yyrl4498 int
		var yyrt4498 bool
		if yyl4498 > cap(yyv4498) {

			yyrg4498 := len(yyv4498) > 0
			yyv24498 := yyv4498
			yyrl4498, yyrt4498 = z.DecInferLen(yyl4498, z.DecBasicHandle().MaxInitLen, 408)
			if yyrt4498 {
				if yyrl4498 <= cap(yyv4498) {
					yyv4498 = yyv4498[:yyrl4498]
				} else {
					yyv4498 = make([]Service, yyrl4498)
				}
			} else {
				yyv4498 = make([]Service, yyrl4498)
			}
			yyc4498 = true
			yyrr4498 = len(yyv4498)
			if yyrg4498 {
				copy(yyv4498, yyv24498)
			}
		} else if yyl4498 != len(yyv4498) {
			yyv4498 = yyv4498[:yyl4498]
			yyc4498 = true
		}
		yyj4498 := 0
		for ; yyj4498 < yyrr4498; yyj4498++ {
			yyh4498.ElemContainerState(yyj4498)
			if r.TryDecodeAsNil() {
				yyv4498[yyj4498] = Service{}
			} else {
				yyv4499 := &yyv4498[yyj4498]
				yyv4499.CodecDecodeSelf(d)
			}

		}
		if yyrt4498 {
			for ; yyj4498 < yyl4498; yyj4498++ {
				yyv4498 = append(yyv4498, Service{})
				yyh4498.ElemContainerState(yyj4498)
				if r.TryDecodeAsNil() {
					yyv4498[yyj4498] = Service{}
				} else {
					yyv4500 := &yyv4498[yyj4498]
					yyv4500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4498 := 0
		for ; !r.CheckBreak(); yyj4498++ {

			if yyj4498 >= len(yyv4498) {
				yyv4498 = append(yyv4498, Service{}) // var yyz4498 Service
				yyc4498 = true
			}
			yyh4498.ElemContainerState(yyj4498)
			if yyj4498 < len(yyv4498) {
				if r.TryDecodeAsNil() {
					yyv4498[yyj4498] = Service{}
				} else {
					yyv4501 := &yyv4498[yyj4498]
					yyv4501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4498 < len(yyv4498) {
			yyv4498 = yyv4498[:yyj4498]
			yyc4498 = true
		} else if yyj4498 == 0 && yyv4498 == nil {
			yyv4498 = []Service{}
			yyc4498 = true
		}
	}
	yyh4498.End()
	if yyc4498 {
		*v = yyv4498
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4502 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4503 := &yyv4502
		yy4503.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4504 := *v
	yyh4504, yyl4504 := z.DecSliceHelperStart()
	var yyc4504 bool
	if yyl4504 == 0 {
		if yyv4504 == nil {
			yyv4504 = []LoadBalancerIngress{}
			yyc4504 = true
		} else if len(yyv4504) != 0 {
			yyv4504 = yyv4504[:0]
			yyc4504 = true
		}
	} else if yyl4504 > 0 {
		var yyrr4504, yyrl4504 int
		var yyrt4504 bool
		if yyl4504 > cap(yyv4504) {

			yyrg4504 := len(yyv4504) > 0
			yyv24504 := yyv4504
			yyrl4504, yyrt4504 = z.DecInferLen(yyl4504, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4504 {
				if yyrl4504 <= cap(yyv4504) {
					yyv4504 = yyv4504[:yyrl4504]
				} else {
					yyv4504 = make([]LoadBalancerIngress, yyrl4504)
				}
			} else {
				yyv4504 = make([]LoadBalancerIngress, yyrl4504)
			}
			yyc4504 = true
			yyrr4504 = len(yyv4504)
			if yyrg4504 {
				copy(yyv4504, yyv24504)
			}
		} else if yyl4504 != len(yyv4504) {
			yyv4504 = yyv4504[:yyl4504]
			yyc4504 = true
		}
		yyj4504 := 0
		for ; yyj4504 < yyrr4504; yyj4504++ {
			yyh4504.ElemContainerState(yyj4504)
			if r.TryDecodeAsNil() {
				yyv4504[yyj4504] = LoadBalancerIngress{}
			} else {
				yyv4505 := &yyv4504[yyj4504]
				yyv4505.CodecDecodeSelf(d)
			}

		}
		if yyrt4504 {
			for ; yyj4504 < yyl4504; yyj4504++ {
				yyv4504 = append(yyv4504, LoadBalancerIngress{})
				yyh4504.ElemContainerState(yyj4504)
				if r.TryDecodeAsNil() {
					yyv4504[yyj4504] = LoadBalancerIngress{}
				} else {
					yyv4506 := &yyv4504[yyj4504]
					yyv4506.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4504 := 0
		for ; !r.CheckBreak(); yyj4504++ {

			if yyj4504 >= len(yyv4504) {
				yyv4504 = append(yyv4504, LoadBalancerIngress{}) // var yyz4504 LoadBalancerIngress
				yyc4504 = true
			}
			yyh4504.ElemContainerState(yyj4504)
			if yyj4504 < len(yyv4504) {
				if r.TryDecodeAsNil() {
					yyv4504[yyj4504] = LoadBalancerIngress{}
				} else {
					yyv4507 := &yyv4504[yyj4504]
					yyv4507.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4504 < len(yyv4504) {
			yyv4504 = yyv4504[:yyj4504]
			yyc4504 = true
		} else if yyj4504 == 0 && yyv4504 == nil {
			yyv4504 = []LoadBalancerIngress{}
			yyc4504 = true
		}
	}
	yyh4504.End()
	if yyc4504 {
		*v = yyv4504
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4508 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4509 := &yyv4508
		yy4509.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4510 := *v
	yyh4510, yyl4510 := z.DecSliceHelperStart()
	var yyc4510 bool
	if yyl4510 == 0 {
		if yyv4510 == nil {
			yyv4510 = []ServicePort{}
			yyc4510 = true
		} else if len(yyv4510) != 0 {
			yyv4510 = yyv4510[:0]
			yyc4510 = true
		}
	} else if yyl4510 > 0 {
		var yyrr4510, yyrl4510 int
		var yyrt4510 bool
		if yyl4510 > cap(yyv4510) {

			yyrg4510 := len(yyv4510) > 0
			yyv24510 := yyv4510
			yyrl4510, yyrt4510 = z.DecInferLen(yyl4510, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4510 {
				if yyrl4510 <= cap(yyv4510) {
					yyv4510 = yyv4510[:yyrl4510]
				} else {
					yyv4510 = make([]ServicePort, yyrl4510)
				}
			} else {
				yyv4510 = make([]ServicePort, yyrl4510)
			}
			yyc4510 = true
			yyrr4510 = len(yyv4510)
			if yyrg4510 {
				copy(yyv4510, yyv24510)
			}
		} else if yyl4510 != len(yyv4510) {
			yyv4510 = yyv4510[:yyl4510]
			yyc4510 = true
		}
		yyj4510 := 0
		for ; yyj4510 < yyrr4510; yyj4510++ {
			yyh4510.ElemContainerState(yyj4510)
			if r.TryDecodeAsNil() {
				yyv4510[yyj4510] = ServicePort{}
			} else {
				yyv4511 := &yyv4510[yyj4510]
				yyv4511.CodecDecodeSelf(d)
			}

		}
		if yyrt4510 {
			for ; yyj4510 < yyl4510; yyj4510++ {
				yyv4510 = append(yyv4510, ServicePort{})
				yyh4510.ElemContainerState(yyj4510)
				if r.TryDecodeAsNil() {
					yyv4510[yyj4510] = ServicePort{}
				} else {
					yyv4512 := &yyv4510[yyj4510]
					yyv4512.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4510 := 0
		for ; !r.CheckBreak(); yyj4510++ {

			if yyj4510 >= len(yyv4510) {
				yyv4510 = append(yyv4510, ServicePort{}) // var yyz4510 ServicePort
				yyc4510 = true
			}
			yyh4510.ElemContainerState(yyj4510)
			if yyj4510 < len(yyv4510) {
				if r.TryDecodeAsNil() {
					yyv4510[yyj4510] = ServicePort{}
				} else {
					yyv4513 := &yyv4510[yyj4510]
					yyv4513.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4510 < len(yyv4510) {
			yyv4510 = yyv4510[:yyj4510]
			yyc4510 = true
		} else if yyj4510 == 0 && yyv4510 == nil {
			yyv4510 = []ServicePort{}
			yyc4510 = true
		}
	}
	yyh4510.End()
	if yyc4510 {
		*v = yyv4510
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4514 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4515 := &yyv4514
		yy4515.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4516 := *v
	yyh4516, yyl4516 := z.DecSliceHelperStart()
	var yyc4516 bool
	if yyl4516 == 0 {
		if yyv4516 == nil {
			yyv4516 = []ObjectReference{}
			yyc4516 = true
		} else if len(yyv4516) != 0 {
			yyv4516 = yyv4516[:0]
			yyc4516 = true
		}
	} else if yyl4516 > 0 {
		var yyrr4516, yyrl4516 int
		var yyrt4516 bool
		if yyl4516 > cap(yyv4516) {

			yyrg4516 := len(yyv4516) > 0
			yyv24516 := yyv4516
			yyrl4516, yyrt4516 = z.DecInferLen(yyl4516, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4516 {
				if yyrl4516 <= cap(yyv4516) {
					yyv4516 = yyv4516[:yyrl4516]
				} else {
					yyv4516 = make([]ObjectReference, yyrl4516)
				}
			} else {
				yyv4516 = make([]ObjectReference, yyrl4516)
			}
			yyc4516 = true
			yyrr4516 = len(yyv4516)
			if yyrg4516 {
				copy(yyv4516, yyv24516)
			}
		} else if yyl4516 != len(yyv4516) {
			yyv4516 = yyv4516[:yyl4516]
			yyc4516 = true
		}
		yyj4516 := 0
		for ; yyj4516 < yyrr4516; yyj4516++ {
			yyh4516.ElemContainerState(yyj4516)
			if r.TryDecodeAsNil() {
				yyv4516[yyj4516] = ObjectReference{}
			} else {
				yyv4517 := &yyv4516[yyj4516]
				yyv4517.CodecDecodeSelf(d)
			}

		}
		if yyrt4516 {
			for ; yyj4516 < yyl4516; yyj4516++ {
				yyv4516 = append(yyv4516, ObjectReference{})
				yyh4516.ElemContainerState(yyj4516)
				if r.TryDecodeAsNil() {
					yyv4516[yyj4516] = ObjectReference{}
				} else {
					yyv4518 := &yyv4516[yyj4516]
					yyv4518.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4516 := 0
		for ; !r.CheckBreak(); yyj4516++ {

			if yyj4516 >= len(yyv4516) {
				yyv4516 = append(yyv4516, ObjectReference{}) // var yyz4516 ObjectReference
				yyc4516 = true
			}
			yyh4516.ElemContainerState(yyj4516)
			if yyj4516 < len(yyv4516) {
				if r.TryDecodeAsNil() {
					yyv4516[yyj4516] = ObjectReference{}
				} else {
					yyv4519 := &yyv4516[yyj4516]
					yyv4519.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4516 < len(yyv4516) {
			yyv4516 = yyv4516[:yyj4516]
			yyc4516 = true
		} else if yyj4516 == 0 && yyv4516 == nil {
			yyv4516 = []ObjectReference{}
			yyc4516 = true
		}
	}
	yyh4516.End()
	if yyc4516 {
		*v = yyv4516
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4520 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4521 := &yyv4520
		yy4521.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4522 := *v
	yyh4522, yyl4522 := z.DecSliceHelperStart()
	var yyc4522 bool
	if yyl4522 == 0 {
		if yyv4522 == nil {
			yyv4522 = []ServiceAccount{}
			yyc4522 = true
		} else if len(yyv4522) != 0 {
			yyv4522 = yyv4522[:0]
			yyc4522 = true
		}
	} else if yyl4522 > 0 {
		var yyrr4522, yyrl4522 int
		var yyrt4522 bool
		if yyl4522 > cap(yyv4522) {

			yyrg4522 := len(yyv4522) > 0
			yyv24522 := yyv4522
			yyrl4522, yyrt4522 = z.DecInferLen(yyl4522, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4522 {
				if yyrl4522 <= cap(yyv4522) {
					yyv4522 = yyv4522[:yyrl4522]
				} else {
					yyv4522 = make([]ServiceAccount, yyrl4522)
				}
			} else {
				yyv4522 = make([]ServiceAccount, yyrl4522)
			}
			yyc4522 = true
			yyrr4522 = len(yyv4522)
			if yyrg4522 {
				copy(yyv4522, yyv24522)
			}
		} else if yyl4522 != len(yyv4522) {
			yyv4522 = yyv4522[:yyl4522]
			yyc4522 = true
		}
		yyj4522 := 0
		for ; yyj4522 < yyrr4522; yyj4522++ {
			yyh4522.ElemContainerState(yyj4522)
			if r.TryDecodeAsNil() {
				yyv4522[yyj4522] = ServiceAccount{}
			} else {
				yyv4523 := &yyv4522[yyj4522]
				yyv4523.CodecDecodeSelf(d)
			}

		}
		if yyrt4522 {
			for ; yyj4522 < yyl4522; yyj4522++ {
				yyv4522 = append(yyv4522, ServiceAccount{})
				yyh4522.ElemContainerState(yyj4522)
				if r.TryDecodeAsNil() {
					yyv4522[yyj4522] = ServiceAccount{}
				} else {
					yyv4524 := &yyv4522[yyj4522]
					yyv4524.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4522 := 0
		for ; !r.CheckBreak(); yyj4522++ {

			if yyj4522 >= len(yyv4522) {
				yyv4522 = append(yyv4522, ServiceAccount{}) // var yyz4522 ServiceAccount
				yyc4522 = true
			}
			yyh4522.ElemContainerState(yyj4522)
			if yyj4522 < len(yyv4522) {
				if r.TryDecodeAsNil() {
					yyv4522[yyj4522] = ServiceAccount{}
				} else {
					yyv4525 := &yyv4522[yyj4522]
					yyv4525.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4522 < len(yyv4522) {
			yyv4522 = yyv4522[:yyj4522]
			yyc4522 = true
		} else if yyj4522 == 0 && yyv4522 == nil {
			yyv4522 = []ServiceAccount{}
			yyc4522 = true
		}
	}
	yyh4522.End()
	if yyc4522 {
		*v = yyv4522
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4526 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4527 := &yyv4526
		yy4527.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4528 := *v
	yyh4528, yyl4528 := z.DecSliceHelperStart()
	var yyc4528 bool
	if yyl4528 == 0 {
		if yyv4528 == nil {
			yyv4528 = []EndpointSubset{}
			yyc4528 = true
		} else if len(yyv4528) != 0 {
			yyv4528 = yyv4528[:0]
			yyc4528 = true
		}
	} else if yyl4528 > 0 {
		var yyrr4528, yyrl4528 int
		var yyrt4528 bool
		if yyl4528 > cap(yyv4528) {

			yyrg4528 := len(yyv4528) > 0
			yyv24528 := yyv4528
			yyrl4528, yyrt4528 = z.DecInferLen(yyl4528, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4528 {
				if yyrl4528 <= cap(yyv4528) {
					yyv4528 = yyv4528[:yyrl4528]
				} else {
					yyv4528 = make([]EndpointSubset, yyrl4528)
				}
			} else {
				yyv4528 = make([]EndpointSubset, yyrl4528)
			}
			yyc4528 = true
			yyrr4528 = len(yyv4528)
			if yyrg4528 {
				copy(yyv4528, yyv24528)
			}
		} else if yyl4528 != len(yyv4528) {
			yyv4528 = yyv4528[:yyl4528]
			yyc4528 = true
		}
		yyj4528 := 0
		for ; yyj4528 < yyrr4528; yyj4528++ {
			yyh4528.ElemContainerState(yyj4528)
			if r.TryDecodeAsNil() {
				yyv4528[yyj4528] = EndpointSubset{}
			} else {
				yyv4529 := &yyv4528[yyj4528]
				yyv4529.CodecDecodeSelf(d)
			}

		}
		if yyrt4528 {
			for ; yyj4528 < yyl4528; yyj4528++ {
				yyv4528 = append(yyv4528, EndpointSubset{})
				yyh4528.ElemContainerState(yyj4528)
				if r.TryDecodeAsNil() {
					yyv4528[yyj4528] = EndpointSubset{}
				} else {
					yyv4530 := &yyv4528[yyj4528]
					yyv4530.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4528 := 0
		for ; !r.CheckBreak(); yyj4528++ {

			if yyj4528 >= len(yyv4528) {
				yyv4528 = append(yyv4528, EndpointSubset{}) // var yyz4528 EndpointSubset
				yyc4528 = true
			}
			yyh4528.ElemContainerState(yyj4528)
			if yyj4528 < len(yyv4528) {
				if r.TryDecodeAsNil() {
					yyv4528[yyj4528] = EndpointSubset{}
				} else {
					yyv4531 := &yyv4528[yyj4528]
					yyv4531.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4528 < len(yyv4528) {
			yyv4528 = yyv4528[:yyj4528]
			yyc4528 = true
		} else if yyj4528 == 0 && yyv4528 == nil {
			yyv4528 = []EndpointSubset{}
			yyc4528 = true
		}
	}
	yyh4528.End()
	if yyc4528 {
		*v = yyv4528
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4532 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4533 := &yyv4532
		yy4533.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4534 := *v
	yyh4534, yyl4534 := z.DecSliceHelperStart()
	var yyc4534 bool
	if yyl4534 == 0 {
		if yyv4534 == nil {
			yyv4534 = []EndpointAddress{}
			yyc4534 = true
		} else if len(yyv4534) != 0 {
			yyv4534 = yyv4534[:0]
			yyc4534 = true
		}
	} else if yyl4534 > 0 {
		var yyrr4534, yyrl4534 int
		var yyrt4534 bool
		if yyl4534 > cap(yyv4534) {

			yyrg4534 := len(yyv4534) > 0
			yyv24534 := yyv4534
			yyrl4534, yyrt4534 = z.DecInferLen(yyl4534, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4534 {
				if yyrl4534 <= cap(yyv4534) {
					yyv4534 = yyv4534[:yyrl4534]
				} else {
					yyv4534 = make([]EndpointAddress, yyrl4534)
				}
			} else {
				yyv4534 = make([]EndpointAddress, yyrl4534)
			}
			yyc4534 = true
			yyrr4534 = len(yyv4534)
			if yyrg4534 {
				copy(yyv4534, yyv24534)
			}
		} else if yyl4534 != len(yyv4534) {
			yyv4534 = yyv4534[:yyl4534]
			yyc4534 = true
		}
		yyj4534 := 0
		for ; yyj4534 < yyrr4534; yyj4534++ {
			yyh4534.ElemContainerState(yyj4534)
			if r.TryDecodeAsNil() {
				yyv4534[yyj4534] = EndpointAddress{}
			} else {
				yyv4535 := &yyv4534[yyj4534]
				yyv4535.CodecDecodeSelf(d)
			}

		}
		if yyrt4534 {
			for ; yyj4534 < yyl4534; yyj4534++ {
				yyv4534 = append(yyv4534, EndpointAddress{})
				yyh4534.ElemContainerState(yyj4534)
				if r.TryDecodeAsNil() {
					yyv4534[yyj4534] = EndpointAddress{}
				} else {
					yyv4536 := &yyv4534[yyj4534]
					yyv4536.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4534 := 0
		for ; !r.CheckBreak(); yyj4534++ {

			if yyj4534 >= len(yyv4534) {
				yyv4534 = append(yyv4534, EndpointAddress{}) // var yyz4534 EndpointAddress
				yyc4534 = true
			}
			yyh4534.ElemContainerState(yyj4534)
			if yyj4534 < len(yyv4534) {
				if r.TryDecodeAsNil() {
					yyv4534[yyj4534] = EndpointAddress{}
				} else {
					yyv4537 := &yyv4534[yyj4534]
					yyv4537.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4534 < len(yyv4534) {
			yyv4534 = yyv4534[:yyj4534]
			yyc4534 = true
		} else if yyj4534 == 0 && yyv4534 == nil {
			yyv4534 = []EndpointAddress{}
			yyc4534 = true
		}
	}
	yyh4534.End()
	if yyc4534 {
		*v = yyv4534
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4538 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4539 := &yyv4538
		yy4539.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4540 := *v
	yyh4540, yyl4540 := z.DecSliceHelperStart()
	var yyc4540 bool
	if yyl4540 == 0 {
		if yyv4540 == nil {
			yyv4540 = []EndpointPort{}
			yyc4540 = true
		} else if len(yyv4540) != 0 {
			yyv4540 = yyv4540[:0]
			yyc4540 = true
		}
	} else if yyl4540 > 0 {
		var yyrr4540, yyrl4540 int
		var yyrt4540 bool
		if yyl4540 > cap(yyv4540) {

			yyrg4540 := len(yyv4540) > 0
			yyv24540 := yyv4540
			yyrl4540, yyrt4540 = z.DecInferLen(yyl4540, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4540 {
				if yyrl4540 <= cap(yyv4540) {
					yyv4540 = yyv4540[:yyrl4540]
				} else {
					yyv4540 = make([]EndpointPort, yyrl4540)
				}
			} else {
				yyv4540 = make([]EndpointPort, yyrl4540)
			}
			yyc4540 = true
			yyrr4540 = len(yyv4540)
			if yyrg4540 {
				copy(yyv4540, yyv24540)
			}
		} else if yyl4540 != len(yyv4540) {
			yyv4540 = yyv4540[:yyl4540]
			yyc4540 = true
		}
		yyj4540 := 0
		for ; yyj4540 < yyrr4540; yyj4540++ {
			yyh4540.ElemContainerState(yyj4540)
			if r.TryDecodeAsNil() {
				yyv4540[yyj4540] = EndpointPort{}
			} else {
				yyv4541 := &yyv4540[yyj4540]
				yyv4541.CodecDecodeSelf(d)
			}

		}
		if yyrt4540 {
			for ; yyj4540 < yyl4540; yyj4540++ {
				yyv4540 = append(yyv4540, EndpointPort{})
				yyh4540.ElemContainerState(yyj4540)
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = EndpointPort{}
				} else {
					yyv4542 := &yyv4540[yyj4540]
					yyv4542.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4540 := 0
		for ; !r.CheckBreak(); yyj4540++ {

			if yyj4540 >= len(yyv4540) {
				yyv4540 = append(yyv4540, EndpointPort{}) // var yyz4540 EndpointPort
				yyc4540 = true
			}
			yyh4540.ElemContainerState(yyj4540)
			if yyj4540 < len(yyv4540) {
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = EndpointPort{}
				} else {
					yyv4543 := &yyv4540[yyj4540]
					yyv4543.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4540 < len(yyv4540) {
			yyv4540 = yyv4540[:yyj4540]
			yyc4540 = true
		} else if yyj4540 == 0 && yyv4540 == nil {
			yyv4540 = []EndpointPort{}
			yyc4540 = true
		}
	}
	yyh4540.End()
	if yyc4540 {
		*v = yyv4540
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4545 := &yyv4544
		yy4545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4546 := *v
	yyh4546, yyl4546 := z.DecSliceHelperStart()
	var yyc4546 bool
	if yyl4546 == 0 {
		if yyv4546 == nil {
			yyv4546 = []Endpoints{}
			yyc4546 = true
		} else if len(yyv4546) != 0 {
			yyv4546 = yyv4546[:0]
			yyc4546 = true
		}
	} else if yyl4546 > 0 {
		var yyrr4546, yyrl4546 int
		var yyrt4546 bool
		if yyl4546 > cap(yyv4546) {

			yyrg4546 := len(yyv4546) > 0
			yyv24546 := yyv4546
			yyrl4546, yyrt4546 = z.DecInferLen(yyl4546, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4546 {
				if yyrl4546 <= cap(yyv4546) {
					yyv4546 = yyv4546[:yyrl4546]
				} else {
					yyv4546 = make([]Endpoints, yyrl4546)
				}
			} else {
				yyv4546 = make([]Endpoints, yyrl4546)
			}
			yyc4546 = true
			yyrr4546 = len(yyv4546)
			if yyrg4546 {
				copy(yyv4546, yyv24546)
			}
		} else if yyl4546 != len(yyv4546) {
			yyv4546 = yyv4546[:yyl4546]
			yyc4546 = true
		}
		yyj4546 := 0
		for ; yyj4546 < yyrr4546; yyj4546++ {
			yyh4546.ElemContainerState(yyj4546)
			if r.TryDecodeAsNil() {
				yyv4546[yyj4546] = Endpoints{}
			} else {
				yyv4547 := &yyv4546[yyj4546]
				yyv4547.CodecDecodeSelf(d)
			}

		}
		if yyrt4546 {
			for ; yyj4546 < yyl4546; yyj4546++ {
				yyv4546 = append(yyv4546, Endpoints{})
				yyh4546.ElemContainerState(yyj4546)
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = Endpoints{}
				} else {
					yyv4548 := &yyv4546[yyj4546]
					yyv4548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4546 := 0
		for ; !r.CheckBreak(); yyj4546++ {

			if yyj4546 >= len(yyv4546) {
				yyv4546 = append(yyv4546, Endpoints{}) // var yyz4546 Endpoints
				yyc4546 = true
			}
			yyh4546.ElemContainerState(yyj4546)
			if yyj4546 < len(yyv4546) {
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = Endpoints{}
				} else {
					yyv4549 := &yyv4546[yyj4546]
					yyv4549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4546 < len(yyv4546) {
			yyv4546 = yyv4546[:yyj4546]
			yyc4546 = true
		} else if yyj4546 == 0 && yyv4546 == nil {
			yyv4546 = []Endpoints{}
			yyc4546 = true
		}
	}
	yyh4546.End()
	if yyc4546 {
		*v = yyv4546
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4551 := &yyv4550
		yy4551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4552 := *v
	yyh4552, yyl4552 := z.DecSliceHelperStart()
	var yyc4552 bool
	if yyl4552 == 0 {
		if yyv4552 == nil {
			yyv4552 = []NodeCondition{}
			yyc4552 = true
		} else if len(yyv4552) != 0 {
			yyv4552 = yyv4552[:0]
			yyc4552 = true
		}
	} else if yyl4552 > 0 {
		var yyrr4552, yyrl4552 int
		var yyrt4552 bool
		if yyl4552 > cap(yyv4552) {

			yyrg4552 := len(yyv4552) > 0
			yyv24552 := yyv4552
			yyrl4552, yyrt4552 = z.DecInferLen(yyl4552, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4552 {
				if yyrl4552 <= cap(yyv4552) {
					yyv4552 = yyv4552[:yyrl4552]
				} else {
					yyv4552 = make([]NodeCondition, yyrl4552)
				}
			} else {
				yyv4552 = make([]NodeCondition, yyrl4552)
			}
			yyc4552 = true
			yyrr4552 = len(yyv4552)
			if yyrg4552 {
				copy(yyv4552, yyv24552)
			}
		} else if yyl4552 != len(yyv4552) {
			yyv4552 = yyv4552[:yyl4552]
			yyc4552 = true
		}
		yyj4552 := 0
		for ; yyj4552 < yyrr4552; yyj4552++ {
			yyh4552.ElemContainerState(yyj4552)
			if r.TryDecodeAsNil() {
				yyv4552[yyj4552] = NodeCondition{}
			} else {
				yyv4553 := &yyv4552[yyj4552]
				yyv4553.CodecDecodeSelf(d)
			}

		}
		if yyrt4552 {
			for ; yyj4552 < yyl4552; yyj4552++ {
				yyv4552 = append(yyv4552, NodeCondition{})
				yyh4552.ElemContainerState(yyj4552)
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = NodeCondition{}
				} else {
					yyv4554 := &yyv4552[yyj4552]
					yyv4554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4552 := 0
		for ; !r.CheckBreak(); yyj4552++ {

			if yyj4552 >= len(yyv4552) {
				yyv4552 = append(yyv4552, NodeCondition{}) // var yyz4552 NodeCondition
				yyc4552 = true
			}
			yyh4552.ElemContainerState(yyj4552)
			if yyj4552 < len(yyv4552) {
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = NodeCondition{}
				} else {
					yyv4555 := &yyv4552[yyj4552]
					yyv4555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4552 < len(yyv4552) {
			yyv4552 = yyv4552[:yyj4552]
			yyc4552 = true
		} else if yyj4552 == 0 && yyv4552 == nil {
			yyv4552 = []NodeCondition{}
			yyc4552 = true
		}
	}
	yyh4552.End()
	if yyc4552 {
		*v = yyv4552
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4557 := &yyv4556
		yy4557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4558 := *v
	yyh4558, yyl4558 := z.DecSliceHelperStart()
	var yyc4558 bool
	if yyl4558 == 0 {
		if yyv4558 == nil {
			yyv4558 = []NodeAddress{}
			yyc4558 = true
		} else if len(yyv4558) != 0 {
			yyv4558 = yyv4558[:0]
			yyc4558 = true
		}
	} else if yyl4558 > 0 {
		var yyrr4558, yyrl4558 int
		var yyrt4558 bool
		if yyl4558 > cap(yyv4558) {

			yyrg4558 := len(yyv4558) > 0
			yyv24558 := yyv4558
			yyrl4558, yyrt4558 = z.DecInferLen(yyl4558, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4558 {
				if yyrl4558 <= cap(yyv4558) {
					yyv4558 = yyv4558[:yyrl4558]
				} else {
					yyv4558 = make([]NodeAddress, yyrl4558)
				}
			} else {
				yyv4558 = make([]NodeAddress, yyrl4558)
			}
			yyc4558 = true
			yyrr4558 = len(yyv4558)
			if yyrg4558 {
				copy(yyv4558, yyv24558)
			}
		} else if yyl4558 != len(yyv4558) {
			yyv4558 = yyv4558[:yyl4558]
			yyc4558 = true
		}
		yyj4558 := 0
		for ; yyj4558 < yyrr4558; yyj4558++ {
			yyh4558.ElemContainerState(yyj4558)
			if r.TryDecodeAsNil() {
				yyv4558[yyj4558] = NodeAddress{}
			} else {
				yyv4559 := &yyv4558[yyj4558]
				yyv4559.CodecDecodeSelf(d)
			}

		}
		if yyrt4558 {
			for ; yyj4558 < yyl4558; yyj4558++ {
				yyv4558 = append(yyv4558, NodeAddress{})
				yyh4558.ElemContainerState(yyj4558)
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = NodeAddress{}
				} else {
					yyv4560 := &yyv4558[yyj4558]
					yyv4560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4558 := 0
		for ; !r.CheckBreak(); yyj4558++ {

			if yyj4558 >= len(yyv4558) {
				yyv4558 = append(yyv4558, NodeAddress{}) // var yyz4558 NodeAddress
				yyc4558 = true
			}
			yyh4558.ElemContainerState(yyj4558)
			if yyj4558 < len(yyv4558) {
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = NodeAddress{}
				} else {
					yyv4561 := &yyv4558[yyj4558]
					yyv4561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4558 < len(yyv4558) {
			yyv4558 = yyv4558[:yyj4558]
			yyc4558 = true
		} else if yyj4558 == 0 && yyv4558 == nil {
			yyv4558 = []NodeAddress{}
			yyc4558 = true
		}
	}
	yyh4558.End()
	if yyc4558 {
		*v = yyv4558
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4563 := &yyv4562
		yy4563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4564 := *v
	yyh4564, yyl4564 := z.DecSliceHelperStart()
	var yyc4564 bool
	if yyl4564 == 0 {
		if yyv4564 == nil {
			yyv4564 = []ContainerImage{}
			yyc4564 = true
		} else if len(yyv4564) != 0 {
			yyv4564 = yyv4564[:0]
			yyc4564 = true
		}
	} else if yyl4564 > 0 {
		var yyrr4564, yyrl4564 int
		var yyrt4564 bool
		if yyl4564 > cap(yyv4564) {

			yyrg4564 := len(yyv4564) > 0
			yyv24564 := yyv4564
			yyrl4564, yyrt4564 = z.DecInferLen(yyl4564, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4564 {
				if yyrl4564 <= cap(yyv4564) {
					yyv4564 = yyv4564[:yyrl4564]
				} else {
					yyv4564 = make([]ContainerImage, yyrl4564)
				}
			} else {
				yyv4564 = make([]ContainerImage, yyrl4564)
			}
			yyc4564 = true
			yyrr4564 = len(yyv4564)
			if yyrg4564 {
				copy(yyv4564, yyv24564)
			}
		} else if yyl4564 != len(yyv4564) {
			yyv4564 = yyv4564[:yyl4564]
			yyc4564 = true
		}
		yyj4564 := 0
		for ; yyj4564 < yyrr4564; yyj4564++ {
			yyh4564.ElemContainerState(yyj4564)
			if r.TryDecodeAsNil() {
				yyv4564[yyj4564] = ContainerImage{}
			} else {
				yyv4565 := &yyv4564[yyj4564]
				yyv4565.CodecDecodeSelf(d)
			}

		}
		if yyrt4564 {
			for ; yyj4564 < yyl4564; yyj4564++ {
				yyv4564 = append(yyv4564, ContainerImage{})
				yyh4564.ElemContainerState(yyj4564)
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = ContainerImage{}
				} else {
					yyv4566 := &yyv4564[yyj4564]
					yyv4566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4564 := 0
		for ; !r.CheckBreak(); yyj4564++ {

			if yyj4564 >= len(yyv4564) {
				yyv4564 = append(yyv4564, ContainerImage{}) // var yyz4564 ContainerImage
				yyc4564 = true
			}
			yyh4564.ElemContainerState(yyj4564)
			if yyj4564 < len(yyv4564) {
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = ContainerImage{}
				} else {
					yyv4567 := &yyv4564[yyj4564]
					yyv4567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4564 < len(yyv4564) {
			yyv4564 = yyv4564[:yyj4564]
			yyc4564 = true
		} else if yyj4564 == 0 && yyv4564 == nil {
			yyv4564 = []ContainerImage{}
			yyc4564 = true
		}
	}
	yyh4564.End()
	if yyc4564 {
		*v = yyv4564
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4568.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4569 := *v
	yyh4569, yyl4569 := z.DecSliceHelperStart()
	var yyc4569 bool
	if yyl4569 == 0 {
		if yyv4569 == nil {
			yyv4569 = []UniqueVolumeName{}
			yyc4569 = true
		} else if len(yyv4569) != 0 {
			yyv4569 = yyv4569[:0]
			yyc4569 = true
		}
	} else if yyl4569 > 0 {
		var yyrr4569, yyrl4569 int
		var yyrt4569 bool
		if yyl4569 > cap(yyv4569) {

			yyrl4569, yyrt4569 = z.DecInferLen(yyl4569, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4569 {
				if yyrl4569 <= cap(yyv4569) {
					yyv4569 = yyv4569[:yyrl4569]
				} else {
					yyv4569 = make([]UniqueVolumeName, yyrl4569)
				}
			} else {
				yyv4569 = make([]UniqueVolumeName, yyrl4569)
			}
			yyc4569 = true
			yyrr4569 = len(yyv4569)
		} else if yyl4569 != len(yyv4569) {
			yyv4569 = yyv4569[:yyl4569]
			yyc4569 = true
		}
		yyj4569 := 0
		for ; yyj4569 < yyrr4569; yyj4569++ {
			yyh4569.ElemContainerState(yyj4569)
			if r.TryDecodeAsNil() {
				yyv4569[yyj4569] = ""
			} else {
				yyv4569[yyj4569] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4569 {
			for ; yyj4569 < yyl4569; yyj4569++ {
				yyv4569 = append(yyv4569, "")
				yyh4569.ElemContainerState(yyj4569)
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = ""
				} else {
					yyv4569[yyj4569] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4569 := 0
		for ; !r.CheckBreak(); yyj4569++ {

			if yyj4569 >= len(yyv4569) {
				yyv4569 = append(yyv4569, "") // var yyz4569 UniqueVolumeName
				yyc4569 = true
			}
			yyh4569.ElemContainerState(yyj4569)
			if yyj4569 < len(yyv4569) {
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = ""
				} else {
					yyv4569[yyj4569] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4569 < len(yyv4569) {
			yyv4569 = yyv4569[:yyj4569]
			yyc4569 = true
		} else if yyj4569 == 0 && yyv4569 == nil {
			yyv4569 = []UniqueVolumeName{}
			yyc4569 = true
		}
	}
	yyh4569.End()
	if yyc4569 {
		*v = yyv4569
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4573 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4574 := &yyv4573
		yy4574.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4575 := *v
	yyh4575, yyl4575 := z.DecSliceHelperStart()
	var yyc4575 bool
	if yyl4575 == 0 {
		if yyv4575 == nil {
			yyv4575 = []AttachedVolume{}
			yyc4575 = true
		} else if len(yyv4575) != 0 {
			yyv4575 = yyv4575[:0]
			yyc4575 = true
		}
	} else if yyl4575 > 0 {
		var yyrr4575, yyrl4575 int
		var yyrt4575 bool
		if yyl4575 > cap(yyv4575) {

			yyrg4575 := len(yyv4575) > 0
			yyv24575 := yyv4575
			yyrl4575, yyrt4575 = z.DecInferLen(yyl4575, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4575 {
				if yyrl4575 <= cap(yyv4575) {
					yyv4575 = yyv4575[:yyrl4575]
				} else {
					yyv4575 = make([]AttachedVolume, yyrl4575)
				}
			} else {
				yyv4575 = make([]AttachedVolume, yyrl4575)
			}
			yyc4575 = true
			yyrr4575 = len(yyv4575)
			if yyrg4575 {
				copy(yyv4575, yyv24575)
			}
		} else if yyl4575 != len(yyv4575) {
			yyv4575 = yyv4575[:yyl4575]
			yyc4575 = true
		}
		yyj4575 := 0
		for ; yyj4575 < yyrr4575; yyj4575++ {
			yyh4575.ElemContainerState(yyj4575)
			if r.TryDecodeAsNil() {
				yyv4575[yyj4575] = AttachedVolume{}
			} else {
				yyv4576 := &yyv4575[yyj4575]
				yyv4576.CodecDecodeSelf(d)
			}

		}
		if yyrt4575 {
			for ; yyj4575 < yyl4575; yyj4575++ {
				yyv4575 = append(yyv4575, AttachedVolume{})
				yyh4575.ElemContainerState(yyj4575)
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = AttachedVolume{}
				} else {
					yyv4577 := &yyv4575[yyj4575]
					yyv4577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4575 := 0
		for ; !r.CheckBreak(); yyj4575++ {

			if yyj4575 >= len(yyv4575) {
				yyv4575 = append(yyv4575, AttachedVolume{}) // var yyz4575 AttachedVolume
				yyc4575 = true
			}
			yyh4575.ElemContainerState(yyj4575)
			if yyj4575 < len(yyv4575) {
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = AttachedVolume{}
				} else {
					yyv4578 := &yyv4575[yyj4575]
					yyv4578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4575 < len(yyv4575) {
			yyv4575 = yyv4575[:yyj4575]
			yyc4575 = true
		} else if yyj4575 == 0 && yyv4575 == nil {
			yyv4575 = []AttachedVolume{}
			yyc4575 = true
		}
	}
	yyh4575.End()
	if yyc4575 {
		*v = yyv4575
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4579 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4580 := &yyv4579
		yy4580.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4581 := *v
	yyh4581, yyl4581 := z.DecSliceHelperStart()
	var yyc4581 bool
	if yyl4581 == 0 {
		if yyv4581 == nil {
			yyv4581 = []PreferAvoidPodsEntry{}
			yyc4581 = true
		} else if len(yyv4581) != 0 {
			yyv4581 = yyv4581[:0]
			yyc4581 = true
		}
	} else if yyl4581 > 0 {
		var yyrr4581, yyrl4581 int
		var yyrt4581 bool
		if yyl4581 > cap(yyv4581) {

			yyrg4581 := len(yyv4581) > 0
			yyv24581 := yyv4581
			yyrl4581, yyrt4581 = z.DecInferLen(yyl4581, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4581 {
				if yyrl4581 <= cap(yyv4581) {
					yyv4581 = yyv4581[:yyrl4581]
				} else {
					yyv4581 = make([]PreferAvoidPodsEntry, yyrl4581)
				}
			} else {
				yyv4581 = make([]PreferAvoidPodsEntry, yyrl4581)
			}
			yyc4581 = true
			yyrr4581 = len(yyv4581)
			if yyrg4581 {
				copy(yyv4581, yyv24581)
			}
		} else if yyl4581 != len(yyv4581) {
			yyv4581 = yyv4581[:yyl4581]
			yyc4581 = true
		}
		yyj4581 := 0
		for ; yyj4581 < yyrr4581; yyj4581++ {
			yyh4581.ElemContainerState(yyj4581)
			if r.TryDecodeAsNil() {
				yyv4581[yyj4581] = PreferAvoidPodsEntry{}
			} else {
				yyv4582 := &yyv4581[yyj4581]
				yyv4582.CodecDecodeSelf(d)
			}

		}
		if yyrt4581 {
			for ; yyj4581 < yyl4581; yyj4581++ {
				yyv4581 = append(yyv4581, PreferAvoidPodsEntry{})
				yyh4581.ElemContainerState(yyj4581)
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = PreferAvoidPodsEntry{}
				} else {
					yyv4583 := &yyv4581[yyj4581]
					yyv4583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4581 := 0
		for ; !r.CheckBreak(); yyj4581++ {

			if yyj4581 >= len(yyv4581) {
				yyv4581 = append(yyv4581, PreferAvoidPodsEntry{}) // var yyz4581 PreferAvoidPodsEntry
				yyc4581 = true
			}
			yyh4581.ElemContainerState(yyj4581)
			if yyj4581 < len(yyv4581) {
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = PreferAvoidPodsEntry{}
				} else {
					yyv4584 := &yyv4581[yyj4581]
					yyv4584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4581 < len(yyv4581) {
			yyv4581 = yyv4581[:yyj4581]
			yyc4581 = true
		} else if yyj4581 == 0 && yyv4581 == nil {
			yyv4581 = []PreferAvoidPodsEntry{}
			yyc4581 = true
		}
	}
	yyh4581.End()
	if yyc4581 {
		*v = yyv4581
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4585, yyv4585 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4585.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4586 := &yyv4585
		yym4587 := z.EncBinary()
		_ = yym4587
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4586) {
		} else if !yym4587 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4586)
		} else {
			z.EncFallback(yy4586)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4588 := *v
	yyl4588 := r.ReadMapStart()
	yybh4588 := z.DecBasicHandle()
	if yyv4588 == nil {
		yyrl4588, _ := z.DecInferLen(yyl4588, yybh4588.MaxInitLen, 72)
		yyv4588 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4588)
		*v = yyv4588
	}
	var yymk4588 ResourceName
	var yymv4588 pkg3_resource.Quantity
	var yymg4588 bool
	if yybh4588.MapValueReset {
		yymg4588 = true
	}
	if yyl4588 > 0 {
		for yyj4588 := 0; yyj4588 < yyl4588; yyj4588++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4588 = ""
			} else {
				yymk4588 = ResourceName(r.DecodeString())
			}

			if yymg4588 {
				yymv4588 = yyv4588[yymk4588]
			} else {
				yymv4588 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4588 = pkg3_resource.Quantity{}
			} else {
				yyv4590 := &yymv4588
				yym4591 := z.DecBinary()
				_ = yym4591
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4590) {
				} else if !yym4591 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4590)
				} else {
					z.DecFallback(yyv4590, false)
				}
			}

			if yyv4588 != nil {
				yyv4588[yymk4588] = yymv4588
			}
		}
	} else if yyl4588 < 0 {
		for yyj4588 := 0; !r.CheckBreak(); yyj4588++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4588 = ""
			} else {
				yymk4588 = ResourceName(r.DecodeString())
			}

			if yymg4588 {
				yymv4588 = yyv4588[yymk4588]
			} else {
				yymv4588 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4588 = pkg3_resource.Quantity{}
			} else {
				yyv4593 := &yymv4588
				yym4594 := z.DecBinary()
				_ = yym4594
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4593) {
				} else if !yym4594 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4593)
				} else {
					z.DecFallback(yyv4593, false)
				}
			}

			if yyv4588 != nil {
				yyv4588[yymk4588] = yymv4588
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4595 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4596 := &yyv4595
		yy4596.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4597 := *v
	yyh4597, yyl4597 := z.DecSliceHelperStart()
	var yyc4597 bool
	if yyl4597 == 0 {
		if yyv4597 == nil {
			yyv4597 = []Node{}
			yyc4597 = true
		} else if len(yyv4597) != 0 {
			yyv4597 = yyv4597[:0]
			yyc4597 = true
		}
	} else if yyl4597 > 0 {
		var yyrr4597, yyrl4597 int
		var yyrt4597 bool
		if yyl4597 > cap(yyv4597) {

			yyrg4597 := len(yyv4597) > 0
			yyv24597 := yyv4597
			yyrl4597, yyrt4597 = z.DecInferLen(yyl4597, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4597 {
				if yyrl4597 <= cap(yyv4597) {
					yyv4597 = yyv4597[:yyrl4597]
				} else {
					yyv4597 = make([]Node, yyrl4597)
				}
			} else {
				yyv4597 = make([]Node, yyrl4597)
			}
			yyc4597 = true
			yyrr4597 = len(yyv4597)
			if yyrg4597 {
				copy(yyv4597, yyv24597)
			}
		} else if yyl4597 != len(yyv4597) {
			yyv4597 = yyv4597[:yyl4597]
			yyc4597 = true
		}
		yyj4597 := 0
		for ; yyj4597 < yyrr4597; yyj4597++ {
			yyh4597.ElemContainerState(yyj4597)
			if r.TryDecodeAsNil() {
				yyv4597[yyj4597] = Node{}
			} else {
				yyv4598 := &yyv4597[yyj4597]
				yyv4598.CodecDecodeSelf(d)
			}

		}
		if yyrt4597 {
			for ; yyj4597 < yyl4597; yyj4597++ {
				yyv4597 = append(yyv4597, Node{})
				yyh4597.ElemContainerState(yyj4597)
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = Node{}
				} else {
					yyv4599 := &yyv4597[yyj4597]
					yyv4599.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4597 := 0
		for ; !r.CheckBreak(); yyj4597++ {

			if yyj4597 >= len(yyv4597) {
				yyv4597 = append(yyv4597, Node{}) // var yyz4597 Node
				yyc4597 = true
			}
			yyh4597.ElemContainerState(yyj4597)
			if yyj4597 < len(yyv4597) {
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = Node{}
				} else {
					yyv4600 := &yyv4597[yyj4597]
					yyv4600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4597 < len(yyv4597) {
			yyv4597 = yyv4597[:yyj4597]
			yyc4597 = true
		} else if yyj4597 == 0 && yyv4597 == nil {
			yyv4597 = []Node{}
			yyc4597 = true
		}
	}
	yyh4597.End()
	if yyc4597 {
		*v = yyv4597
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4601 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4601.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4602 := *v
	yyh4602, yyl4602 := z.DecSliceHelperStart()
	var yyc4602 bool
	if yyl4602 == 0 {
		if yyv4602 == nil {
			yyv4602 = []FinalizerName{}
			yyc4602 = true
		} else if len(yyv4602) != 0 {
			yyv4602 = yyv4602[:0]
			yyc4602 = true
		}
	} else if yyl4602 > 0 {
		var yyrr4602, yyrl4602 int
		var yyrt4602 bool
		if yyl4602 > cap(yyv4602) {

			yyrl4602, yyrt4602 = z.DecInferLen(yyl4602, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4602 {
				if yyrl4602 <= cap(yyv4602) {
					yyv4602 = yyv4602[:yyrl4602]
				} else {
					yyv4602 = make([]FinalizerName, yyrl4602)
				}
			} else {
				yyv4602 = make([]FinalizerName, yyrl4602)
			}
			yyc4602 = true
			yyrr4602 = len(yyv4602)
		} else if yyl4602 != len(yyv4602) {
			yyv4602 = yyv4602[:yyl4602]
			yyc4602 = true
		}
		yyj4602 := 0
		for ; yyj4602 < yyrr4602; yyj4602++ {
			yyh4602.ElemContainerState(yyj4602)
			if r.TryDecodeAsNil() {
				yyv4602[yyj4602] = ""
			} else {
				yyv4602[yyj4602] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4602 {
			for ; yyj4602 < yyl4602; yyj4602++ {
				yyv4602 = append(yyv4602, "")
				yyh4602.ElemContainerState(yyj4602)
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = ""
				} else {
					yyv4602[yyj4602] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4602 := 0
		for ; !r.CheckBreak(); yyj4602++ {

			if yyj4602 >= len(yyv4602) {
				yyv4602 = append(yyv4602, "") // var yyz4602 FinalizerName
				yyc4602 = true
			}
			yyh4602.ElemContainerState(yyj4602)
			if yyj4602 < len(yyv4602) {
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = ""
				} else {
					yyv4602[yyj4602] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4602 < len(yyv4602) {
			yyv4602 = yyv4602[:yyj4602]
			yyc4602 = true
		} else if yyj4602 == 0 && yyv4602 == nil {
			yyv4602 = []FinalizerName{}
			yyc4602 = true
		}
	}
	yyh4602.End()
	if yyc4602 {
		*v = yyv4602
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4606 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4607 := &yyv4606
		yy4607.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4608 := *v
	yyh4608, yyl4608 := z.DecSliceHelperStart()
	var yyc4608 bool
	if yyl4608 == 0 {
		if yyv4608 == nil {
			yyv4608 = []Namespace{}
			yyc4608 = true
		} else if len(yyv4608) != 0 {
			yyv4608 = yyv4608[:0]
			yyc4608 = true
		}
	} else if yyl4608 > 0 {
		var yyrr4608, yyrl4608 int
		var yyrt4608 bool
		if yyl4608 > cap(yyv4608) {

			yyrg4608 := len(yyv4608) > 0
			yyv24608 := yyv4608
			yyrl4608, yyrt4608 = z.DecInferLen(yyl4608, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4608 {
				if yyrl4608 <= cap(yyv4608) {
					yyv4608 = yyv4608[:yyrl4608]
				} else {
					yyv4608 = make([]Namespace, yyrl4608)
				}
			} else {
				yyv4608 = make([]Namespace, yyrl4608)
			}
			yyc4608 = true
			yyrr4608 = len(yyv4608)
			if yyrg4608 {
				copy(yyv4608, yyv24608)
			}
		} else if yyl4608 != len(yyv4608) {
			yyv4608 = yyv4608[:yyl4608]
			yyc4608 = true
		}
		yyj4608 := 0
		for ; yyj4608 < yyrr4608; yyj4608++ {
			yyh4608.ElemContainerState(yyj4608)
			if r.TryDecodeAsNil() {
				yyv4608[yyj4608] = Namespace{}
			} else {
				yyv4609 := &yyv4608[yyj4608]
				yyv4609.CodecDecodeSelf(d)
			}

		}
		if yyrt4608 {
			for ; yyj4608 < yyl4608; yyj4608++ {
				yyv4608 = append(yyv4608, Namespace{})
				yyh4608.ElemContainerState(yyj4608)
				if r.TryDecodeAsNil() {
					yyv4608[yyj4608] = Namespace{}
				} else {
					yyv4610 := &yyv4608[yyj4608]
					yyv4610.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4608 := 0
		for ; !r.CheckBreak(); yyj4608++ {

			if yyj4608 >= len(yyv4608) {
				yyv4608 = append(yyv4608, Namespace{}) // var yyz4608 Namespace
				yyc4608 = true
			}
			yyh4608.ElemContainerState(yyj4608)
			if yyj4608 < len(yyv4608) {
				if r.TryDecodeAsNil() {
					yyv4608[yyj4608] = Namespace{}
				} else {
					yyv4611 := &yyv4608[yyj4608]
					yyv4611.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4608 < len(yyv4608) {
			yyv4608 = yyv4608[:yyj4608]
			yyc4608 = true
		} else if yyj4608 == 0 && yyv4608 == nil {
			yyv4608 = []Namespace{}
			yyc4608 = true
		}
	}
	yyh4608.End()
	if yyc4608 {
		*v = yyv4608
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4612 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4613 := &yyv4612
		yy4613.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4614 := *v
	yyh4614, yyl4614 := z.DecSliceHelperStart()
	var yyc4614 bool
	if yyl4614 == 0 {
		if yyv4614 == nil {
			yyv4614 = []Event{}
			yyc4614 = true
		} else if len(yyv4614) != 0 {
			yyv4614 = yyv4614[:0]
			yyc4614 = true
		}
	} else if yyl4614 > 0 {
		var yyrr4614, yyrl4614 int
		var yyrt4614 bool
		if yyl4614 > cap(yyv4614) {

			yyrg4614 := len(yyv4614) > 0
			yyv24614 := yyv4614
			yyrl4614, yyrt4614 = z.DecInferLen(yyl4614, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4614 {
				if yyrl4614 <= cap(yyv4614) {
					yyv4614 = yyv4614[:yyrl4614]
				} else {
					yyv4614 = make([]Event, yyrl4614)
				}
			} else {
				yyv4614 = make([]Event, yyrl4614)
			}
			yyc4614 = true
			yyrr4614 = len(yyv4614)
			if yyrg4614 {
				copy(yyv4614, yyv24614)
			}
		} else if yyl4614 != len(yyv4614) {
			yyv4614 = yyv4614[:yyl4614]
			yyc4614 = true
		}
		yyj4614 := 0
		for ; yyj4614 < yyrr4614; yyj4614++ {
			yyh4614.ElemContainerState(yyj4614)
			if r.TryDecodeAsNil() {
				yyv4614[yyj4614] = Event{}
			} else {
				yyv4615 := &yyv4614[yyj4614]
				yyv4615.CodecDecodeSelf(d)
			}

		}
		if yyrt4614 {
			for ; yyj4614 < yyl4614; yyj4614++ {
				yyv4614 = append(yyv4614, Event{})
				yyh4614.ElemContainerState(yyj4614)
				if r.TryDecodeAsNil() {
					yyv4614[yyj4614] = Event{}
				} else {
					yyv4616 := &yyv4614[yyj4614]
					yyv4616.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4614 := 0
		for ; !r.CheckBreak(); yyj4614++ {

			if yyj4614 >= len(yyv4614) {
				yyv4614 = append(yyv4614, Event{}) // var yyz4614 Event
				yyc4614 = true
			}
			yyh4614.ElemContainerState(yyj4614)
			if yyj4614 < len(yyv4614) {
				if r.TryDecodeAsNil() {
					yyv4614[yyj4614] = Event{}
				} else {
					yyv4617 := &yyv4614[yyj4614]
					yyv4617.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4614 < len(yyv4614) {
			yyv4614 = yyv4614[:yyj4614]
			yyc4614 = true
		} else if yyj4614 == 0 && yyv4614 == nil {
			yyv4614 = []Event{}
			yyc4614 = true
		}
	}
	yyh4614.End()
	if yyc4614 {
		*v = yyv4614
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4618 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4618 == nil {
			r.EncodeNil()
		} else {
			yym4619 := z.EncBinary()
			_ = yym4619
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4618) {
			} else {
				z.EncFallback(yyv4618)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4620 := *v
	yyh4620, yyl4620 := z.DecSliceHelperStart()
	var yyc4620 bool
	if yyl4620 == 0 {
		if yyv4620 == nil {
			yyv4620 = []pkg7_runtime.Object{}
			yyc4620 = true
		} else if len(yyv4620) != 0 {
			yyv4620 = yyv4620[:0]
			yyc4620 = true
		}
	} else if yyl4620 > 0 {
		var yyrr4620, yyrl4620 int
		var yyrt4620 bool
		if yyl4620 > cap(yyv4620) {

			yyrg4620 := len(yyv4620) > 0
			yyv24620 := yyv4620
			yyrl4620, yyrt4620 = z.DecInferLen(yyl4620, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4620 {
				if yyrl4620 <= cap(yyv4620) {
					yyv4620 = yyv4620[:yyrl4620]
				} else {
					yyv4620 = make([]pkg7_runtime.Object, yyrl4620)
				}
			} else {
				yyv4620 = make([]pkg7_runtime.Object, yyrl4620)
			}
			yyc4620 = true
			yyrr4620 = len(yyv4620)
			if yyrg4620 {
				copy(yyv4620, yyv24620)
			}
		} else if yyl4620 != len(yyv4620) {
			yyv4620 = yyv4620[:yyl4620]
			yyc4620 = true
		}
		yyj4620 := 0
		for ; yyj4620 < yyrr4620; yyj4620++ {
			yyh4620.ElemContainerState(yyj4620)
			if r.TryDecodeAsNil() {
				yyv4620[yyj4620] = nil
			} else {
				yyv4621 := &yyv4620[yyj4620]
				yym4622 := z.DecBinary()
				_ = yym4622
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4621) {
				} else {
					z.DecFallback(yyv4621, true)
				}
			}

		}
		if yyrt4620 {
			for ; yyj4620 < yyl4620; yyj4620++ {
				yyv4620 = append(yyv4620, nil)
				yyh4620.ElemContainerState(yyj4620)
				if r.TryDecodeAsNil() {
					yyv4620[yyj4620] = nil
				} else {
					yyv4623 := &yyv4620[yyj4620]
					yym4624 := z.DecBinary()
					_ = yym4624
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4623) {
					} else {
						z.DecFallback(yyv4623, true)
					}
				}

			}
		}

	} else {
		yyj4620 := 0
		for ; !r.CheckBreak(); yyj4620++ {

			if yyj4620 >= len(yyv4620) {
				yyv4620 = append(yyv4620, nil) // var yyz4620 pkg7_runtime.Object
				yyc4620 = true
			}
			yyh4620.ElemContainerState(yyj4620)
			if yyj4620 < len(yyv4620) {
				if r.TryDecodeAsNil() {
					yyv4620[yyj4620] = nil
				} else {
					yyv4625 := &yyv4620[yyj4620]
					yym4626 := z.DecBinary()
					_ = yym4626
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4625) {
					} else {
						z.DecFallback(yyv4625, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4620 < len(yyv4620) {
			yyv4620 = yyv4620[:yyj4620]
			yyc4620 = true
		} else if yyj4620 == 0 && yyv4620 == nil {
			yyv4620 = []pkg7_runtime.Object{}
			yyc4620 = true
		}
	}
	yyh4620.End()
	if yyc4620 {
		*v = yyv4620
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4628 := &yyv4627
		yy4628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4629 := *v
	yyh4629, yyl4629 := z.DecSliceHelperStart()
	var yyc4629 bool
	if yyl4629 == 0 {
		if yyv4629 == nil {
			yyv4629 = []LimitRangeItem{}
			yyc4629 = true
		} else if len(yyv4629) != 0 {
			yyv4629 = yyv4629[:0]
			yyc4629 = true
		}
	} else if yyl4629 > 0 {
		var yyrr4629, yyrl4629 int
		var yyrt4629 bool
		if yyl4629 > cap(yyv4629) {

			yyrg4629 := len(yyv4629) > 0
			yyv24629 := yyv4629
			yyrl4629, yyrt4629 = z.DecInferLen(yyl4629, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4629 {
				if yyrl4629 <= cap(yyv4629) {
					yyv4629 = yyv4629[:yyrl4629]
				} else {
					yyv4629 = make([]LimitRangeItem, yyrl4629)
				}
			} else {
				yyv4629 = make([]LimitRangeItem, yyrl4629)
			}
			yyc4629 = true
			yyrr4629 = len(yyv4629)
			if yyrg4629 {
				copy(yyv4629, yyv24629)
			}
		} else if yyl4629 != len(yyv4629) {
			yyv4629 = yyv4629[:yyl4629]
			yyc4629 = true
		}
		yyj4629 := 0
		for ; yyj4629 < yyrr4629; yyj4629++ {
			yyh4629.ElemContainerState(yyj4629)
			if r.TryDecodeAsNil() {
				yyv4629[yyj4629] = LimitRangeItem{}
			} else {
				yyv4630 := &yyv4629[yyj4629]
				yyv4630.CodecDecodeSelf(d)
			}

		}
		if yyrt4629 {
			for ; yyj4629 < yyl4629; yyj4629++ {
				yyv4629 = append(yyv4629, LimitRangeItem{})
				yyh4629.ElemContainerState(yyj4629)
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = LimitRangeItem{}
				} else {
					yyv4631 := &yyv4629[yyj4629]
					yyv4631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4629 := 0
		for ; !r.CheckBreak(); yyj4629++ {

			if yyj4629 >= len(yyv4629) {
				yyv4629 = append(yyv4629, LimitRangeItem{}) // var yyz4629 LimitRangeItem
				yyc4629 = true
			}
			yyh4629.ElemContainerState(yyj4629)
			if yyj4629 < len(yyv4629) {
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = LimitRangeItem{}
				} else {
					yyv4632 := &yyv4629[yyj4629]
					yyv4632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4629 < len(yyv4629) {
			yyv4629 = yyv4629[:yyj4629]
			yyc4629 = true
		} else if yyj4629 == 0 && yyv4629 == nil {
			yyv4629 = []LimitRangeItem{}
			yyc4629 = true
		}
	}
	yyh4629.End()
	if yyc4629 {
		*v = yyv4629
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4634 := &yyv4633
		yy4634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4635 := *v
	yyh4635, yyl4635 := z.DecSliceHelperStart()
	var yyc4635 bool
	if yyl4635 == 0 {
		if yyv4635 == nil {
			yyv4635 = []LimitRange{}
			yyc4635 = true
		} else if len(yyv4635) != 0 {
			yyv4635 = yyv4635[:0]
			yyc4635 = true
		}
	} else if yyl4635 > 0 {
		var yyrr4635, yyrl4635 int
		var yyrt4635 bool
		if yyl4635 > cap(yyv4635) {

			yyrg4635 := len(yyv4635) > 0
			yyv24635 := yyv4635
			yyrl4635, yyrt4635 = z.DecInferLen(yyl4635, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4635 {
				if yyrl4635 <= cap(yyv4635) {
					yyv4635 = yyv4635[:yyrl4635]
				} else {
					yyv4635 = make([]LimitRange, yyrl4635)
				}
			} else {
				yyv4635 = make([]LimitRange, yyrl4635)
			}
			yyc4635 = true
			yyrr4635 = len(yyv4635)
			if yyrg4635 {
				copy(yyv4635, yyv24635)
			}
		} else if yyl4635 != len(yyv4635) {
			yyv4635 = yyv4635[:yyl4635]
			yyc4635 = true
		}
		yyj4635 := 0
		for ; yyj4635 < yyrr4635; yyj4635++ {
			yyh4635.ElemContainerState(yyj4635)
			if r.TryDecodeAsNil() {
				yyv4635[yyj4635] = LimitRange{}
			} else {
				yyv4636 := &yyv4635[yyj4635]
				yyv4636.CodecDecodeSelf(d)
			}

		}
		if yyrt4635 {
			for ; yyj4635 < yyl4635; yyj4635++ {
				yyv4635 = append(yyv4635, LimitRange{})
				yyh4635.ElemContainerState(yyj4635)
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = LimitRange{}
				} else {
					yyv4637 := &yyv4635[yyj4635]
					yyv4637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4635 := 0
		for ; !r.CheckBreak(); yyj4635++ {

			if yyj4635 >= len(yyv4635) {
				yyv4635 = append(yyv4635, LimitRange{}) // var yyz4635 LimitRange
				yyc4635 = true
			}
			yyh4635.ElemContainerState(yyj4635)
			if yyj4635 < len(yyv4635) {
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = LimitRange{}
				} else {
					yyv4638 := &yyv4635[yyj4635]
					yyv4638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4635 < len(yyv4635) {
			yyv4635 = yyv4635[:yyj4635]
			yyc4635 = true
		} else if yyj4635 == 0 && yyv4635 == nil {
			yyv4635 = []LimitRange{}
			yyc4635 = true
		}
	}
	yyh4635.End()
	if yyc4635 {
		*v = yyv4635
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4640 := *v
	yyh4640, yyl4640 := z.DecSliceHelperStart()
	var yyc4640 bool
	if yyl4640 == 0 {
		if yyv4640 == nil {
			yyv4640 = []ResourceQuotaScope{}
			yyc4640 = true
		} else if len(yyv4640) != 0 {
			yyv4640 = yyv4640[:0]
			yyc4640 = true
		}
	} else if yyl4640 > 0 {
		var yyrr4640, yyrl4640 int
		var yyrt4640 bool
		if yyl4640 > cap(yyv4640) {

			yyrl4640, yyrt4640 = z.DecInferLen(yyl4640, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4640 {
				if yyrl4640 <= cap(yyv4640) {
					yyv4640 = yyv4640[:yyrl4640]
				} else {
					yyv4640 = make([]ResourceQuotaScope, yyrl4640)
				}
			} else {
				yyv4640 = make([]ResourceQuotaScope, yyrl4640)
			}
			yyc4640 = true
			yyrr4640 = len(yyv4640)
		} else if yyl4640 != len(yyv4640) {
			yyv4640 = yyv4640[:yyl4640]
			yyc4640 = true
		}
		yyj4640 := 0
		for ; yyj4640 < yyrr4640; yyj4640++ {
			yyh4640.ElemContainerState(yyj4640)
			if r.TryDecodeAsNil() {
				yyv4640[yyj4640] = ""
			} else {
				yyv4640[yyj4640] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4640 {
			for ; yyj4640 < yyl4640; yyj4640++ {
				yyv4640 = append(yyv4640, "")
				yyh4640.ElemContainerState(yyj4640)
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = ""
				} else {
					yyv4640[yyj4640] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4640 := 0
		for ; !r.CheckBreak(); yyj4640++ {

			if yyj4640 >= len(yyv4640) {
				yyv4640 = append(yyv4640, "") // var yyz4640 ResourceQuotaScope
				yyc4640 = true
			}
			yyh4640.ElemContainerState(yyj4640)
			if yyj4640 < len(yyv4640) {
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = ""
				} else {
					yyv4640[yyj4640] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4640 < len(yyv4640) {
			yyv4640 = yyv4640[:yyj4640]
			yyc4640 = true
		} else if yyj4640 == 0 && yyv4640 == nil {
			yyv4640 = []ResourceQuotaScope{}
			yyc4640 = true
		}
	}
	yyh4640.End()
	if yyc4640 {
		*v = yyv4640
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yy4645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4646 := *v
	yyh4646, yyl4646 := z.DecSliceHelperStart()
	var yyc4646 bool
	if yyl4646 == 0 {
		if yyv4646 == nil {
			yyv4646 = []ResourceQuota{}
			yyc4646 = true
		} else if len(yyv4646) != 0 {
			yyv4646 = yyv4646[:0]
			yyc4646 = true
		}
	} else if yyl4646 > 0 {
		var yyrr4646, yyrl4646 int
		var yyrt4646 bool
		if yyl4646 > cap(yyv4646) {

			yyrg4646 := len(yyv4646) > 0
			yyv24646 := yyv4646
			yyrl4646, yyrt4646 = z.DecInferLen(yyl4646, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4646 {
				if yyrl4646 <= cap(yyv4646) {
					yyv4646 = yyv4646[:yyrl4646]
				} else {
					yyv4646 = make([]ResourceQuota, yyrl4646)
				}
			} else {
				yyv4646 = make([]ResourceQuota, yyrl4646)
			}
			yyc4646 = true
			yyrr4646 = len(yyv4646)
			if yyrg4646 {
				copy(yyv4646, yyv24646)
			}
		} else if yyl4646 != len(yyv4646) {
			yyv4646 = yyv4646[:yyl4646]
			yyc4646 = true
		}
		yyj4646 := 0
		for ; yyj4646 < yyrr4646; yyj4646++ {
			yyh4646.ElemContainerState(yyj4646)
			if r.TryDecodeAsNil() {
				yyv4646[yyj4646] = ResourceQuota{}
			} else {
				yyv4647 := &yyv4646[yyj4646]
				yyv4647.CodecDecodeSelf(d)
			}

		}
		if yyrt4646 {
			for ; yyj4646 < yyl4646; yyj4646++ {
				yyv4646 = append(yyv4646, ResourceQuota{})
				yyh4646.ElemContainerState(yyj4646)
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = ResourceQuota{}
				} else {
					yyv4648 := &yyv4646[yyj4646]
					yyv4648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4646 := 0
		for ; !r.CheckBreak(); yyj4646++ {

			if yyj4646 >= len(yyv4646) {
				yyv4646 = append(yyv4646, ResourceQuota{}) // var yyz4646 ResourceQuota
				yyc4646 = true
			}
			yyh4646.ElemContainerState(yyj4646)
			if yyj4646 < len(yyv4646) {
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = ResourceQuota{}
				} else {
					yyv4649 := &yyv4646[yyj4646]
					yyv4649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4646 < len(yyv4646) {
			yyv4646 = yyv4646[:yyj4646]
			yyc4646 = true
		} else if yyj4646 == 0 && yyv4646 == nil {
			yyv4646 = []ResourceQuota{}
			yyc4646 = true
		}
	}
	yyh4646.End()
	if yyc4646 {
		*v = yyv4646
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4650, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4651 := z.EncBinary()
		_ = yym4651
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4650))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4650 == nil {
			r.EncodeNil()
		} else {
			yym4652 := z.EncBinary()
			_ = yym4652
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4650))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4653 := *v
	yyl4653 := r.ReadMapStart()
	yybh4653 := z.DecBasicHandle()
	if yyv4653 == nil {
		yyrl4653, _ := z.DecInferLen(yyl4653, yybh4653.MaxInitLen, 40)
		yyv4653 = make(map[string][]uint8, yyrl4653)
		*v = yyv4653
	}
	var yymk4653 string
	var yymv4653 []uint8
	var yymg4653 bool
	if yybh4653.MapValueReset {
		yymg4653 = true
	}
	if yyl4653 > 0 {
		for yyj4653 := 0; yyj4653 < yyl4653; yyj4653++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4653 = ""
			} else {
				yymk4653 = string(r.DecodeString())
			}

			if yymg4653 {
				yymv4653 = yyv4653[yymk4653]
			} else {
				yymv4653 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4653 = nil
			} else {
				yyv4655 := &yymv4653
				yym4656 := z.DecBinary()
				_ = yym4656
				if false {
				} else {
					*yyv4655 = r.DecodeBytes(*(*[]byte)(yyv4655), false, false)
				}
			}

			if yyv4653 != nil {
				yyv4653[yymk4653] = yymv4653
			}
		}
	} else if yyl4653 < 0 {
		for yyj4653 := 0; !r.CheckBreak(); yyj4653++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4653 = ""
			} else {
				yymk4653 = string(r.DecodeString())
			}

			if yymg4653 {
				yymv4653 = yyv4653[yymk4653]
			} else {
				yymv4653 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4653 = nil
			} else {
				yyv4658 := &yymv4653
				yym4659 := z.DecBinary()
				_ = yym4659
				if false {
				} else {
					*yyv4658 = r.DecodeBytes(*(*[]byte)(yyv4658), false, false)
				}
			}

			if yyv4653 != nil {
				yyv4653[yymk4653] = yymv4653
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4661 := &yyv4660
		yy4661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4662 := *v
	yyh4662, yyl4662 := z.DecSliceHelperStart()
	var yyc4662 bool
	if yyl4662 == 0 {
		if yyv4662 == nil {
			yyv4662 = []Secret{}
			yyc4662 = true
		} else if len(yyv4662) != 0 {
			yyv4662 = yyv4662[:0]
			yyc4662 = true
		}
	} else if yyl4662 > 0 {
		var yyrr4662, yyrl4662 int
		var yyrt4662 bool
		if yyl4662 > cap(yyv4662) {

			yyrg4662 := len(yyv4662) > 0
			yyv24662 := yyv4662
			yyrl4662, yyrt4662 = z.DecInferLen(yyl4662, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4662 {
				if yyrl4662 <= cap(yyv4662) {
					yyv4662 = yyv4662[:yyrl4662]
				} else {
					yyv4662 = make([]Secret, yyrl4662)
				}
			} else {
				yyv4662 = make([]Secret, yyrl4662)
			}
			yyc4662 = true
			yyrr4662 = len(yyv4662)
			if yyrg4662 {
				copy(yyv4662, yyv24662)
			}
		} else if yyl4662 != len(yyv4662) {
			yyv4662 = yyv4662[:yyl4662]
			yyc4662 = true
		}
		yyj4662 := 0
		for ; yyj4662 < yyrr4662; yyj4662++ {
			yyh4662.ElemContainerState(yyj4662)
			if r.TryDecodeAsNil() {
				yyv4662[yyj4662] = Secret{}
			} else {
				yyv4663 := &yyv4662[yyj4662]
				yyv4663.CodecDecodeSelf(d)
			}

		}
		if yyrt4662 {
			for ; yyj4662 < yyl4662; yyj4662++ {
				yyv4662 = append(yyv4662, Secret{})
				yyh4662.ElemContainerState(yyj4662)
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = Secret{}
				} else {
					yyv4664 := &yyv4662[yyj4662]
					yyv4664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4662 := 0
		for ; !r.CheckBreak(); yyj4662++ {

			if yyj4662 >= len(yyv4662) {
				yyv4662 = append(yyv4662, Secret{}) // var yyz4662 Secret
				yyc4662 = true
			}
			yyh4662.ElemContainerState(yyj4662)
			if yyj4662 < len(yyv4662) {
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = Secret{}
				} else {
					yyv4665 := &yyv4662[yyj4662]
					yyv4665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4662 < len(yyv4662) {
			yyv4662 = yyv4662[:yyj4662]
			yyc4662 = true
		} else if yyj4662 == 0 && yyv4662 == nil {
			yyv4662 = []Secret{}
			yyc4662 = true
		}
	}
	yyh4662.End()
	if yyc4662 {
		*v = yyv4662
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4667 := &yyv4666
		yy4667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4668 := *v
	yyh4668, yyl4668 := z.DecSliceHelperStart()
	var yyc4668 bool
	if yyl4668 == 0 {
		if yyv4668 == nil {
			yyv4668 = []ConfigMap{}
			yyc4668 = true
		} else if len(yyv4668) != 0 {
			yyv4668 = yyv4668[:0]
			yyc4668 = true
		}
	} else if yyl4668 > 0 {
		var yyrr4668, yyrl4668 int
		var yyrt4668 bool
		if yyl4668 > cap(yyv4668) {

			yyrg4668 := len(yyv4668) > 0
			yyv24668 := yyv4668
			yyrl4668, yyrt4668 = z.DecInferLen(yyl4668, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4668 {
				if yyrl4668 <= cap(yyv4668) {
					yyv4668 = yyv4668[:yyrl4668]
				} else {
					yyv4668 = make([]ConfigMap, yyrl4668)
				}
			} else {
				yyv4668 = make([]ConfigMap, yyrl4668)
			}
			yyc4668 = true
			yyrr4668 = len(yyv4668)
			if yyrg4668 {
				copy(yyv4668, yyv24668)
			}
		} else if yyl4668 != len(yyv4668) {
			yyv4668 = yyv4668[:yyl4668]
			yyc4668 = true
		}
		yyj4668 := 0
		for ; yyj4668 < yyrr4668; yyj4668++ {
			yyh4668.ElemContainerState(yyj4668)
			if r.TryDecodeAsNil() {
				yyv4668[yyj4668] = ConfigMap{}
			} else {
				yyv4669 := &yyv4668[yyj4668]
				yyv4669.CodecDecodeSelf(d)
			}

		}
		if yyrt4668 {
			for ; yyj4668 < yyl4668; yyj4668++ {
				yyv4668 = append(yyv4668, ConfigMap{})
				yyh4668.ElemContainerState(yyj4668)
				if r.TryDecodeAsNil() {
					yyv4668[yyj4668] = ConfigMap{}
				} else {
					yyv4670 := &yyv4668[yyj4668]
					yyv4670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4668 := 0
		for ; !r.CheckBreak(); yyj4668++ {

			if yyj4668 >= len(yyv4668) {
				yyv4668 = append(yyv4668, ConfigMap{}) // var yyz4668 ConfigMap
				yyc4668 = true
			}
			yyh4668.ElemContainerState(yyj4668)
			if yyj4668 < len(yyv4668) {
				if r.TryDecodeAsNil() {
					yyv4668[yyj4668] = ConfigMap{}
				} else {
					yyv4671 := &yyv4668[yyj4668]
					yyv4671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4668 < len(yyv4668) {
			yyv4668 = yyv4668[:yyj4668]
			yyc4668 = true
		} else if yyj4668 == 0 && yyv4668 == nil {
			yyv4668 = []ConfigMap{}
			yyc4668 = true
		}
	}
	yyh4668.End()
	if yyc4668 {
		*v = yyv4668
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4673 := &yyv4672
		yy4673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4674 := *v
	yyh4674, yyl4674 := z.DecSliceHelperStart()
	var yyc4674 bool
	if yyl4674 == 0 {
		if yyv4674 == nil {
			yyv4674 = []ComponentCondition{}
			yyc4674 = true
		} else if len(yyv4674) != 0 {
			yyv4674 = yyv4674[:0]
			yyc4674 = true
		}
	} else if yyl4674 > 0 {
		var yyrr4674, yyrl4674 int
		var yyrt4674 bool
		if yyl4674 > cap(yyv4674) {

			yyrg4674 := len(yyv4674) > 0
			yyv24674 := yyv4674
			yyrl4674, yyrt4674 = z.DecInferLen(yyl4674, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4674 {
				if yyrl4674 <= cap(yyv4674) {
					yyv4674 = yyv4674[:yyrl4674]
				} else {
					yyv4674 = make([]ComponentCondition, yyrl4674)
				}
			} else {
				yyv4674 = make([]ComponentCondition, yyrl4674)
			}
			yyc4674 = true
			yyrr4674 = len(yyv4674)
			if yyrg4674 {
				copy(yyv4674, yyv24674)
			}
		} else if yyl4674 != len(yyv4674) {
			yyv4674 = yyv4674[:yyl4674]
			yyc4674 = true
		}
		yyj4674 := 0
		for ; yyj4674 < yyrr4674; yyj4674++ {
			yyh4674.ElemContainerState(yyj4674)
			if r.TryDecodeAsNil() {
				yyv4674[yyj4674] = ComponentCondition{}
			} else {
				yyv4675 := &yyv4674[yyj4674]
				yyv4675.CodecDecodeSelf(d)
			}

		}
		if yyrt4674 {
			for ; yyj4674 < yyl4674; yyj4674++ {
				yyv4674 = append(yyv4674, ComponentCondition{})
				yyh4674.ElemContainerState(yyj4674)
				if r.TryDecodeAsNil() {
					yyv4674[yyj4674] = ComponentCondition{}
				} else {
					yyv4676 := &yyv4674[yyj4674]
					yyv4676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4674 := 0
		for ; !r.CheckBreak(); yyj4674++ {

			if yyj4674 >= len(yyv4674) {
				yyv4674 = append(yyv4674, ComponentCondition{}) // var yyz4674 ComponentCondition
				yyc4674 = true
			}
			yyh4674.ElemContainerState(yyj4674)
			if yyj4674 < len(yyv4674) {
				if r.TryDecodeAsNil() {
					yyv4674[yyj4674] = ComponentCondition{}
				} else {
					yyv4677 := &yyv4674[yyj4674]
					yyv4677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4674 < len(yyv4674) {
			yyv4674 = yyv4674[:yyj4674]
			yyc4674 = true
		} else if yyj4674 == 0 && yyv4674 == nil {
			yyv4674 = []ComponentCondition{}
			yyc4674 = true
		}
	}
	yyh4674.End()
	if yyc4674 {
		*v = yyv4674
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4679 := &yyv4678
		yy4679.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4680 := *v
	yyh4680, yyl4680 := z.DecSliceHelperStart()
	var yyc4680 bool
	if yyl4680 == 0 {
		if yyv4680 == nil {
			yyv4680 = []ComponentStatus{}
			yyc4680 = true
		} else if len(yyv4680) != 0 {
			yyv4680 = yyv4680[:0]
			yyc4680 = true
		}
	} else if yyl4680 > 0 {
		var yyrr4680, yyrl4680 int
		var yyrt4680 bool
		if yyl4680 > cap(yyv4680) {

			yyrg4680 := len(yyv4680) > 0
			yyv24680 := yyv4680
			yyrl4680, yyrt4680 = z.DecInferLen(yyl4680, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4680 {
				if yyrl4680 <= cap(yyv4680) {
					yyv4680 = yyv4680[:yyrl4680]
				} else {
					yyv4680 = make([]ComponentStatus, yyrl4680)
				}
			} else {
				yyv4680 = make([]ComponentStatus, yyrl4680)
			}
			yyc4680 = true
			yyrr4680 = len(yyv4680)
			if yyrg4680 {
				copy(yyv4680, yyv24680)
			}
		} else if yyl4680 != len(yyv4680) {
			yyv4680 = yyv4680[:yyl4680]
			yyc4680 = true
		}
		yyj4680 := 0
		for ; yyj4680 < yyrr4680; yyj4680++ {
			yyh4680.ElemContainerState(yyj4680)
			if r.TryDecodeAsNil() {
				yyv4680[yyj4680] = ComponentStatus{}
			} else {
				yyv4681 := &yyv4680[yyj4680]
				yyv4681.CodecDecodeSelf(d)
			}

		}
		if yyrt4680 {
			for ; yyj4680 < yyl4680; yyj4680++ {
				yyv4680 = append(yyv4680, ComponentStatus{})
				yyh4680.ElemContainerState(yyj4680)
				if r.TryDecodeAsNil() {
					yyv4680[yyj4680] = ComponentStatus{}
				} else {
					yyv4682 := &yyv4680[yyj4680]
					yyv4682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4680 := 0
		for ; !r.CheckBreak(); yyj4680++ {

			if yyj4680 >= len(yyv4680) {
				yyv4680 = append(yyv4680, ComponentStatus{}) // var yyz4680 ComponentStatus
				yyc4680 = true
			}
			yyh4680.ElemContainerState(yyj4680)
			if yyj4680 < len(yyv4680) {
				if r.TryDecodeAsNil() {
					yyv4680[yyj4680] = ComponentStatus{}
				} else {
					yyv4683 := &yyv4680[yyj4680]
					yyv4683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4680 < len(yyv4680) {
			yyv4680 = yyv4680[:yyj4680]
			yyc4680 = true
		} else if yyj4680 == 0 && yyv4680 == nil {
			yyv4680 = []ComponentStatus{}
			yyc4680 = true
		}
	}
	yyh4680.End()
	if yyc4680 {
		*v = yyv4680
	}
}
